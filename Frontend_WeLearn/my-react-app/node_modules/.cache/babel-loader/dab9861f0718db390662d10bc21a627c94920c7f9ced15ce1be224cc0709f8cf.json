{"ast":null,"code":"// Integer Utility\nexport var UINT32_MAX = 4294967295;\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nexport function setUint64(view, offset, value) {\n  var high = value / 4294967296;\n  var low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\nexport function setInt64(view, offset, value) {\n  var high = Math.floor(value / 4294967296);\n  var low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\nexport function getInt64(view, offset) {\n  var high = view.getInt32(offset);\n  var low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}\nexport function getUint64(view, offset) {\n  var high = view.getUint32(offset);\n  var low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}","map":{"version":3,"names":["UINT32_MAX","setUint64","view","offset","value","high","low","setUint32","setInt64","Math","floor","getInt64","getInt32","getUint32","getUint64"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\utils\\int.ts"],"sourcesContent":["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n"],"mappings":"AAAA;AAEA,OAAO,IAAMA,UAAU,GAAG,UAAW;AAErC;AACA;AAEA,OAAM,SAAUC,SAASA,CAACC,IAAc,EAAEC,MAAc,EAAEC,KAAa;EACrE,IAAMC,IAAI,GAAGD,KAAK,GAAG,UAAa;EAClC,IAAME,GAAG,GAAGF,KAAK,CAAC,CAAC;EACnBF,IAAI,CAACK,SAAS,CAACJ,MAAM,EAAEE,IAAI,CAAC;EAC5BH,IAAI,CAACK,SAAS,CAACJ,MAAM,GAAG,CAAC,EAAEG,GAAG,CAAC;AACjC;AAEA,OAAM,SAAUE,QAAQA,CAACN,IAAc,EAAEC,MAAc,EAAEC,KAAa;EACpE,IAAMC,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACN,KAAK,GAAG,UAAa,CAAC;EAC9C,IAAME,GAAG,GAAGF,KAAK,CAAC,CAAC;EACnBF,IAAI,CAACK,SAAS,CAACJ,MAAM,EAAEE,IAAI,CAAC;EAC5BH,IAAI,CAACK,SAAS,CAACJ,MAAM,GAAG,CAAC,EAAEG,GAAG,CAAC;AACjC;AAEA,OAAM,SAAUK,QAAQA,CAACT,IAAc,EAAEC,MAAc;EACrD,IAAME,IAAI,GAAGH,IAAI,CAACU,QAAQ,CAACT,MAAM,CAAC;EAClC,IAAMG,GAAG,GAAGJ,IAAI,CAACW,SAAS,CAACV,MAAM,GAAG,CAAC,CAAC;EACtC,OAAOE,IAAI,GAAG,UAAa,GAAGC,GAAG;AACnC;AAEA,OAAM,SAAUQ,SAASA,CAACZ,IAAc,EAAEC,MAAc;EACtD,IAAME,IAAI,GAAGH,IAAI,CAACW,SAAS,CAACV,MAAM,CAAC;EACnC,IAAMG,GAAG,GAAGJ,IAAI,CAACW,SAAS,CAACV,MAAM,GAAG,CAAC,CAAC;EACtC,OAAOE,IAAI,GAAG,UAAa,GAAGC,GAAG;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}