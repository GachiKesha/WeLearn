{"ast":null,"code":"class $e8379818650e2442$export$93654d4f2d6cd524 {\n  constructor() {\n    this.encoder = new TextEncoder();\n    this._pieces = [];\n    this._parts = [];\n  }\n  append_buffer(data) {\n    this.flush();\n    this._parts.push(data);\n  }\n  append(data) {\n    this._pieces.push(data);\n  }\n  flush() {\n    if (this._pieces.length > 0) {\n      const buf = new Uint8Array(this._pieces);\n      this._parts.push(buf);\n      this._pieces = [];\n    }\n  }\n  toArrayBuffer() {\n    const buffer = [];\n    for (const part of this._parts) buffer.push(part);\n    return $e8379818650e2442$var$concatArrayBuffers(buffer).buffer;\n  }\n}\nfunction $e8379818650e2442$var$concatArrayBuffers(bufs) {\n  let size = 0;\n  for (const buf of bufs) size += buf.byteLength;\n  const result = new Uint8Array(size);\n  let offset = 0;\n  for (const buf of bufs) {\n    const view = new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    result.set(view, offset);\n    offset += buf.byteLength;\n  }\n  return result;\n}\nfunction $0cfd7828ad59115f$export$417857010dc9287f(data) {\n  const unpacker = new $0cfd7828ad59115f$var$Unpacker(data);\n  return unpacker.unpack();\n}\nfunction $0cfd7828ad59115f$export$2a703dbb0cb35339(data) {\n  const packer = new $0cfd7828ad59115f$export$b9ec4b114aa40074();\n  packer.pack(data);\n  return packer.getBuffer();\n}\nclass $0cfd7828ad59115f$var$Unpacker {\n  constructor(data) {\n    this.index = 0;\n    this.dataBuffer = data;\n    this.dataView = new Uint8Array(this.dataBuffer);\n    this.length = this.dataBuffer.byteLength;\n  }\n  unpack() {\n    const type = this.unpack_uint8();\n    if (type < 0x80) return type;else if ((type ^ 0xe0) < 0x20) return (type ^ 0xe0) - 0x20;\n    let size;\n    if ((size = type ^ 0xa0) <= 0x0f) return this.unpack_raw(size);else if ((size = type ^ 0xb0) <= 0x0f) return this.unpack_string(size);else if ((size = type ^ 0x90) <= 0x0f) return this.unpack_array(size);else if ((size = type ^ 0x80) <= 0x0f) return this.unpack_map(size);\n    switch (type) {\n      case 0xc0:\n        return null;\n      case 0xc1:\n        return undefined;\n      case 0xc2:\n        return false;\n      case 0xc3:\n        return true;\n      case 0xca:\n        return this.unpack_float();\n      case 0xcb:\n        return this.unpack_double();\n      case 0xcc:\n        return this.unpack_uint8();\n      case 0xcd:\n        return this.unpack_uint16();\n      case 0xce:\n        return this.unpack_uint32();\n      case 0xcf:\n        return this.unpack_uint64();\n      case 0xd0:\n        return this.unpack_int8();\n      case 0xd1:\n        return this.unpack_int16();\n      case 0xd2:\n        return this.unpack_int32();\n      case 0xd3:\n        return this.unpack_int64();\n      case 0xd4:\n        return undefined;\n      case 0xd5:\n        return undefined;\n      case 0xd6:\n        return undefined;\n      case 0xd7:\n        return undefined;\n      case 0xd8:\n        size = this.unpack_uint16();\n        return this.unpack_string(size);\n      case 0xd9:\n        size = this.unpack_uint32();\n        return this.unpack_string(size);\n      case 0xda:\n        size = this.unpack_uint16();\n        return this.unpack_raw(size);\n      case 0xdb:\n        size = this.unpack_uint32();\n        return this.unpack_raw(size);\n      case 0xdc:\n        size = this.unpack_uint16();\n        return this.unpack_array(size);\n      case 0xdd:\n        size = this.unpack_uint32();\n        return this.unpack_array(size);\n      case 0xde:\n        size = this.unpack_uint16();\n        return this.unpack_map(size);\n      case 0xdf:\n        size = this.unpack_uint32();\n        return this.unpack_map(size);\n    }\n  }\n  unpack_uint8() {\n    const byte = this.dataView[this.index] & 0xff;\n    this.index++;\n    return byte;\n  }\n  unpack_uint16() {\n    const bytes = this.read(2);\n    const uint16 = (bytes[0] & 0xff) * 256 + (bytes[1] & 0xff);\n    this.index += 2;\n    return uint16;\n  }\n  unpack_uint32() {\n    const bytes = this.read(4);\n    const uint32 = ((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3];\n    this.index += 4;\n    return uint32;\n  }\n  unpack_uint64() {\n    const bytes = this.read(8);\n    const uint64 = ((((((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3]) * 256 + bytes[4]) * 256 + bytes[5]) * 256 + bytes[6]) * 256 + bytes[7];\n    this.index += 8;\n    return uint64;\n  }\n  unpack_int8() {\n    const uint8 = this.unpack_uint8();\n    return uint8 < 0x80 ? uint8 : uint8 - 256;\n  }\n  unpack_int16() {\n    const uint16 = this.unpack_uint16();\n    return uint16 < 0x8000 ? uint16 : uint16 - 65536;\n  }\n  unpack_int32() {\n    const uint32 = this.unpack_uint32();\n    return uint32 < 2 ** 31 ? uint32 : uint32 - 2 ** 32;\n  }\n  unpack_int64() {\n    const uint64 = this.unpack_uint64();\n    return uint64 < 2 ** 63 ? uint64 : uint64 - 2 ** 64;\n  }\n  unpack_raw(size) {\n    if (this.length < this.index + size) throw new Error(`BinaryPackFailure: index is out of range ${this.index} ${size} ${this.length}`);\n    const buf = this.dataBuffer.slice(this.index, this.index + size);\n    this.index += size;\n    return buf;\n  }\n  unpack_string(size) {\n    const bytes = this.read(size);\n    let i = 0;\n    let str = \"\";\n    let c;\n    let code;\n    while (i < size) {\n      c = bytes[i];\n      // The length of a UTF-8 sequence is specified in the first byte:\n      // 0xxxxxxx means length 1,\n      // 110xxxxx means length 2,\n      // 1110xxxx means length 3,\n      // 11110xxx means length 4.\n      // 10xxxxxx is for non-initial bytes.\n      if (c < 0xa0) {\n        // One-byte sequence: bits 0xxxxxxx\n        code = c;\n        i++;\n      } else if ((c ^ 0xc0) < 0x20) {\n        // Two-byte sequence: bits 110xxxxx 10xxxxxx\n        code = (c & 0x1f) << 6 | bytes[i + 1] & 0x3f;\n        i += 2;\n      } else if ((c ^ 0xe0) < 0x10) {\n        // Three-byte sequence: bits 1110xxxx 10xxxxxx 10xxxxxx\n        code = (c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f;\n        i += 3;\n      } else {\n        // Four-byte sequence: bits 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n        code = (c & 0x07) << 18 | (bytes[i + 1] & 0x3f) << 12 | (bytes[i + 2] & 0x3f) << 6 | bytes[i + 3] & 0x3f;\n        i += 4;\n      }\n      str += String.fromCodePoint(code);\n    }\n    this.index += size;\n    return str;\n  }\n  unpack_array(size) {\n    const objects = new Array(size);\n    for (let i = 0; i < size; i++) objects[i] = this.unpack();\n    return objects;\n  }\n  unpack_map(size) {\n    const map = {};\n    for (let i = 0; i < size; i++) {\n      const key = this.unpack();\n      map[key] = this.unpack();\n    }\n    return map;\n  }\n  unpack_float() {\n    const uint32 = this.unpack_uint32();\n    const sign = uint32 >> 31;\n    const exp = (uint32 >> 23 & 0xff) - 127;\n    const fraction = uint32 & 0x7fffff | 0x800000;\n    return (sign === 0 ? 1 : -1) * fraction * 2 ** (exp - 23);\n  }\n  unpack_double() {\n    const h32 = this.unpack_uint32();\n    const l32 = this.unpack_uint32();\n    const sign = h32 >> 31;\n    const exp = (h32 >> 20 & 0x7ff) - 1023;\n    const hfrac = h32 & 0xfffff | 0x100000;\n    const frac = hfrac * 2 ** (exp - 20) + l32 * 2 ** (exp - 52);\n    return (sign === 0 ? 1 : -1) * frac;\n  }\n  read(length) {\n    const j = this.index;\n    if (j + length <= this.length) return this.dataView.subarray(j, j + length);else throw new Error(\"BinaryPackFailure: read index out of range\");\n  }\n}\nclass $0cfd7828ad59115f$export$b9ec4b114aa40074 {\n  getBuffer() {\n    return this._bufferBuilder.toArrayBuffer();\n  }\n  pack(value) {\n    if (typeof value === \"string\") this.pack_string(value);else if (typeof value === \"number\") {\n      if (Math.floor(value) === value) this.pack_integer(value);else this.pack_double(value);\n    } else if (typeof value === \"boolean\") {\n      if (value === true) this._bufferBuilder.append(0xc3);else if (value === false) this._bufferBuilder.append(0xc2);\n    } else if (value === undefined) this._bufferBuilder.append(0xc0);else if (typeof value === \"object\") {\n      if (value === null) this._bufferBuilder.append(0xc0);else {\n        const constructor = value.constructor;\n        if (value instanceof Array) this.pack_array(value);else if (value instanceof ArrayBuffer) this.pack_bin(new Uint8Array(value));else if (\"BYTES_PER_ELEMENT\" in value) {\n          const v = value;\n          this.pack_bin(new Uint8Array(v.buffer, v.byteOffset, v.byteLength));\n        } else if (value instanceof Date) this.pack_string(value.toString());else if (constructor == Object || constructor.toString().startsWith(\"class\")) this.pack_object(value);else throw new Error(`Type \"${constructor.toString()}\" not yet supported`);\n      }\n    } else throw new Error(`Type \"${typeof value}\" not yet supported`);\n    this._bufferBuilder.flush();\n  }\n  pack_bin(blob) {\n    const length = blob.length;\n    if (length <= 0x0f) this.pack_uint8(0xa0 + length);else if (length <= 0xffff) {\n      this._bufferBuilder.append(0xda);\n      this.pack_uint16(length);\n    } else if (length <= 0xffffffff) {\n      this._bufferBuilder.append(0xdb);\n      this.pack_uint32(length);\n    } else throw new Error(\"Invalid length\");\n    this._bufferBuilder.append_buffer(blob);\n  }\n  pack_string(str) {\n    const encoded = this._textEncoder.encode(str);\n    const length = encoded.length;\n    if (length <= 0x0f) this.pack_uint8(0xb0 + length);else if (length <= 0xffff) {\n      this._bufferBuilder.append(0xd8);\n      this.pack_uint16(length);\n    } else if (length <= 0xffffffff) {\n      this._bufferBuilder.append(0xd9);\n      this.pack_uint32(length);\n    } else throw new Error(\"Invalid length\");\n    this._bufferBuilder.append_buffer(encoded);\n  }\n  pack_array(ary) {\n    const length = ary.length;\n    if (length <= 0x0f) this.pack_uint8(0x90 + length);else if (length <= 0xffff) {\n      this._bufferBuilder.append(0xdc);\n      this.pack_uint16(length);\n    } else if (length <= 0xffffffff) {\n      this._bufferBuilder.append(0xdd);\n      this.pack_uint32(length);\n    } else throw new Error(\"Invalid length\");\n    for (let i = 0; i < length; i++) this.pack(ary[i]);\n  }\n  pack_integer(num) {\n    if (num >= -32 && num <= 0x7f) this._bufferBuilder.append(num & 0xff);else if (num >= 0x00 && num <= 0xff) {\n      this._bufferBuilder.append(0xcc);\n      this.pack_uint8(num);\n    } else if (num >= -128 && num <= 0x7f) {\n      this._bufferBuilder.append(0xd0);\n      this.pack_int8(num);\n    } else if (num >= 0x0000 && num <= 0xffff) {\n      this._bufferBuilder.append(0xcd);\n      this.pack_uint16(num);\n    } else if (num >= -32768 && num <= 0x7fff) {\n      this._bufferBuilder.append(0xd1);\n      this.pack_int16(num);\n    } else if (num >= 0x00000000 && num <= 0xffffffff) {\n      this._bufferBuilder.append(0xce);\n      this.pack_uint32(num);\n    } else if (num >= -2147483648 && num <= 0x7fffffff) {\n      this._bufferBuilder.append(0xd2);\n      this.pack_int32(num);\n    } else if (num >= -9223372036854776000 && num <= 0x7fffffffffffffff) {\n      this._bufferBuilder.append(0xd3);\n      this.pack_int64(num);\n    } else if (num >= 0x0000000000000000 && num <= 0xffffffffffffffff) {\n      this._bufferBuilder.append(0xcf);\n      this.pack_uint64(num);\n    } else throw new Error(\"Invalid integer\");\n  }\n  pack_double(num) {\n    let sign = 0;\n    if (num < 0) {\n      sign = 1;\n      num = -num;\n    }\n    const exp = Math.floor(Math.log(num) / Math.LN2);\n    const frac0 = num / 2 ** exp - 1;\n    const frac1 = Math.floor(frac0 * 2 ** 52);\n    const b32 = 2 ** 32;\n    const h32 = sign << 31 | exp + 1023 << 20 | frac1 / b32 & 0x0fffff;\n    const l32 = frac1 % b32;\n    this._bufferBuilder.append(0xcb);\n    this.pack_int32(h32);\n    this.pack_int32(l32);\n  }\n  pack_object(obj) {\n    const keys = Object.keys(obj);\n    const length = keys.length;\n    if (length <= 0x0f) this.pack_uint8(0x80 + length);else if (length <= 0xffff) {\n      this._bufferBuilder.append(0xde);\n      this.pack_uint16(length);\n    } else if (length <= 0xffffffff) {\n      this._bufferBuilder.append(0xdf);\n      this.pack_uint32(length);\n    } else throw new Error(\"Invalid length\");\n    for (const prop in obj)\n    // eslint-disable-next-line no-prototype-builtins\n    if (obj.hasOwnProperty(prop)) {\n      this.pack(prop);\n      this.pack(obj[prop]);\n    }\n  }\n  pack_uint8(num) {\n    this._bufferBuilder.append(num);\n  }\n  pack_uint16(num) {\n    this._bufferBuilder.append(num >> 8);\n    this._bufferBuilder.append(num & 0xff);\n  }\n  pack_uint32(num) {\n    const n = num & 0xffffffff;\n    this._bufferBuilder.append((n & 0xff000000) >>> 24);\n    this._bufferBuilder.append((n & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((n & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(n & 0x000000ff);\n  }\n  pack_uint64(num) {\n    const high = num / 2 ** 32;\n    const low = num % 2 ** 32;\n    this._bufferBuilder.append((high & 0xff000000) >>> 24);\n    this._bufferBuilder.append((high & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((high & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(high & 0x000000ff);\n    this._bufferBuilder.append((low & 0xff000000) >>> 24);\n    this._bufferBuilder.append((low & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((low & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(low & 0x000000ff);\n  }\n  pack_int8(num) {\n    this._bufferBuilder.append(num & 0xff);\n  }\n  pack_int16(num) {\n    this._bufferBuilder.append((num & 0xff00) >> 8);\n    this._bufferBuilder.append(num & 0xff);\n  }\n  pack_int32(num) {\n    this._bufferBuilder.append(num >>> 24 & 0xff);\n    this._bufferBuilder.append((num & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((num & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(num & 0x000000ff);\n  }\n  pack_int64(num) {\n    const high = Math.floor(num / 2 ** 32);\n    const low = num % 2 ** 32;\n    this._bufferBuilder.append((high & 0xff000000) >>> 24);\n    this._bufferBuilder.append((high & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((high & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(high & 0x000000ff);\n    this._bufferBuilder.append((low & 0xff000000) >>> 24);\n    this._bufferBuilder.append((low & 0x00ff0000) >>> 16);\n    this._bufferBuilder.append((low & 0x0000ff00) >>> 8);\n    this._bufferBuilder.append(low & 0x000000ff);\n  }\n  constructor() {\n    this._bufferBuilder = new (0, $e8379818650e2442$export$93654d4f2d6cd524)();\n    this._textEncoder = new TextEncoder();\n  }\n}\nexport { $0cfd7828ad59115f$export$417857010dc9287f as unpack, $0cfd7828ad59115f$export$2a703dbb0cb35339 as pack, $0cfd7828ad59115f$export$b9ec4b114aa40074 as Packer };","map":{"version":3,"names":["$e8379818650e2442$export$93654d4f2d6cd524","constructor","encoder","TextEncoder","_pieces","_parts","append_buffer","data","flush","push","append","length","buf","Uint8Array","toArrayBuffer","buffer","part","$e8379818650e2442$var$concatArrayBuffers","bufs","size","byteLength","result","offset","view","byteOffset","set","$0cfd7828ad59115f$export$417857010dc9287f","unpacker","$0cfd7828ad59115f$var$Unpacker","unpack","$0cfd7828ad59115f$export$2a703dbb0cb35339","packer","$0cfd7828ad59115f$export$b9ec4b114aa40074","pack","getBuffer","index","dataBuffer","dataView","type","unpack_uint8","unpack_raw","unpack_string","unpack_array","unpack_map","undefined","unpack_float","unpack_double","unpack_uint16","unpack_uint32","unpack_uint64","unpack_int8","unpack_int16","unpack_int32","unpack_int64","byte","bytes","read","uint16","uint32","uint64","uint8","Error","slice","i","str","c","code","String","fromCodePoint","objects","Array","map","key","sign","exp","fraction","h32","l32","hfrac","frac","j","subarray","_bufferBuilder","value","pack_string","Math","floor","pack_integer","pack_double","pack_array","ArrayBuffer","pack_bin","v","Date","toString","Object","startsWith","pack_object","blob","pack_uint8","pack_uint16","pack_uint32","encoded","_textEncoder","encode","ary","num","pack_int8","pack_int16","pack_int32","pack_int64","pack_uint64","log","LN2","frac0","frac1","b32","obj","keys","prop","hasOwnProperty","n","high","low"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs-js-binarypack\\lib\\binarypack.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs-js-binarypack\\lib\\bufferbuilder.ts"],"sourcesContent":["import { BufferBuilder } from \"./bufferbuilder\";\n\nexport type Packable =\n\t| null\n\t| undefined\n\t| string\n\t| number\n\t| boolean\n\t| Date\n\t| ArrayBuffer\n\t| Array<Packable>\n\t| { [key: string]: Packable }\n\t| ({ BYTES_PER_ELEMENT: number } & ArrayBufferView);\nexport type Unpackable =\n\t| null\n\t| undefined\n\t| string\n\t| number\n\t| boolean\n\t| ArrayBuffer\n\t| Array<Unpackable>\n\t| { [key: string]: Unpackable };\n\nexport function unpack<T extends Unpackable>(data: ArrayBuffer) {\n\tconst unpacker = new Unpacker(data);\n\treturn unpacker.unpack() as T;\n}\n\nexport function pack(data: Packable) {\n\tconst packer = new Packer();\n\tpacker.pack(data);\n\treturn packer.getBuffer();\n}\n\nclass Unpacker {\n\tprivate index: number;\n\tprivate readonly dataBuffer: ArrayBuffer;\n\tprivate readonly dataView: Uint8Array;\n\tprivate readonly length: number;\n\n\tconstructor(data: ArrayBuffer) {\n\t\tthis.index = 0;\n\t\tthis.dataBuffer = data;\n\t\tthis.dataView = new Uint8Array(this.dataBuffer);\n\t\tthis.length = this.dataBuffer.byteLength;\n\t}\n\n\tunpack(): Unpackable {\n\t\tconst type = this.unpack_uint8();\n\t\tif (type < 0x80) {\n\t\t\treturn type;\n\t\t} else if ((type ^ 0xe0) < 0x20) {\n\t\t\treturn (type ^ 0xe0) - 0x20;\n\t\t}\n\n\t\tlet size;\n\t\tif ((size = type ^ 0xa0) <= 0x0f) {\n\t\t\treturn this.unpack_raw(size);\n\t\t} else if ((size = type ^ 0xb0) <= 0x0f) {\n\t\t\treturn this.unpack_string(size);\n\t\t} else if ((size = type ^ 0x90) <= 0x0f) {\n\t\t\treturn this.unpack_array(size);\n\t\t} else if ((size = type ^ 0x80) <= 0x0f) {\n\t\t\treturn this.unpack_map(size);\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 0xc0:\n\t\t\t\treturn null;\n\t\t\tcase 0xc1:\n\t\t\t\treturn undefined;\n\t\t\tcase 0xc2:\n\t\t\t\treturn false;\n\t\t\tcase 0xc3:\n\t\t\t\treturn true;\n\t\t\tcase 0xca:\n\t\t\t\treturn this.unpack_float();\n\t\t\tcase 0xcb:\n\t\t\t\treturn this.unpack_double();\n\t\t\tcase 0xcc:\n\t\t\t\treturn this.unpack_uint8();\n\t\t\tcase 0xcd:\n\t\t\t\treturn this.unpack_uint16();\n\t\t\tcase 0xce:\n\t\t\t\treturn this.unpack_uint32();\n\t\t\tcase 0xcf:\n\t\t\t\treturn this.unpack_uint64();\n\t\t\tcase 0xd0:\n\t\t\t\treturn this.unpack_int8();\n\t\t\tcase 0xd1:\n\t\t\t\treturn this.unpack_int16();\n\t\t\tcase 0xd2:\n\t\t\t\treturn this.unpack_int32();\n\t\t\tcase 0xd3:\n\t\t\t\treturn this.unpack_int64();\n\t\t\tcase 0xd4:\n\t\t\t\treturn undefined;\n\t\t\tcase 0xd5:\n\t\t\t\treturn undefined;\n\t\t\tcase 0xd6:\n\t\t\t\treturn undefined;\n\t\t\tcase 0xd7:\n\t\t\t\treturn undefined;\n\t\t\tcase 0xd8:\n\t\t\t\tsize = this.unpack_uint16();\n\t\t\t\treturn this.unpack_string(size);\n\t\t\tcase 0xd9:\n\t\t\t\tsize = this.unpack_uint32();\n\t\t\t\treturn this.unpack_string(size);\n\t\t\tcase 0xda:\n\t\t\t\tsize = this.unpack_uint16();\n\t\t\t\treturn this.unpack_raw(size);\n\t\t\tcase 0xdb:\n\t\t\t\tsize = this.unpack_uint32();\n\t\t\t\treturn this.unpack_raw(size);\n\t\t\tcase 0xdc:\n\t\t\t\tsize = this.unpack_uint16();\n\t\t\t\treturn this.unpack_array(size);\n\t\t\tcase 0xdd:\n\t\t\t\tsize = this.unpack_uint32();\n\t\t\t\treturn this.unpack_array(size);\n\t\t\tcase 0xde:\n\t\t\t\tsize = this.unpack_uint16();\n\t\t\t\treturn this.unpack_map(size);\n\t\t\tcase 0xdf:\n\t\t\t\tsize = this.unpack_uint32();\n\t\t\t\treturn this.unpack_map(size);\n\t\t}\n\t}\n\n\tunpack_uint8() {\n\t\tconst byte = this.dataView[this.index] & 0xff;\n\t\tthis.index++;\n\t\treturn byte;\n\t}\n\n\tunpack_uint16() {\n\t\tconst bytes = this.read(2);\n\t\tconst uint16 = (bytes[0] & 0xff) * 256 + (bytes[1] & 0xff);\n\t\tthis.index += 2;\n\t\treturn uint16;\n\t}\n\n\tunpack_uint32() {\n\t\tconst bytes = this.read(4);\n\t\tconst uint32 =\n\t\t\t((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3];\n\t\tthis.index += 4;\n\t\treturn uint32;\n\t}\n\n\tunpack_uint64() {\n\t\tconst bytes = this.read(8);\n\t\tconst uint64 =\n\t\t\t((((((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3]) *\n\t\t\t\t256 +\n\t\t\t\tbytes[4]) *\n\t\t\t\t256 +\n\t\t\t\tbytes[5]) *\n\t\t\t\t256 +\n\t\t\t\tbytes[6]) *\n\t\t\t\t256 +\n\t\t\tbytes[7];\n\t\tthis.index += 8;\n\t\treturn uint64;\n\t}\n\n\tunpack_int8() {\n\t\tconst uint8 = this.unpack_uint8();\n\t\treturn uint8 < 0x80 ? uint8 : uint8 - (1 << 8);\n\t}\n\n\tunpack_int16() {\n\t\tconst uint16 = this.unpack_uint16();\n\t\treturn uint16 < 0x8000 ? uint16 : uint16 - (1 << 16);\n\t}\n\n\tunpack_int32() {\n\t\tconst uint32 = this.unpack_uint32();\n\t\treturn uint32 < 2 ** 31 ? uint32 : uint32 - 2 ** 32;\n\t}\n\n\tunpack_int64() {\n\t\tconst uint64 = this.unpack_uint64();\n\t\treturn uint64 < 2 ** 63 ? uint64 : uint64 - 2 ** 64;\n\t}\n\n\tunpack_raw(size: number) {\n\t\tif (this.length < this.index + size) {\n\t\t\tthrow new Error(\n\t\t\t\t`BinaryPackFailure: index is out of range ${this.index} ${size} ${this.length}`,\n\t\t\t);\n\t\t}\n\t\tconst buf = this.dataBuffer.slice(this.index, this.index + size);\n\t\tthis.index += size;\n\n\t\treturn buf;\n\t}\n\n\tunpack_string(size: number) {\n\t\tconst bytes = this.read(size);\n\t\tlet i = 0;\n\t\tlet str = \"\";\n\t\tlet c;\n\t\tlet code;\n\n\t\twhile (i < size) {\n\t\t\tc = bytes[i];\n\t\t\t// The length of a UTF-8 sequence is specified in the first byte:\n\t\t\t// 0xxxxxxx means length 1,\n\t\t\t// 110xxxxx means length 2,\n\t\t\t// 1110xxxx means length 3,\n\t\t\t// 11110xxx means length 4.\n\t\t\t// 10xxxxxx is for non-initial bytes.\n\t\t\tif (c < 0xa0) {\n\t\t\t\t// One-byte sequence: bits 0xxxxxxx\n\t\t\t\tcode = c;\n\t\t\t\ti++;\n\t\t\t} else if ((c ^ 0xc0) < 0x20) {\n\t\t\t\t// Two-byte sequence: bits 110xxxxx 10xxxxxx\n\t\t\t\tcode = ((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f);\n\t\t\t\ti += 2;\n\t\t\t} else if ((c ^ 0xe0) < 0x10) {\n\t\t\t\t// Three-byte sequence: bits 1110xxxx 10xxxxxx 10xxxxxx\n\t\t\t\tcode =\n\t\t\t\t\t((c & 0x0f) << 12) |\n\t\t\t\t\t((bytes[i + 1] & 0x3f) << 6) |\n\t\t\t\t\t(bytes[i + 2] & 0x3f);\n\t\t\t\ti += 3;\n\t\t\t} else {\n\t\t\t\t// Four-byte sequence: bits 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\t\t\t\tcode =\n\t\t\t\t\t((c & 0x07) << 18) |\n\t\t\t\t\t((bytes[i + 1] & 0x3f) << 12) |\n\t\t\t\t\t((bytes[i + 2] & 0x3f) << 6) |\n\t\t\t\t\t(bytes[i + 3] & 0x3f);\n\t\t\t\ti += 4;\n\t\t\t}\n\t\t\tstr += String.fromCodePoint(code);\n\t\t}\n\n\t\tthis.index += size;\n\t\treturn str;\n\t}\n\n\tunpack_array(size: number) {\n\t\tconst objects = new Array<Unpackable>(size);\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tobjects[i] = this.unpack();\n\t\t}\n\t\treturn objects;\n\t}\n\n\tunpack_map(size: number) {\n\t\tconst map: { [key: string]: Unpackable } = {};\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tconst key = this.unpack() as string;\n\t\t\tmap[key] = this.unpack();\n\t\t}\n\t\treturn map;\n\t}\n\n\tunpack_float() {\n\t\tconst uint32 = this.unpack_uint32();\n\t\tconst sign = uint32 >> 31;\n\t\tconst exp = ((uint32 >> 23) & 0xff) - 127;\n\t\tconst fraction = (uint32 & 0x7fffff) | 0x800000;\n\t\treturn (sign === 0 ? 1 : -1) * fraction * 2 ** (exp - 23);\n\t}\n\n\tunpack_double() {\n\t\tconst h32 = this.unpack_uint32();\n\t\tconst l32 = this.unpack_uint32();\n\t\tconst sign = h32 >> 31;\n\t\tconst exp = ((h32 >> 20) & 0x7ff) - 1023;\n\t\tconst hfrac = (h32 & 0xfffff) | 0x100000;\n\t\tconst frac = hfrac * 2 ** (exp - 20) + l32 * 2 ** (exp - 52);\n\t\treturn (sign === 0 ? 1 : -1) * frac;\n\t}\n\n\tread(length: number) {\n\t\tconst j = this.index;\n\t\tif (j + length <= this.length) {\n\t\t\treturn this.dataView.subarray(j, j + length);\n\t\t} else {\n\t\t\tthrow new Error(\"BinaryPackFailure: read index out of range\");\n\t\t}\n\t}\n}\n\nexport class Packer {\n\tprivate _bufferBuilder = new BufferBuilder();\n\tprivate _textEncoder = new TextEncoder();\n\n\tgetBuffer() {\n\t\treturn this._bufferBuilder.toArrayBuffer();\n\t}\n\n\tpack(value: Packable) {\n\t\tif (typeof value === \"string\") {\n\t\t\tthis.pack_string(value);\n\t\t} else if (typeof value === \"number\") {\n\t\t\tif (Math.floor(value) === value) {\n\t\t\t\tthis.pack_integer(value);\n\t\t\t} else {\n\t\t\t\tthis.pack_double(value);\n\t\t\t}\n\t\t} else if (typeof value === \"boolean\") {\n\t\t\tif (value === true) {\n\t\t\t\tthis._bufferBuilder.append(0xc3);\n\t\t\t} else if (value === false) {\n\t\t\t\tthis._bufferBuilder.append(0xc2);\n\t\t\t}\n\t\t} else if (value === undefined) {\n\t\t\tthis._bufferBuilder.append(0xc0);\n\t\t} else if (typeof value === \"object\") {\n\t\t\tif (value === null) {\n\t\t\t\tthis._bufferBuilder.append(0xc0);\n\t\t\t} else {\n\t\t\t\tconst constructor = value.constructor;\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\tthis.pack_array(value);\n\t\t\t\t} else if (value instanceof ArrayBuffer) {\n\t\t\t\t\tthis.pack_bin(new Uint8Array(value));\n\t\t\t\t} else if (\"BYTES_PER_ELEMENT\" in value) {\n\t\t\t\t\tconst v = value as unknown as DataView;\n\t\t\t\t\tthis.pack_bin(new Uint8Array(v.buffer, v.byteOffset, v.byteLength));\n\t\t\t\t} else if (value instanceof Date) {\n\t\t\t\t\tthis.pack_string(value.toString());\n\t\t\t\t} else if (\n\t\t\t\t\tconstructor == Object ||\n\t\t\t\t\tconstructor.toString().startsWith(\"class\")\n\t\t\t\t) {\n\t\t\t\t\tthis.pack_object(value);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Type \"${constructor.toString()}\" not yet supported`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`Type \"${typeof value}\" not yet supported`);\n\t\t}\n\t\tthis._bufferBuilder.flush();\n\t}\n\n\tpack_bin(blob: Uint8Array) {\n\t\tconst length = blob.length;\n\n\t\tif (length <= 0x0f) {\n\t\t\tthis.pack_uint8(0xa0 + length);\n\t\t} else if (length <= 0xffff) {\n\t\t\tthis._bufferBuilder.append(0xda);\n\t\t\tthis.pack_uint16(length);\n\t\t} else if (length <= 0xffffffff) {\n\t\t\tthis._bufferBuilder.append(0xdb);\n\t\t\tthis.pack_uint32(length);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid length\");\n\t\t}\n\t\tthis._bufferBuilder.append_buffer(blob);\n\t}\n\n\tpack_string(str: string) {\n\t\tconst encoded = this._textEncoder.encode(str);\n\t\tconst length = encoded.length;\n\n\t\tif (length <= 0x0f) {\n\t\t\tthis.pack_uint8(0xb0 + length);\n\t\t} else if (length <= 0xffff) {\n\t\t\tthis._bufferBuilder.append(0xd8);\n\t\t\tthis.pack_uint16(length);\n\t\t} else if (length <= 0xffffffff) {\n\t\t\tthis._bufferBuilder.append(0xd9);\n\t\t\tthis.pack_uint32(length);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid length\");\n\t\t}\n\t\tthis._bufferBuilder.append_buffer(encoded);\n\t}\n\n\tpack_array(ary: Packable[]) {\n\t\tconst length = ary.length;\n\t\tif (length <= 0x0f) {\n\t\t\tthis.pack_uint8(0x90 + length);\n\t\t} else if (length <= 0xffff) {\n\t\t\tthis._bufferBuilder.append(0xdc);\n\t\t\tthis.pack_uint16(length);\n\t\t} else if (length <= 0xffffffff) {\n\t\t\tthis._bufferBuilder.append(0xdd);\n\t\t\tthis.pack_uint32(length);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid length\");\n\t\t}\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tthis.pack(ary[i]);\n\t\t}\n\t}\n\n\tpack_integer(num: number) {\n\t\tif (num >= -0x20 && num <= 0x7f) {\n\t\t\tthis._bufferBuilder.append(num & 0xff);\n\t\t} else if (num >= 0x00 && num <= 0xff) {\n\t\t\tthis._bufferBuilder.append(0xcc);\n\t\t\tthis.pack_uint8(num);\n\t\t} else if (num >= -0x80 && num <= 0x7f) {\n\t\t\tthis._bufferBuilder.append(0xd0);\n\t\t\tthis.pack_int8(num);\n\t\t} else if (num >= 0x0000 && num <= 0xffff) {\n\t\t\tthis._bufferBuilder.append(0xcd);\n\t\t\tthis.pack_uint16(num);\n\t\t} else if (num >= -0x8000 && num <= 0x7fff) {\n\t\t\tthis._bufferBuilder.append(0xd1);\n\t\t\tthis.pack_int16(num);\n\t\t} else if (num >= 0x00000000 && num <= 0xffffffff) {\n\t\t\tthis._bufferBuilder.append(0xce);\n\t\t\tthis.pack_uint32(num);\n\t\t} else if (num >= -0x80000000 && num <= 0x7fffffff) {\n\t\t\tthis._bufferBuilder.append(0xd2);\n\t\t\tthis.pack_int32(num);\n\t\t} else if (num >= -0x8000000000000000 && num <= 0x7fffffffffffffff) {\n\t\t\tthis._bufferBuilder.append(0xd3);\n\t\t\tthis.pack_int64(num);\n\t\t} else if (num >= 0x0000000000000000 && num <= 0xffffffffffffffff) {\n\t\t\tthis._bufferBuilder.append(0xcf);\n\t\t\tthis.pack_uint64(num);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid integer\");\n\t\t}\n\t}\n\n\tpack_double(num: number) {\n\t\tlet sign = 0;\n\t\tif (num < 0) {\n\t\t\tsign = 1;\n\t\t\tnum = -num;\n\t\t}\n\t\tconst exp = Math.floor(Math.log(num) / Math.LN2);\n\t\tconst frac0 = num / 2 ** exp - 1;\n\t\tconst frac1 = Math.floor(frac0 * 2 ** 52);\n\t\tconst b32 = 2 ** 32;\n\t\tconst h32 =\n\t\t\t(sign << 31) | ((exp + 1023) << 20) | ((frac1 / b32) & 0x0fffff);\n\t\tconst l32 = frac1 % b32;\n\t\tthis._bufferBuilder.append(0xcb);\n\t\tthis.pack_int32(h32);\n\t\tthis.pack_int32(l32);\n\t}\n\n\tpack_object(obj: { [key: string]: Packable }) {\n\t\tconst keys = Object.keys(obj);\n\t\tconst length = keys.length;\n\t\tif (length <= 0x0f) {\n\t\t\tthis.pack_uint8(0x80 + length);\n\t\t} else if (length <= 0xffff) {\n\t\t\tthis._bufferBuilder.append(0xde);\n\t\t\tthis.pack_uint16(length);\n\t\t} else if (length <= 0xffffffff) {\n\t\t\tthis._bufferBuilder.append(0xdf);\n\t\t\tthis.pack_uint32(length);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid length\");\n\t\t}\n\t\tfor (const prop in obj) {\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\tthis.pack(prop);\n\t\t\t\tthis.pack(obj[prop]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpack_uint8(num: number) {\n\t\tthis._bufferBuilder.append(num);\n\t}\n\n\tpack_uint16(num: number) {\n\t\tthis._bufferBuilder.append(num >> 8);\n\t\tthis._bufferBuilder.append(num & 0xff);\n\t}\n\n\tpack_uint32(num: number) {\n\t\tconst n = num & 0xffffffff;\n\t\tthis._bufferBuilder.append((n & 0xff000000) >>> 24);\n\t\tthis._bufferBuilder.append((n & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((n & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(n & 0x000000ff);\n\t}\n\n\tpack_uint64(num: number) {\n\t\tconst high = num / 2 ** 32;\n\t\tconst low = num % 2 ** 32;\n\t\tthis._bufferBuilder.append((high & 0xff000000) >>> 24);\n\t\tthis._bufferBuilder.append((high & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((high & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(high & 0x000000ff);\n\t\tthis._bufferBuilder.append((low & 0xff000000) >>> 24);\n\t\tthis._bufferBuilder.append((low & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((low & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(low & 0x000000ff);\n\t}\n\n\tpack_int8(num: number) {\n\t\tthis._bufferBuilder.append(num & 0xff);\n\t}\n\n\tpack_int16(num: number) {\n\t\tthis._bufferBuilder.append((num & 0xff00) >> 8);\n\t\tthis._bufferBuilder.append(num & 0xff);\n\t}\n\n\tpack_int32(num: number) {\n\t\tthis._bufferBuilder.append((num >>> 24) & 0xff);\n\t\tthis._bufferBuilder.append((num & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((num & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(num & 0x000000ff);\n\t}\n\n\tpack_int64(num: number) {\n\t\tconst high = Math.floor(num / 2 ** 32);\n\t\tconst low = num % 2 ** 32;\n\t\tthis._bufferBuilder.append((high & 0xff000000) >>> 24);\n\t\tthis._bufferBuilder.append((high & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((high & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(high & 0x000000ff);\n\t\tthis._bufferBuilder.append((low & 0xff000000) >>> 24);\n\t\tthis._bufferBuilder.append((low & 0x00ff0000) >>> 16);\n\t\tthis._bufferBuilder.append((low & 0x0000ff00) >>> 8);\n\t\tthis._bufferBuilder.append(low & 0x000000ff);\n\t}\n}\n","class BufferBuilder {\n\tprivate _pieces: number[];\n\tprivate readonly _parts: ArrayBufferView[];\n\n\tconstructor() {\n\t\tthis._pieces = [];\n\t\tthis._parts = [];\n\t}\n\n\tappend_buffer(data: ArrayBufferView) {\n\t\tthis.flush();\n\t\tthis._parts.push(data);\n\t}\n\n\tappend(data: number) {\n\t\tthis._pieces.push(data);\n\t}\n\n\tflush() {\n\t\tif (this._pieces.length > 0) {\n\t\t\tconst buf = new Uint8Array(this._pieces);\n\t\t\tthis._parts.push(buf);\n\t\t\tthis._pieces = [];\n\t\t}\n\t}\n\n\tprivate encoder = new TextEncoder();\n\n\tpublic toArrayBuffer() {\n\t\tconst buffer = [];\n\t\tfor (const part of this._parts) {\n\t\t\tbuffer.push(part);\n\t\t}\n\t\treturn concatArrayBuffers(buffer).buffer;\n\t}\n}\n\nexport { BufferBuilder };\n\nfunction concatArrayBuffers(bufs: ArrayBufferView[]) {\n\tlet size = 0;\n\tfor (const buf of bufs) {\n\t\tsize += buf.byteLength;\n\t}\n\tconst result = new Uint8Array(size);\n\tlet offset = 0;\n\tfor (const buf of bufs) {\n\t\tconst view = new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n\t\tresult.set(view, offset);\n\t\toffset += buf.byteLength;\n\t}\n\treturn result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}