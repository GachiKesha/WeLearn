{"ast":null,"code":"// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError.mjs\";\nimport { getInt64, setInt64 } from \"./utils/int.mjs\";\nexport var EXT_TIMESTAMP = -1;\nvar TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nvar TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nexport function encodeTimeSpecToTimestamp(_a) {\n  var sec = _a.sec,\n    nsec = _a.nsec;\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      var rv = new Uint8Array(4);\n      var view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      var secHigh = sec / 0x100000000;\n      var secLow = sec & 0xffffffff;\n      var rv = new Uint8Array(8);\n      var view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, nsec << 2 | secHigh & 0x3);\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    var rv = new Uint8Array(12);\n    var view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\nexport function encodeDateToTimeSpec(date) {\n  var msec = date.getTime();\n  var sec = Math.floor(msec / 1e3);\n  var nsec = (msec - sec * 1e3) * 1e6;\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  var nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9\n  };\n}\nexport function encodeTimestampExtension(object) {\n  if (object instanceof Date) {\n    var timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\nexport function decodeTimestampToTimeSpec(data) {\n  var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4:\n      {\n        // timestamp 32 = { sec32 }\n        var sec = view.getUint32(0);\n        var nsec = 0;\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n    case 8:\n      {\n        // timestamp 64 = { nsec30, sec34 }\n        var nsec30AndSecHigh2 = view.getUint32(0);\n        var secLow32 = view.getUint32(4);\n        var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n        var nsec = nsec30AndSecHigh2 >>> 2;\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n    case 12:\n      {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        var sec = getInt64(view, 4);\n        var nsec = view.getUint32(0);\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n    default:\n      throw new DecodeError(\"Unrecognized data size for timestamp (expected 4, 8, or 12): \".concat(data.length));\n  }\n}\nexport function decodeTimestampExtension(data) {\n  var timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexport var timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension\n};","map":{"version":3,"names":["DecodeError","getInt64","setInt64","EXT_TIMESTAMP","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","_a","sec","nsec","rv","Uint8Array","view","DataView","buffer","setUint32","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","Math","floor","nsecInSec","encodeTimestampExtension","object","Date","timeSpec","decodeTimestampToTimeSpec","data","byteOffset","byteLength","getUint32","nsec30AndSecHigh2","secLow32","concat","length","decodeTimestampExtension","timestampExtension","type","encode","decode"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\timestamp.ts"],"sourcesContent":["// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}