{"ast":null,"code":"// utility for whatwg streams\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __await = this && this.__await || function (v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = this && this.__asyncGenerator || function (thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n};\nexport function isAsyncIterable(object) {\n  return object[Symbol.asyncIterator] != null;\n}\nfunction assertNonNull(value) {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\nexport function asyncIterableFromStream(stream) {\n  return __asyncGenerator(this, arguments, function asyncIterableFromStream_1() {\n    var reader, _a, done, value;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          reader = stream.getReader();\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1,, 9, 10]);\n          _b.label = 2;\n        case 2:\n          if (!true) return [3 /*break*/, 8];\n          return [4 /*yield*/, __await(reader.read())];\n        case 3:\n          _a = _b.sent(), done = _a.done, value = _a.value;\n          if (!done) return [3 /*break*/, 5];\n          return [4 /*yield*/, __await(void 0)];\n        case 4:\n          return [2 /*return*/, _b.sent()];\n        case 5:\n          assertNonNull(value);\n          return [4 /*yield*/, __await(value)];\n        case 6:\n          return [4 /*yield*/, _b.sent()];\n        case 7:\n          _b.sent();\n          return [3 /*break*/, 2];\n        case 8:\n          return [3 /*break*/, 10];\n        case 9:\n          reader.releaseLock();\n          return [7 /*endfinally*/];\n        case 10:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nexport function ensureAsyncIterable(streamLike) {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}","map":{"version":3,"names":["isAsyncIterable","object","Symbol","asyncIterator","assertNonNull","value","Error","asyncIterableFromStream","stream","reader","getReader","__await","read","_a","_b","sent","done","releaseLock","ensureAsyncIterable","streamLike"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\utils\\stream.ts"],"sourcesContent":["// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,OAAM,SAAUA,eAAeA,CAAIC,MAA6B;EAC9D,OAAQA,MAAc,CAACC,MAAM,CAACC,aAAa,CAAC,IAAI,IAAI;AACtD;AAEA,SAASC,aAAaA,CAAIC,KAA2B;EACnD,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;;AAE9E;AAEA,OAAM,SAAiBC,uBAAuBA,CAAIC,MAAyB;;;;;;UACnEC,MAAM,GAAGD,MAAM,CAACE,SAAS,EAAE;;;;;;eAGxB,IAAI;UACe,qBAAAC,OAAA,CAAMF,MAAM,CAACG,IAAI,EAAE;;UAArCC,EAAA,GAAkBC,EAAA,CAAAC,IAAA,EAAmB,EAAnCC,IAAI,GAAAH,EAAA,CAAAG,IAAA,EAAEX,KAAK,GAAAQ,EAAA,CAAAR,KAAA;eACfW,IAAI,EAAJ;;;UACF,sBAAAF,EAAA,CAAAC,IAAA;;UAEFX,aAAa,CAACC,KAAK,CAAC;uCACdA,KAAK;;UAAX,qBAAAS,EAAA,CAAAC,IAAA;;UAAAD,EAAA,CAAAC,IAAA,EAAW;;;;;UAGbN,MAAM,CAACQ,WAAW,EAAE;;;;;;;;;AAIxB,OAAM,SAAUC,mBAAmBA,CAAIC,UAAiC;EACtE,IAAInB,eAAe,CAACmB,UAAU,CAAC,EAAE;IAC/B,OAAOA,UAAU;GAClB,MAAM;IACL,OAAOZ,uBAAuB,CAACY,UAAU,CAAC;;AAE9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}