{"ast":null,"code":"import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */function () {\n  function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n    if (extensionCodec === void 0) {\n      extensionCodec = ExtensionCodec.defaultCodec;\n    }\n    if (context === void 0) {\n      context = undefined;\n    }\n    if (maxDepth === void 0) {\n      maxDepth = DEFAULT_MAX_DEPTH;\n    }\n    if (initialBufferSize === void 0) {\n      initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE;\n    }\n    if (sortKeys === void 0) {\n      sortKeys = false;\n    }\n    if (forceFloat32 === void 0) {\n      forceFloat32 = false;\n    }\n    if (ignoreUndefined === void 0) {\n      ignoreUndefined = false;\n    }\n    if (forceIntegerToFloat === void 0) {\n      forceIntegerToFloat = false;\n    }\n    this.extensionCodec = extensionCodec;\n    this.context = context;\n    this.maxDepth = maxDepth;\n    this.initialBufferSize = initialBufferSize;\n    this.sortKeys = sortKeys;\n    this.forceFloat32 = forceFloat32;\n    this.ignoreUndefined = ignoreUndefined;\n    this.forceIntegerToFloat = forceIntegerToFloat;\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n  Encoder.prototype.reinitializeState = function () {\n    this.pos = 0;\n  };\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  Encoder.prototype.encodeSharedRef = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  };\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  Encoder.prototype.encode = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  };\n  Encoder.prototype.doEncode = function (object, depth) {\n    if (depth > this.maxDepth) {\n      throw new Error(\"Too deep objects in depth \".concat(depth));\n    }\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  };\n  Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n    var requiredSize = this.pos + sizeToWrite;\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  };\n  Encoder.prototype.resizeBuffer = function (newSize) {\n    var newBuffer = new ArrayBuffer(newSize);\n    var newBytes = new Uint8Array(newBuffer);\n    var newView = new DataView(newBuffer);\n    newBytes.set(this.bytes);\n    this.view = newView;\n    this.bytes = newBytes;\n  };\n  Encoder.prototype.encodeNil = function () {\n    this.writeU8(0xc0);\n  };\n  Encoder.prototype.encodeBoolean = function (object) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  };\n  Encoder.prototype.encodeNumber = function (object) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | object + 0x20);\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  };\n  Encoder.prototype.writeStringHeader = function (byteLength) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n    }\n  };\n  Encoder.prototype.encodeString = function (object) {\n    var maxHeaderSize = 1 + 4;\n    var strLength = object.length;\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  };\n  Encoder.prototype.encodeObject = function (object, depth) {\n    // try to encode objects with custom codec first of non-primitives\n    var ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n    }\n  };\n  Encoder.prototype.encodeBinary = function (object) {\n    var size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large binary: \".concat(size));\n    }\n    var bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  };\n  Encoder.prototype.encodeArray = function (object, depth) {\n    var size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large array: \".concat(size));\n    }\n    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n      var item = object_1[_i];\n      this.doEncode(item, depth + 1);\n    }\n  };\n  Encoder.prototype.countWithoutUndefined = function (object, keys) {\n    var count = 0;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n    return count;\n  };\n  Encoder.prototype.encodeMap = function (object, depth) {\n    var keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n    var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large map object: \".concat(size));\n    }\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n      var value = object[key];\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  };\n  Encoder.prototype.encodeExtension = function (ext) {\n    var size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large extension object: \".concat(size));\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  };\n  Encoder.prototype.writeU8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  };\n  Encoder.prototype.writeU8a = function (values) {\n    var size = values.length;\n    this.ensureBufferSizeToWrite(size);\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  };\n  Encoder.prototype.writeI8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  };\n  Encoder.prototype.writeU16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  };\n  Encoder.prototype.writeI16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  };\n  Encoder.prototype.writeU32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeI32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeF32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeF64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeU64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeI64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n  return Encoder;\n}();\nexport { Encoder };","map":{"version":3,"names":["utf8EncodeJs","utf8Count","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","ExtensionCodec","setInt64","setUint64","ensureUint8Array","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","Encoder","extensionCodec","context","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","defaultCodec","undefined","pos","view","DataView","ArrayBuffer","bytes","Uint8Array","buffer","prototype","reinitializeState","encodeSharedRef","object","doEncode","subarray","encode","slice","depth","Error","concat","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","byteLength","resizeBuffer","newSize","newBuffer","newBytes","newView","set","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","maxHeaderSize","strLength","length","ext","tryToEncode","encodeExtension","Array","isArray","encodeArray","isView","encodeBinary","encodeMap","Object","toString","apply","size","writeU8a","_i","object_1","item","countWithoutUndefined","keys","count","keys_1","key","sort","keys_2","value","data","type","setUint8","values","setInt8","setUint16","setInt16","setUint32","setInt32","setFloat32","setFloat64"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\Encoder.ts"],"sourcesContent":["import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}