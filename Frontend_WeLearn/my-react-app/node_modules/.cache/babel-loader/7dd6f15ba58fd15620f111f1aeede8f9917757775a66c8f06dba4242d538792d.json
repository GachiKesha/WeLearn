{"ast":null,"code":"import { pack as $gCcbY$pack, unpack as $gCcbY$unpack } from \"peerjs-js-binarypack\";\nimport $gCcbY$webrtcadapter from \"webrtc-adapter\";\nimport { Encoder as $gCcbY$Encoder, Decoder as $gCcbY$Decoder } from \"cbor-x\";\nimport { Encoder as $gCcbY$Encoder1, decodeMultiStream as $gCcbY$decodeMultiStream } from \"@msgpack/msgpack\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nclass $fcbcc7538a6776d5$export$f1c5f4c9cb95390b {\n  constructor() {\n    this.chunkedMTU = 16300 // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n    ;\n    // Binary stuff\n    this._dataCount = 1;\n    this.chunk = blob => {\n      const chunks = [];\n      const size = blob.byteLength;\n      const total = Math.ceil(size / this.chunkedMTU);\n      let index = 0;\n      let start = 0;\n      while (start < size) {\n        const end = Math.min(size, start + this.chunkedMTU);\n        const b = blob.slice(start, end);\n        const chunk = {\n          __peerData: this._dataCount,\n          n: index,\n          data: b,\n          total: total\n        };\n        chunks.push(chunk);\n        start = end;\n        index++;\n      }\n      this._dataCount++;\n      return chunks;\n    };\n  }\n}\nfunction $fcbcc7538a6776d5$export$52c89ebcdc4f53f2(bufs) {\n  let size = 0;\n  for (const buf of bufs) size += buf.byteLength;\n  const result = new Uint8Array(size);\n  let offset = 0;\n  for (const buf of bufs) {\n    result.set(buf, offset);\n    offset += buf.byteLength;\n  }\n  return result;\n}\nconst $fb63e766cfafaab9$var$webRTCAdapter =\n//@ts-ignore\n(0, $gCcbY$webrtcadapter).default || (0, $gCcbY$webrtcadapter);\nconst $fb63e766cfafaab9$export$25be9502477c137d = new class {\n  isWebRTCSupported() {\n    return typeof RTCPeerConnection !== \"undefined\";\n  }\n  isBrowserSupported() {\n    const browser = this.getBrowser();\n    const version = this.getVersion();\n    const validBrowser = this.supportedBrowsers.includes(browser);\n    if (!validBrowser) return false;\n    if (browser === \"chrome\") return version >= this.minChromeVersion;\n    if (browser === \"firefox\") return version >= this.minFirefoxVersion;\n    if (browser === \"safari\") return !this.isIOS && version >= this.minSafariVersion;\n    return false;\n  }\n  getBrowser() {\n    return $fb63e766cfafaab9$var$webRTCAdapter.browserDetails.browser;\n  }\n  getVersion() {\n    return $fb63e766cfafaab9$var$webRTCAdapter.browserDetails.version || 0;\n  }\n  isUnifiedPlanSupported() {\n    const browser = this.getBrowser();\n    const version = $fb63e766cfafaab9$var$webRTCAdapter.browserDetails.version || 0;\n    if (browser === \"chrome\" && version < this.minChromeVersion) return false;\n    if (browser === \"firefox\" && version >= this.minFirefoxVersion) return true;\n    if (!window.RTCRtpTransceiver || !(\"currentDirection\" in RTCRtpTransceiver.prototype)) return false;\n    let tempPc;\n    let supported = false;\n    try {\n      tempPc = new RTCPeerConnection();\n      tempPc.addTransceiver(\"audio\");\n      supported = true;\n    } catch (e) {} finally {\n      if (tempPc) tempPc.close();\n    }\n    return supported;\n  }\n  toString() {\n    return `Supports:\n    browser:${this.getBrowser()}\n    version:${this.getVersion()}\n    isIOS:${this.isIOS}\n    isWebRTCSupported:${this.isWebRTCSupported()}\n    isBrowserSupported:${this.isBrowserSupported()}\n    isUnifiedPlanSupported:${this.isUnifiedPlanSupported()}`;\n  }\n  constructor() {\n    this.isIOS = [\"iPad\", \"iPhone\", \"iPod\"].includes(navigator.platform);\n    this.supportedBrowsers = [\"firefox\", \"chrome\", \"safari\"];\n    this.minFirefoxVersion = 59;\n    this.minChromeVersion = 72;\n    this.minSafariVersion = 605;\n  }\n}();\nconst $9a84a32bf0bf36bb$export$f35f128fd59ea256 = id => {\n  // Allow empty ids\n  return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);\n};\nconst $0e5fd1585784c252$export$4e61f672936bec77 = () => Math.random().toString(36).slice(2);\nconst $4f4134156c446392$var$DEFAULT_CONFIG = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:19302\"\n  }, {\n    urls: [\"turn:eu-0.turn.peerjs.com:3478\", \"turn:us-0.turn.peerjs.com:3478\"],\n    username: \"peerjs\",\n    credential: \"peerjsp\"\n  }],\n  sdpSemantics: \"unified-plan\"\n};\nclass $4f4134156c446392$export$f8f26dd395d7e1bd extends (0, $fcbcc7538a6776d5$export$f1c5f4c9cb95390b) {\n  noop() {}\n  blobToArrayBuffer(blob, cb) {\n    const fr = new FileReader();\n    fr.onload = function (evt) {\n      if (evt.target) cb(evt.target.result);\n    };\n    fr.readAsArrayBuffer(blob);\n    return fr;\n  }\n  binaryStringToArrayBuffer(binary) {\n    const byteArray = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) byteArray[i] = binary.charCodeAt(i) & 0xff;\n    return byteArray.buffer;\n  }\n  isSecure() {\n    return location.protocol === \"https:\";\n  }\n  constructor(...args) {\n    super(...args);\n    this.CLOUD_HOST = \"0.peerjs.com\";\n    this.CLOUD_PORT = 443;\n    // Browsers that need chunking:\n    this.chunkedBrowsers = {\n      Chrome: 1,\n      chrome: 1\n    };\n    // Returns browser-agnostic default config\n    this.defaultConfig = $4f4134156c446392$var$DEFAULT_CONFIG;\n    this.browser = (0, $fb63e766cfafaab9$export$25be9502477c137d).getBrowser();\n    this.browserVersion = (0, $fb63e766cfafaab9$export$25be9502477c137d).getVersion();\n    this.pack = $gCcbY$pack;\n    this.unpack = $gCcbY$unpack;\n    /**\n    * A hash of WebRTC features mapped to booleans that correspond to whether the feature is supported by the current browser.\n    *\n    * :::caution\n    * Only the properties documented here are guaranteed to be present on `util.supports`\n    * :::\n    */\n    this.supports = function () {\n      const supported = {\n        browser: (0, $fb63e766cfafaab9$export$25be9502477c137d).isBrowserSupported(),\n        webRTC: (0, $fb63e766cfafaab9$export$25be9502477c137d).isWebRTCSupported(),\n        audioVideo: false,\n        data: false,\n        binaryBlob: false,\n        reliable: false\n      };\n      if (!supported.webRTC) return supported;\n      let pc;\n      try {\n        pc = new RTCPeerConnection($4f4134156c446392$var$DEFAULT_CONFIG);\n        supported.audioVideo = true;\n        let dc;\n        try {\n          dc = pc.createDataChannel(\"_PEERJSTEST\", {\n            ordered: true\n          });\n          supported.data = true;\n          supported.reliable = !!dc.ordered;\n          // Binary test\n          try {\n            dc.binaryType = \"blob\";\n            supported.binaryBlob = !(0, $fb63e766cfafaab9$export$25be9502477c137d).isIOS;\n          } catch (e) {}\n        } catch (e) {} finally {\n          if (dc) dc.close();\n        }\n      } catch (e) {} finally {\n        if (pc) pc.close();\n      }\n      return supported;\n    }();\n    // Ensure alphanumeric ids\n    this.validateId = (0, $9a84a32bf0bf36bb$export$f35f128fd59ea256);\n    this.randomToken = (0, $0e5fd1585784c252$export$4e61f672936bec77);\n  }\n}\nconst $4f4134156c446392$export$7debb50ef11d5e0b = new $4f4134156c446392$export$f8f26dd395d7e1bd();\nconst $257947e92926277a$var$LOG_PREFIX = \"PeerJS: \";\nvar $257947e92926277a$export$243e62d78d3b544d;\n(function (LogLevel) {\n  LogLevel[LogLevel[\n  /**\n  * Prints no logs.\n  */\n  \"Disabled\"] = 0] = \"Disabled\";\n  LogLevel[LogLevel[\n  /**\n  * Prints only errors.\n  */\n  \"Errors\"] = 1] = \"Errors\";\n  LogLevel[LogLevel[\n  /**\n  * Prints errors and warnings.\n  */\n  \"Warnings\"] = 2] = \"Warnings\";\n  LogLevel[LogLevel[\n  /**\n  * Prints all logs.\n  */\n  \"All\"] = 3] = \"All\";\n})($257947e92926277a$export$243e62d78d3b544d || ($257947e92926277a$export$243e62d78d3b544d = {}));\nclass $257947e92926277a$var$Logger {\n  get logLevel() {\n    return this._logLevel;\n  }\n  set logLevel(logLevel) {\n    this._logLevel = logLevel;\n  }\n  log(...args) {\n    if (this._logLevel >= $257947e92926277a$export$243e62d78d3b544d.All) this._print($257947e92926277a$export$243e62d78d3b544d.All, ...args);\n  }\n  warn(...args) {\n    if (this._logLevel >= $257947e92926277a$export$243e62d78d3b544d.Warnings) this._print($257947e92926277a$export$243e62d78d3b544d.Warnings, ...args);\n  }\n  error(...args) {\n    if (this._logLevel >= $257947e92926277a$export$243e62d78d3b544d.Errors) this._print($257947e92926277a$export$243e62d78d3b544d.Errors, ...args);\n  }\n  setLogFunction(fn) {\n    this._print = fn;\n  }\n  _print(logLevel, ...rest) {\n    const copy = [$257947e92926277a$var$LOG_PREFIX, ...rest];\n    for (const i in copy) if (copy[i] instanceof Error) copy[i] = \"(\" + copy[i].name + \") \" + copy[i].message;\n    if (logLevel >= $257947e92926277a$export$243e62d78d3b544d.All) console.log(...copy);else if (logLevel >= $257947e92926277a$export$243e62d78d3b544d.Warnings) console.warn(\"WARNING\", ...copy);else if (logLevel >= $257947e92926277a$export$243e62d78d3b544d.Errors) console.error(\"ERROR\", ...copy);\n  }\n  constructor() {\n    this._logLevel = $257947e92926277a$export$243e62d78d3b544d.Disabled;\n  }\n}\nvar $257947e92926277a$export$2e2bcd8739ae039 = new $257947e92926277a$var$Logger();\nvar $c4dcfd1d1ea86647$exports = {};\n\"use strict\";\nvar $c4dcfd1d1ea86647$var$has = Object.prototype.hasOwnProperty,\n  $c4dcfd1d1ea86647$var$prefix = \"~\";\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction $c4dcfd1d1ea86647$var$Events() {}\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  $c4dcfd1d1ea86647$var$Events.prototype = Object.create(null);\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new $c4dcfd1d1ea86647$var$Events().__proto__) $c4dcfd1d1ea86647$var$prefix = false;\n}\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction $c4dcfd1d1ea86647$var$EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction $c4dcfd1d1ea86647$var$addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== \"function\") throw new TypeError(\"The listener must be a function\");\n  var listener = new $c4dcfd1d1ea86647$var$EE(fn, context || emitter, once),\n    evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event;\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];\n  return emitter;\n}\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction $c4dcfd1d1ea86647$var$clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new $c4dcfd1d1ea86647$var$Events();else delete emitter._events[evt];\n}\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction $c4dcfd1d1ea86647$var$EventEmitter() {\n  this._events = new $c4dcfd1d1ea86647$var$Events();\n  this._eventsCount = 0;\n}\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.eventNames = function eventNames() {\n  var names = [],\n    events,\n    name;\n  if (this._eventsCount === 0) return names;\n  for (name in events = this._events) if ($c4dcfd1d1ea86647$var$has.call(events, name)) names.push($c4dcfd1d1ea86647$var$prefix ? name.slice(1) : name);\n  if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));\n  return names;\n};\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.listeners = function listeners(event) {\n  var evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event,\n    handlers = this._events[evt];\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) ee[i] = handlers[i].fn;\n  return ee;\n};\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event,\n    listeners = this._events[evt];\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event;\n  if (!this._events[evt]) return false;\n  var listeners = this._events[evt],\n    len = arguments.length,\n    args,\n    i;\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n    switch (len) {\n      case 1:\n        return listeners.fn.call(listeners.context), true;\n      case 2:\n        return listeners.fn.call(listeners.context, a1), true;\n      case 3:\n        return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4:\n        return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5:\n        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6:\n        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n    for (i = 1, args = new Array(len - 1); i < len; i++) args[i - 1] = arguments[i];\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length,\n      j;\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n      switch (len) {\n        case 1:\n          listeners[i].fn.call(listeners[i].context);\n          break;\n        case 2:\n          listeners[i].fn.call(listeners[i].context, a1);\n          break;\n        case 3:\n          listeners[i].fn.call(listeners[i].context, a1, a2);\n          break;\n        case 4:\n          listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n          break;\n        default:\n          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) args[j - 1] = arguments[j];\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n  return true;\n};\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.on = function on(event, fn, context) {\n  return $c4dcfd1d1ea86647$var$addListener(this, event, fn, context, false);\n};\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.once = function once(event, fn, context) {\n  return $c4dcfd1d1ea86647$var$addListener(this, event, fn, context, true);\n};\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event;\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    $c4dcfd1d1ea86647$var$clearEvent(this, evt);\n    return this;\n  }\n  var listeners = this._events[evt];\n  if (listeners.fn) {\n    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) $c4dcfd1d1ea86647$var$clearEvent(this, evt);\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else $c4dcfd1d1ea86647$var$clearEvent(this, evt);\n  }\n  return this;\n};\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n  if (event) {\n    evt = $c4dcfd1d1ea86647$var$prefix ? $c4dcfd1d1ea86647$var$prefix + event : event;\n    if (this._events[evt]) $c4dcfd1d1ea86647$var$clearEvent(this, evt);\n  } else {\n    this._events = new $c4dcfd1d1ea86647$var$Events();\n    this._eventsCount = 0;\n  }\n  return this;\n};\n//\n// Alias methods names because people roll like that.\n//\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.off = $c4dcfd1d1ea86647$var$EventEmitter.prototype.removeListener;\n$c4dcfd1d1ea86647$var$EventEmitter.prototype.addListener = $c4dcfd1d1ea86647$var$EventEmitter.prototype.on;\n//\n// Expose the prefix.\n//\n$c4dcfd1d1ea86647$var$EventEmitter.prefixed = $c4dcfd1d1ea86647$var$prefix;\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\n$c4dcfd1d1ea86647$var$EventEmitter.EventEmitter = $c4dcfd1d1ea86647$var$EventEmitter;\n$c4dcfd1d1ea86647$exports = $c4dcfd1d1ea86647$var$EventEmitter;\nvar $78455e22dea96b8c$exports = {};\n$parcel$export($78455e22dea96b8c$exports, \"ConnectionType\", () => $78455e22dea96b8c$export$3157d57b4135e3bc);\n$parcel$export($78455e22dea96b8c$exports, \"PeerErrorType\", () => $78455e22dea96b8c$export$9547aaa2e39030ff);\n$parcel$export($78455e22dea96b8c$exports, \"BaseConnectionErrorType\", () => $78455e22dea96b8c$export$7974935686149686);\n$parcel$export($78455e22dea96b8c$exports, \"DataConnectionErrorType\", () => $78455e22dea96b8c$export$49ae800c114df41d);\n$parcel$export($78455e22dea96b8c$exports, \"SerializationType\", () => $78455e22dea96b8c$export$89f507cf986a947);\n$parcel$export($78455e22dea96b8c$exports, \"SocketEventType\", () => $78455e22dea96b8c$export$3b5c4a4b6354f023);\n$parcel$export($78455e22dea96b8c$exports, \"ServerMessageType\", () => $78455e22dea96b8c$export$adb4a1754da6f10d);\nvar $78455e22dea96b8c$export$3157d57b4135e3bc;\n(function (ConnectionType) {\n  ConnectionType[\"Data\"] = \"data\";\n  ConnectionType[\"Media\"] = \"media\";\n})($78455e22dea96b8c$export$3157d57b4135e3bc || ($78455e22dea96b8c$export$3157d57b4135e3bc = {}));\nvar $78455e22dea96b8c$export$9547aaa2e39030ff;\n(function (PeerErrorType) {\n  PeerErrorType[\n  /**\n  * The client's browser does not support some or all WebRTC features that you are trying to use.\n  */\n  \"BrowserIncompatible\"] = \"browser-incompatible\";\n  PeerErrorType[\n  /**\n  * You've already disconnected this peer from the server and can no longer make any new connections on it.\n  */\n  \"Disconnected\"] = \"disconnected\";\n  PeerErrorType[\n  /**\n  * The ID passed into the Peer constructor contains illegal characters.\n  */\n  \"InvalidID\"] = \"invalid-id\";\n  PeerErrorType[\n  /**\n  * The API key passed into the Peer constructor contains illegal characters or is not in the system (cloud server only).\n  */\n  \"InvalidKey\"] = \"invalid-key\";\n  PeerErrorType[\n  /**\n  * Lost or cannot establish a connection to the signalling server.\n  */\n  \"Network\"] = \"network\";\n  PeerErrorType[\n  /**\n  * The peer you're trying to connect to does not exist.\n  */\n  \"PeerUnavailable\"] = \"peer-unavailable\";\n  PeerErrorType[\n  /**\n  * PeerJS is being used securely, but the cloud server does not support SSL. Use a custom PeerServer.\n  */\n  \"SslUnavailable\"] = \"ssl-unavailable\";\n  PeerErrorType[\n  /**\n  * Unable to reach the server.\n  */\n  \"ServerError\"] = \"server-error\";\n  PeerErrorType[\n  /**\n  * An error from the underlying socket.\n  */\n  \"SocketError\"] = \"socket-error\";\n  PeerErrorType[\n  /**\n  * The underlying socket closed unexpectedly.\n  */\n  \"SocketClosed\"] = \"socket-closed\";\n  PeerErrorType[\n  /**\n  * The ID passed into the Peer constructor is already taken.\n  *\n  * :::caution\n  * This error is not fatal if your peer has open peer-to-peer connections.\n  * This can happen if you attempt to {@apilink Peer.reconnect} a peer that has been disconnected from the server,\n  * but its old ID has now been taken.\n  * :::\n  */\n  \"UnavailableID\"] = \"unavailable-id\";\n  PeerErrorType[\n  /**\n  * Native WebRTC errors.\n  */\n  \"WebRTC\"] = \"webrtc\";\n})($78455e22dea96b8c$export$9547aaa2e39030ff || ($78455e22dea96b8c$export$9547aaa2e39030ff = {}));\nvar $78455e22dea96b8c$export$7974935686149686;\n(function (BaseConnectionErrorType) {\n  BaseConnectionErrorType[\"NegotiationFailed\"] = \"negotiation-failed\";\n  BaseConnectionErrorType[\"ConnectionClosed\"] = \"connection-closed\";\n})($78455e22dea96b8c$export$7974935686149686 || ($78455e22dea96b8c$export$7974935686149686 = {}));\nvar $78455e22dea96b8c$export$49ae800c114df41d;\n(function (DataConnectionErrorType) {\n  DataConnectionErrorType[\"NotOpenYet\"] = \"not-open-yet\";\n  DataConnectionErrorType[\"MessageToBig\"] = \"message-too-big\";\n})($78455e22dea96b8c$export$49ae800c114df41d || ($78455e22dea96b8c$export$49ae800c114df41d = {}));\nvar $78455e22dea96b8c$export$89f507cf986a947;\n(function (SerializationType) {\n  SerializationType[\"Binary\"] = \"binary\";\n  SerializationType[\"BinaryUTF8\"] = \"binary-utf8\";\n  SerializationType[\"JSON\"] = \"json\";\n  SerializationType[\"None\"] = \"raw\";\n})($78455e22dea96b8c$export$89f507cf986a947 || ($78455e22dea96b8c$export$89f507cf986a947 = {}));\nvar $78455e22dea96b8c$export$3b5c4a4b6354f023;\n(function (SocketEventType) {\n  SocketEventType[\"Message\"] = \"message\";\n  SocketEventType[\"Disconnected\"] = \"disconnected\";\n  SocketEventType[\"Error\"] = \"error\";\n  SocketEventType[\"Close\"] = \"close\";\n})($78455e22dea96b8c$export$3b5c4a4b6354f023 || ($78455e22dea96b8c$export$3b5c4a4b6354f023 = {}));\nvar $78455e22dea96b8c$export$adb4a1754da6f10d;\n(function (ServerMessageType) {\n  ServerMessageType[\"Heartbeat\"] = \"HEARTBEAT\";\n  ServerMessageType[\"Candidate\"] = \"CANDIDATE\";\n  ServerMessageType[\"Offer\"] = \"OFFER\";\n  ServerMessageType[\"Answer\"] = \"ANSWER\";\n  ServerMessageType[\"Open\"] = \"OPEN\";\n  ServerMessageType[\"Error\"] = \"ERROR\";\n  ServerMessageType[\"IdTaken\"] = \"ID-TAKEN\";\n  ServerMessageType[\"InvalidKey\"] = \"INVALID-KEY\";\n  ServerMessageType[\"Leave\"] = \"LEAVE\";\n  ServerMessageType[\"Expire\"] = \"EXPIRE\";\n})($78455e22dea96b8c$export$adb4a1754da6f10d || ($78455e22dea96b8c$export$adb4a1754da6f10d = {}));\nvar $f5f881ec4575f1fc$exports = {};\n$f5f881ec4575f1fc$exports = JSON.parse('{\"name\":\"peerjs\",\"version\":\"1.5.1\",\"keywords\":[\"peerjs\",\"webrtc\",\"p2p\",\"rtc\"],\"description\":\"PeerJS client\",\"homepage\":\"https://peerjs.com\",\"bugs\":{\"url\":\"https://github.com/peers/peerjs/issues\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/peers/peerjs\"},\"license\":\"MIT\",\"contributors\":[\"Michelle Bu <michelle@michellebu.com>\",\"afrokick <devbyru@gmail.com>\",\"ericz <really.ez@gmail.com>\",\"Jairo <kidandcat@gmail.com>\",\"Jonas Gloning <34194370+jonasgloning@users.noreply.github.com>\",\"Jairo Caro-Accino Viciana <jairo@galax.be>\",\"Carlos Caballero <carlos.caballero.gonzalez@gmail.com>\",\"hc <hheennrryy@gmail.com>\",\"Muhammad Asif <capripio@gmail.com>\",\"PrashoonB <prashoonbhattacharjee@gmail.com>\",\"Harsh Bardhan Mishra <47351025+HarshCasper@users.noreply.github.com>\",\"akotynski <aleksanderkotbury@gmail.com>\",\"lmb <i@lmb.io>\",\"Jairooo <jairocaro@msn.com>\",\"Moritz St\\xfcckler <moritz.stueckler@gmail.com>\",\"Simon <crydotsnakegithub@gmail.com>\",\"Denis Lukov <denismassters@gmail.com>\",\"Philipp Hancke <fippo@andyet.net>\",\"Hans Oksendahl <hansoksendahl@gmail.com>\",\"Jess <jessachandler@gmail.com>\",\"khankuan <khankuan@gmail.com>\",\"DUODVK <kurmanov.work@gmail.com>\",\"XiZhao <kwang1imsa@gmail.com>\",\"Matthias Lohr <matthias@lohr.me>\",\"=frank tree <=frnktrb@googlemail.com>\",\"Andre Eckardt <aeckardt@outlook.com>\",\"Chris Cowan <agentme49@gmail.com>\",\"Alex Chuev <alex@chuev.com>\",\"alxnull <alxnull@e.mail.de>\",\"Yemel Jardi <angel.jardi@gmail.com>\",\"Ben Parnell <benjaminparnell.94@gmail.com>\",\"Benny Lichtner <bennlich@gmail.com>\",\"fresheneesz <bitetrudpublic@gmail.com>\",\"bob.barstead@exaptive.com <bob.barstead@exaptive.com>\",\"chandika <chandika@gmail.com>\",\"emersion <contact@emersion.fr>\",\"Christopher Van <cvan@users.noreply.github.com>\",\"eddieherm <edhermoso@gmail.com>\",\"Eduardo Pinho <enet4mikeenet@gmail.com>\",\"Evandro Zanatta <ezanatta@tray.net.br>\",\"Gardner Bickford <gardner@users.noreply.github.com>\",\"Gian Luca <gianluca.cecchi@cynny.com>\",\"PatrickJS <github@gdi2290.com>\",\"jonnyf <github@jonathanfoss.co.uk>\",\"Hizkia Felix <hizkifw@gmail.com>\",\"Hristo Oskov <hristo.oskov@gmail.com>\",\"Isaac Madwed <i.madwed@gmail.com>\",\"Ilya Konanykhin <ilya.konanykhin@gmail.com>\",\"jasonbarry <jasbarry@me.com>\",\"Jonathan Burke <jonathan.burke.1311@googlemail.com>\",\"Josh Hamit <josh.hamit@gmail.com>\",\"Jordan Austin <jrax86@gmail.com>\",\"Joel Wetzell <jwetzell@yahoo.com>\",\"xizhao <kevin.wang@cloudera.com>\",\"Alberto Torres <kungfoobar@gmail.com>\",\"Jonathan Mayol <mayoljonathan@gmail.com>\",\"Jefferson Felix <me@jsfelix.dev>\",\"Rolf Erik Lekang <me@rolflekang.com>\",\"Kevin Mai-Husan Chia <mhchia@users.noreply.github.com>\",\"Pepijn de Vos <pepijndevos@gmail.com>\",\"JooYoung <qkdlql@naver.com>\",\"Tobias Speicher <rootcommander@gmail.com>\",\"Steve Blaurock <sblaurock@gmail.com>\",\"Kyrylo Shegeda <shegeda@ualberta.ca>\",\"Diwank Singh Tomer <singh@diwank.name>\",\"Sören Balko <Soeren.Balko@gmail.com>\",\"Arpit Solanki <solankiarpit1997@gmail.com>\",\"Yuki Ito <yuki@gnnk.net>\",\"Artur Zayats <zag2art@gmail.com>\"],\"funding\":{\"type\":\"opencollective\",\"url\":\"https://opencollective.com/peer\"},\"collective\":{\"type\":\"opencollective\",\"url\":\"https://opencollective.com/peer\"},\"files\":[\"dist/*\"],\"sideEffects\":[\"lib/global.ts\",\"lib/supports.ts\"],\"main\":\"dist/bundler.cjs\",\"module\":\"dist/bundler.mjs\",\"browser-minified\":\"dist/peerjs.min.js\",\"browser-unminified\":\"dist/peerjs.js\",\"browser-minified-cbor\":\"dist/serializer.cbor.mjs\",\"browser-minified-msgpack\":\"dist/serializer.msgpack.mjs\",\"types\":\"dist/types.d.ts\",\"engines\":{\"node\":\">= 14\"},\"targets\":{\"types\":{\"source\":\"lib/exports.ts\"},\"main\":{\"source\":\"lib/exports.ts\",\"sourceMap\":{\"inlineSources\":true}},\"module\":{\"source\":\"lib/exports.ts\",\"includeNodeModules\":[\"eventemitter3\"],\"sourceMap\":{\"inlineSources\":true}},\"browser-minified\":{\"context\":\"browser\",\"outputFormat\":\"global\",\"optimize\":true,\"engines\":{\"browsers\":\"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15\"},\"source\":\"lib/global.ts\"},\"browser-unminified\":{\"context\":\"browser\",\"outputFormat\":\"global\",\"optimize\":false,\"engines\":{\"browsers\":\"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15\"},\"source\":\"lib/global.ts\"},\"browser-minified-cbor\":{\"context\":\"browser\",\"outputFormat\":\"esmodule\",\"isLibrary\":true,\"optimize\":true,\"engines\":{\"browsers\":\"chrome >= 83, edge >= 83, firefox >= 102, safari >= 15\"},\"source\":\"lib/dataconnection/StreamConnection/Cbor.ts\"},\"browser-minified-msgpack\":{\"context\":\"browser\",\"outputFormat\":\"esmodule\",\"isLibrary\":true,\"optimize\":true,\"engines\":{\"browsers\":\"chrome >= 83, edge >= 83, firefox >= 102, safari >= 15\"},\"source\":\"lib/dataconnection/StreamConnection/MsgPack.ts\"}},\"scripts\":{\"contributors\":\"git-authors-cli --print=false && prettier --write package.json && git add package.json package-lock.json && git commit -m \\\\\"chore(contributors): update and sort contributors list\\\\\"\",\"check\":\"tsc --noEmit && tsc -p e2e/tsconfig.json --noEmit\",\"watch\":\"parcel watch\",\"build\":\"rm -rf dist && parcel build\",\"prepublishOnly\":\"npm run build\",\"test\":\"jest\",\"test:watch\":\"jest --watch\",\"coverage\":\"jest --coverage --collectCoverageFrom=\\\\\"./lib/**\\\\\"\",\"format\":\"prettier --write .\",\"format:check\":\"prettier --check .\",\"semantic-release\":\"semantic-release\",\"e2e\":\"wdio run e2e/wdio.local.conf.ts\",\"e2e:bstack\":\"wdio run e2e/wdio.bstack.conf.ts\"},\"devDependencies\":{\"@parcel/config-default\":\"^2.9.3\",\"@parcel/packager-ts\":\"^2.9.3\",\"@parcel/transformer-typescript-tsc\":\"^2.9.3\",\"@parcel/transformer-typescript-types\":\"^2.9.3\",\"@semantic-release/changelog\":\"^6.0.1\",\"@semantic-release/git\":\"^10.0.1\",\"@swc/core\":\"^1.3.27\",\"@swc/jest\":\"^0.2.24\",\"@types/jasmine\":\"^4.3.4\",\"@wdio/browserstack-service\":\"^8.11.2\",\"@wdio/cli\":\"^8.11.2\",\"@wdio/globals\":\"^8.11.2\",\"@wdio/jasmine-framework\":\"^8.11.2\",\"@wdio/local-runner\":\"^8.11.2\",\"@wdio/spec-reporter\":\"^8.11.2\",\"@wdio/types\":\"^8.10.4\",\"http-server\":\"^14.1.1\",\"jest\":\"^29.3.1\",\"jest-environment-jsdom\":\"^29.3.1\",\"mock-socket\":\"^9.0.0\",\"parcel\":\"^2.9.3\",\"prettier\":\"^3.0.0\",\"semantic-release\":\"^21.0.0\",\"ts-node\":\"^10.9.1\",\"typescript\":\"^5.0.0\",\"wdio-geckodriver-service\":\"^5.0.1\"},\"dependencies\":{\"@msgpack/msgpack\":\"^2.8.0\",\"cbor-x\":\"^1.5.3\",\"eventemitter3\":\"^4.0.7\",\"peerjs-js-binarypack\":\"^2.0.0\",\"webrtc-adapter\":\"^8.0.0\"},\"alias\":{\"process\":false,\"buffer\":false}}');\nclass $8f5bfa60836d261d$export$4798917dbf149b79 extends (0, $c4dcfd1d1ea86647$exports.EventEmitter) {\n  constructor(secure, host, port, path, key, pingInterval = 5000) {\n    super();\n    this.pingInterval = pingInterval;\n    this._disconnected = true;\n    this._messagesQueue = [];\n    const wsProtocol = secure ? \"wss://\" : \"ws://\";\n    this._baseUrl = wsProtocol + host + \":\" + port + path + \"peerjs?key=\" + key;\n  }\n  start(id, token) {\n    this._id = id;\n    const wsUrl = `${this._baseUrl}&id=${id}&token=${token}`;\n    if (!!this._socket || !this._disconnected) return;\n    this._socket = new WebSocket(wsUrl + \"&version=\" + (0, $f5f881ec4575f1fc$exports.version));\n    this._disconnected = false;\n    this._socket.onmessage = event => {\n      let data;\n      try {\n        data = JSON.parse(event.data);\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Server message received:\", data);\n      } catch (e) {\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Invalid server message\", event.data);\n        return;\n      }\n      this.emit((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Message, data);\n    };\n    this._socket.onclose = event => {\n      if (this._disconnected) return;\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Socket closed.\", event);\n      this._cleanup();\n      this._disconnected = true;\n      this.emit((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Disconnected);\n    };\n    // Take care of the queue of connections if necessary and make sure Peer knows\n    // socket is open.\n    this._socket.onopen = () => {\n      if (this._disconnected) return;\n      this._sendQueuedMessages();\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Socket open\");\n      this._scheduleHeartbeat();\n    };\n  }\n  _scheduleHeartbeat() {\n    this._wsPingTimer = setTimeout(() => {\n      this._sendHeartbeat();\n    }, this.pingInterval);\n  }\n  _sendHeartbeat() {\n    if (!this._wsOpen()) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Cannot send heartbeat, because socket closed`);\n      return;\n    }\n    const message = JSON.stringify({\n      type: (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Heartbeat\n    });\n    this._socket.send(message);\n    this._scheduleHeartbeat();\n  }\n  /** Is the websocket currently open? */\n  _wsOpen() {\n    return !!this._socket && this._socket.readyState === 1;\n  }\n  /** Send queued messages. */\n  _sendQueuedMessages() {\n    //Create copy of queue and clear it,\n    //because send method push the message back to queue if smth will go wrong\n    const copiedQueue = [...this._messagesQueue];\n    this._messagesQueue = [];\n    for (const message of copiedQueue) this.send(message);\n  }\n  /** Exposed send for DC & Peer. */\n  send(data) {\n    if (this._disconnected) return;\n    // If we didn't get an ID yet, we can't yet send anything so we should queue\n    // up these messages.\n    if (!this._id) {\n      this._messagesQueue.push(data);\n      return;\n    }\n    if (!data.type) {\n      this.emit((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Error, \"Invalid message\");\n      return;\n    }\n    if (!this._wsOpen()) return;\n    const message = JSON.stringify(data);\n    this._socket.send(message);\n  }\n  close() {\n    if (this._disconnected) return;\n    this._cleanup();\n    this._disconnected = true;\n  }\n  _cleanup() {\n    if (this._socket) {\n      this._socket.onopen = this._socket.onmessage = this._socket.onclose = null;\n      this._socket.close();\n      this._socket = undefined;\n    }\n    clearTimeout(this._wsPingTimer);\n  }\n}\nclass $b82fb8fc0514bfc1$export$89e6bb5ad64bf4a {\n  constructor(connection) {\n    this.connection = connection;\n  }\n  /** Returns a PeerConnection object set up correctly (for data, media). */\n  startConnection(options) {\n    const peerConnection = this._startPeerConnection();\n    // Set the connection's PC.\n    this.connection.peerConnection = peerConnection;\n    if (this.connection.type === (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Media && options._stream) this._addTracksToConnection(options._stream, peerConnection);\n    // What do we need to do now?\n    if (options.originator) {\n      const dataConnection = this.connection;\n      const config = {\n        ordered: !!options.reliable\n      };\n      const dataChannel = peerConnection.createDataChannel(dataConnection.label, config);\n      dataConnection._initializeDataChannel(dataChannel);\n      this._makeOffer();\n    } else this.handleSDP(\"OFFER\", options.sdp);\n  }\n  /** Start a PC. */\n  _startPeerConnection() {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Creating RTCPeerConnection.\");\n    const peerConnection = new RTCPeerConnection(this.connection.provider.options.config);\n    this._setupListeners(peerConnection);\n    return peerConnection;\n  }\n  /** Set up various WebRTC listeners. */\n  _setupListeners(peerConnection) {\n    const peerId = this.connection.peer;\n    const connectionId = this.connection.connectionId;\n    const connectionType = this.connection.type;\n    const provider = this.connection.provider;\n    // ICE CANDIDATES.\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Listening for ICE candidates.\");\n    peerConnection.onicecandidate = evt => {\n      if (!evt.candidate || !evt.candidate.candidate) return;\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Received ICE candidates for ${peerId}:`, evt.candidate);\n      provider.socket.send({\n        type: (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Candidate,\n        payload: {\n          candidate: evt.candidate,\n          type: connectionType,\n          connectionId: connectionId\n        },\n        dst: peerId\n      });\n    };\n    peerConnection.oniceconnectionstatechange = () => {\n      switch (peerConnection.iceConnectionState) {\n        case \"failed\":\n          (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"iceConnectionState is failed, closing connections to \" + peerId);\n          this.connection.emitError((0, $78455e22dea96b8c$export$7974935686149686).NegotiationFailed, \"Negotiation of connection to \" + peerId + \" failed.\");\n          this.connection.close();\n          break;\n        case \"closed\":\n          (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"iceConnectionState is closed, closing connections to \" + peerId);\n          this.connection.emitError((0, $78455e22dea96b8c$export$7974935686149686).ConnectionClosed, \"Connection to \" + peerId + \" closed.\");\n          this.connection.close();\n          break;\n        case \"disconnected\":\n          (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"iceConnectionState changed to disconnected on the connection with \" + peerId);\n          break;\n        case \"completed\":\n          peerConnection.onicecandidate = () => {};\n          break;\n      }\n      this.connection.emit(\"iceStateChanged\", peerConnection.iceConnectionState);\n    };\n    // DATACONNECTION.\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Listening for data channel\");\n    // Fired between offer and answer, so options should already be saved\n    // in the options hash.\n    peerConnection.ondatachannel = evt => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Received data channel\");\n      const dataChannel = evt.channel;\n      const connection = provider.getConnection(peerId, connectionId);\n      connection._initializeDataChannel(dataChannel);\n    };\n    // MEDIACONNECTION.\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Listening for remote stream\");\n    peerConnection.ontrack = evt => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Received remote stream\");\n      const stream = evt.streams[0];\n      const connection = provider.getConnection(peerId, connectionId);\n      if (connection.type === (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Media) {\n        const mediaConnection = connection;\n        this._addStreamToMediaConnection(stream, mediaConnection);\n      }\n    };\n  }\n  cleanup() {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Cleaning up PeerConnection to \" + this.connection.peer);\n    const peerConnection = this.connection.peerConnection;\n    if (!peerConnection) return;\n    this.connection.peerConnection = null;\n    //unsubscribe from all PeerConnection's events\n    peerConnection.onicecandidate = peerConnection.oniceconnectionstatechange = peerConnection.ondatachannel = peerConnection.ontrack = () => {};\n    const peerConnectionNotClosed = peerConnection.signalingState !== \"closed\";\n    let dataChannelNotClosed = false;\n    const dataChannel = this.connection.dataChannel;\n    if (dataChannel) dataChannelNotClosed = !!dataChannel.readyState && dataChannel.readyState !== \"closed\";\n    if (peerConnectionNotClosed || dataChannelNotClosed) peerConnection.close();\n  }\n  async _makeOffer() {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n    try {\n      const offer = await peerConnection.createOffer(this.connection.options.constraints);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Created offer.\");\n      if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === \"function\") offer.sdp = this.connection.options.sdpTransform(offer.sdp) || offer.sdp;\n      try {\n        await peerConnection.setLocalDescription(offer);\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Set localDescription:\", offer, `for:${this.connection.peer}`);\n        let payload = {\n          sdp: offer,\n          type: this.connection.type,\n          connectionId: this.connection.connectionId,\n          metadata: this.connection.metadata\n        };\n        if (this.connection.type === (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Data) {\n          const dataConnection = this.connection;\n          payload = {\n            ...payload,\n            label: dataConnection.label,\n            reliable: dataConnection.reliable,\n            serialization: dataConnection.serialization\n          };\n        }\n        provider.socket.send({\n          type: (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Offer,\n          payload: payload,\n          dst: this.connection.peer\n        });\n      } catch (err) {\n        // TODO: investigate why _makeOffer is being called from the answer\n        if (err != \"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer\") {\n          provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err);\n          (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to setLocalDescription, \", err);\n        }\n      }\n    } catch (err_1) {\n      provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err_1);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to createOffer, \", err_1);\n    }\n  }\n  async _makeAnswer() {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n    try {\n      const answer = await peerConnection.createAnswer();\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Created answer.\");\n      if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === \"function\") answer.sdp = this.connection.options.sdpTransform(answer.sdp) || answer.sdp;\n      try {\n        await peerConnection.setLocalDescription(answer);\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Set localDescription:`, answer, `for:${this.connection.peer}`);\n        provider.socket.send({\n          type: (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Answer,\n          payload: {\n            sdp: answer,\n            type: this.connection.type,\n            connectionId: this.connection.connectionId\n          },\n          dst: this.connection.peer\n        });\n      } catch (err) {\n        provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err);\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to setLocalDescription, \", err);\n      }\n    } catch (err_1) {\n      provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err_1);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to create answer, \", err_1);\n    }\n  }\n  /** Handle an SDP. */\n  async handleSDP(type, sdp) {\n    sdp = new RTCSessionDescription(sdp);\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Setting remote description\", sdp);\n    const self = this;\n    try {\n      await peerConnection.setRemoteDescription(sdp);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Set remoteDescription:${type} for:${this.connection.peer}`);\n      if (type === \"OFFER\") await self._makeAnswer();\n    } catch (err) {\n      provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to setRemoteDescription, \", err);\n    }\n  }\n  /** Handle a candidate. */\n  async handleCandidate(ice) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`handleCandidate:`, ice);\n    try {\n      await this.connection.peerConnection.addIceCandidate(ice);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Added ICE candidate for:${this.connection.peer}`);\n    } catch (err) {\n      this.connection.provider.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).WebRTC, err);\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Failed to handleCandidate, \", err);\n    }\n  }\n  _addTracksToConnection(stream, peerConnection) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`add tracks from stream ${stream.id} to peer connection`);\n    if (!peerConnection.addTrack) return (0, $257947e92926277a$export$2e2bcd8739ae039).error(`Your browser does't support RTCPeerConnection#addTrack. Ignored.`);\n    stream.getTracks().forEach(track => {\n      peerConnection.addTrack(track, stream);\n    });\n  }\n  _addStreamToMediaConnection(stream, mediaConnection) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`add stream ${stream.id} to media connection ${mediaConnection.connectionId}`);\n    mediaConnection.addStream(stream);\n  }\n}\nclass $23779d1881157a18$export$6a678e589c8a4542 extends (0, $c4dcfd1d1ea86647$exports.EventEmitter) {\n  /**\n  * Emits a typed error message.\n  *\n  * @internal\n  */\n  emitError(type, err) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"Error:\", err);\n    // @ts-ignore\n    this.emit(\"error\", new $23779d1881157a18$export$98871882f492de82(`${type}`, err));\n  }\n}\nclass $23779d1881157a18$export$98871882f492de82 extends Error {\n  /**\n  * @internal\n  */\n  constructor(type, err) {\n    if (typeof err === \"string\") super(err);else {\n      super();\n      Object.assign(this, err);\n    }\n    this.type = type;\n  }\n}\nclass $5045192fc6d387ba$export$23a2a68283c24d80 extends (0, $23779d1881157a18$export$6a678e589c8a4542) {\n  /**\n  * Whether the media connection is active (e.g. your call has been answered).\n  * You can check this if you want to set a maximum wait time for a one-sided call.\n  */\n  get open() {\n    return this._open;\n  }\n  constructor(peer, provider, options) {\n    super();\n    this.peer = peer;\n    this.provider = provider;\n    this.options = options;\n    this._open = false;\n    this.metadata = options.metadata;\n  }\n}\nclass $5c1d08c7c57da9a3$export$4a84e95a2324ac29 extends (0, $5045192fc6d387ba$export$23a2a68283c24d80) {\n  static #_ = (() => {\n    this.ID_PREFIX = \"mc_\";\n  })();\n  /**\n  * For media connections, this is always 'media'.\n  */\n  get type() {\n    return (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Media;\n  }\n  get localStream() {\n    return this._localStream;\n  }\n  get remoteStream() {\n    return this._remoteStream;\n  }\n  constructor(peerId, provider, options) {\n    super(peerId, provider, options);\n    this._localStream = this.options._stream;\n    this.connectionId = this.options.connectionId || $5c1d08c7c57da9a3$export$4a84e95a2324ac29.ID_PREFIX + (0, $4f4134156c446392$export$7debb50ef11d5e0b).randomToken();\n    this._negotiator = new (0, $b82fb8fc0514bfc1$export$89e6bb5ad64bf4a)(this);\n    if (this._localStream) this._negotiator.startConnection({\n      _stream: this._localStream,\n      originator: true\n    });\n  }\n  /** Called by the Negotiator when the DataChannel is ready. */\n  _initializeDataChannel(dc) {\n    this.dataChannel = dc;\n    this.dataChannel.onopen = () => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} dc connection success`);\n      this.emit(\"willCloseOnRemote\");\n    };\n    this.dataChannel.onclose = () => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} dc closed for:`, this.peer);\n      this.close();\n    };\n  }\n  addStream(remoteStream) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(\"Receiving stream\", remoteStream);\n    this._remoteStream = remoteStream;\n    super.emit(\"stream\", remoteStream); // Should we call this `open`?\n  }\n  /**\n  * @internal\n  */\n  handleMessage(message) {\n    const type = message.type;\n    const payload = message.payload;\n    switch (message.type) {\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Answer:\n        this._negotiator.handleSDP(type, payload.sdp);\n        this._open = true;\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Candidate:\n        this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        (0, $257947e92926277a$export$2e2bcd8739ae039).warn(`Unrecognized message type:${type} from peer:${this.peer}`);\n        break;\n    }\n  }\n  /**\n   * When receiving a {@apilink PeerEvents | `call`} event on a peer, you can call\n   * `answer` on the media connection provided by the callback to accept the call\n   * and optionally send your own media stream.\n    *\n   * @param stream A WebRTC media stream.\n   * @param options\n   * @returns\n   */\n  answer(stream, options = {}) {\n    if (this._localStream) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).warn(\"Local stream already exists on this MediaConnection. Are you answering a call twice?\");\n      return;\n    }\n    this._localStream = stream;\n    if (options && options.sdpTransform) this.options.sdpTransform = options.sdpTransform;\n    this._negotiator.startConnection({\n      ...this.options._payload,\n      _stream: stream\n    });\n    // Retrieve lost messages stored because PeerConnection not set up.\n    const messages = this.provider._getMessages(this.connectionId);\n    for (const message of messages) this.handleMessage(message);\n    this._open = true;\n  }\n  /**\n  * Exposed functionality for users.\n  */ /**\n     * Closes the media connection.\n     */\n  close() {\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n    this._localStream = null;\n    this._remoteStream = null;\n    if (this.provider) {\n      this.provider._removeConnection(this);\n      this.provider = null;\n    }\n    if (this.options && this.options._stream) this.options._stream = null;\n    if (!this.open) return;\n    this._open = false;\n    super.emit(\"close\");\n  }\n}\nclass $abf266641927cd89$export$2c4e825dc9120f87 {\n  constructor(_options) {\n    this._options = _options;\n  }\n  _buildRequest(method) {\n    const protocol = this._options.secure ? \"https\" : \"http\";\n    const {\n      host: host,\n      port: port,\n      path: path,\n      key: key\n    } = this._options;\n    const url = new URL(`${protocol}://${host}:${port}${path}${key}/${method}`);\n    // TODO: Why timestamp, why random?\n    url.searchParams.set(\"ts\", `${Date.now()}${Math.random()}`);\n    url.searchParams.set(\"version\", (0, $f5f881ec4575f1fc$exports.version));\n    return fetch(url.href, {\n      referrerPolicy: this._options.referrerPolicy\n    });\n  }\n  /** Get a unique ID from the server via XHR and initialize with it. */\n  async retrieveId() {\n    try {\n      const response = await this._buildRequest(\"id\");\n      if (response.status !== 200) throw new Error(`Error. Status:${response.status}`);\n      return response.text();\n    } catch (error) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"Error retrieving ID\", error);\n      let pathError = \"\";\n      if (this._options.path === \"/\" && this._options.host !== (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_HOST) pathError = \" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer.\";\n      throw new Error(\"Could not get an ID from the server.\" + pathError);\n    }\n  }\n  /** @deprecated */\n  async listAllPeers() {\n    try {\n      const response = await this._buildRequest(\"peers\");\n      if (response.status !== 200) {\n        if (response.status === 401) {\n          let helpfulError = \"\";\n          if (this._options.host === (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_HOST) helpfulError = \"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.\";else helpfulError = \"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.\";\n          throw new Error(\"It doesn't look like you have permission to list peers IDs. \" + helpfulError);\n        }\n        throw new Error(`Error. Status:${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"Error retrieving list peers\", error);\n      throw new Error(\"Could not get list peers from the server.\" + error);\n    }\n  }\n}\nclass $6366c4ca161bc297$export$d365f7ad9d7df9c9 extends (0, $5045192fc6d387ba$export$23a2a68283c24d80) {\n  static #_ = (() => {\n    this.ID_PREFIX = \"dc_\";\n  })();\n  static #_1 = (() => {\n    this.MAX_BUFFERED_AMOUNT = 8388608;\n  })();\n  get type() {\n    return (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Data;\n  }\n  constructor(peerId, provider, options) {\n    super(peerId, provider, options);\n    this.connectionId = this.options.connectionId || $6366c4ca161bc297$export$d365f7ad9d7df9c9.ID_PREFIX + (0, $0e5fd1585784c252$export$4e61f672936bec77)();\n    this.label = this.options.label || this.connectionId;\n    this.reliable = !!this.options.reliable;\n    this._negotiator = new (0, $b82fb8fc0514bfc1$export$89e6bb5ad64bf4a)(this);\n    this._negotiator.startConnection(this.options._payload || {\n      originator: true,\n      reliable: this.reliable\n    });\n  }\n  /** Called by the Negotiator when the DataChannel is ready. */\n  _initializeDataChannel(dc) {\n    this.dataChannel = dc;\n    this.dataChannel.onopen = () => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} dc connection success`);\n      this._open = true;\n      this.emit(\"open\");\n    };\n    this.dataChannel.onmessage = e => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} dc onmessage:`, e.data);\n      // this._handleDataMessage(e);\n    };\n\n    this.dataChannel.onclose = () => {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} dc closed for:`, this.peer);\n      this.close();\n    };\n  }\n  /**\n  * Exposed functionality for users.\n  */ /** Allows user to close connection. */\n  close(options) {\n    if (options?.flush) {\n      this.send({\n        __peerData: {\n          type: \"close\"\n        }\n      });\n      return;\n    }\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n    if (this.provider) {\n      this.provider._removeConnection(this);\n      this.provider = null;\n    }\n    if (this.dataChannel) {\n      this.dataChannel.onopen = null;\n      this.dataChannel.onmessage = null;\n      this.dataChannel.onclose = null;\n      this.dataChannel = null;\n    }\n    if (!this.open) return;\n    this._open = false;\n    super.emit(\"close\");\n  }\n  /** Allows user to send data. */\n  send(data, chunked = false) {\n    if (!this.open) {\n      this.emitError((0, $78455e22dea96b8c$export$49ae800c114df41d).NotOpenYet, \"Connection is not open. You should listen for the `open` event before sending messages.\");\n      return;\n    }\n    return this._send(data, chunked);\n  }\n  async handleMessage(message) {\n    const payload = message.payload;\n    switch (message.type) {\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Answer:\n        await this._negotiator.handleSDP(message.type, payload.sdp);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Candidate:\n        await this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        (0, $257947e92926277a$export$2e2bcd8739ae039).warn(\"Unrecognized message type:\", message.type, \"from peer:\", this.peer);\n        break;\n    }\n  }\n}\nclass $a229bedbcaa6ca23$export$ff7c9d4c11d94e8b extends (0, $6366c4ca161bc297$export$d365f7ad9d7df9c9) {\n  get bufferSize() {\n    return this._bufferSize;\n  }\n  _initializeDataChannel(dc) {\n    super._initializeDataChannel(dc);\n    this.dataChannel.binaryType = \"arraybuffer\";\n    this.dataChannel.addEventListener(\"message\", e => this._handleDataMessage(e));\n  }\n  _bufferedSend(msg) {\n    if (this._buffering || !this._trySend(msg)) {\n      this._buffer.push(msg);\n      this._bufferSize = this._buffer.length;\n    }\n  }\n  // Returns true if the send succeeds.\n  _trySend(msg) {\n    if (!this.open) return false;\n    if (this.dataChannel.bufferedAmount > (0, $6366c4ca161bc297$export$d365f7ad9d7df9c9).MAX_BUFFERED_AMOUNT) {\n      this._buffering = true;\n      setTimeout(() => {\n        this._buffering = false;\n        this._tryBuffer();\n      }, 50);\n      return false;\n    }\n    try {\n      this.dataChannel.send(msg);\n    } catch (e) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).error(`DC#:${this.connectionId} Error when sending:`, e);\n      this._buffering = true;\n      this.close();\n      return false;\n    }\n    return true;\n  }\n  // Try to send the first message in the buffer.\n  _tryBuffer() {\n    if (!this.open) return;\n    if (this._buffer.length === 0) return;\n    const msg = this._buffer[0];\n    if (this._trySend(msg)) {\n      this._buffer.shift();\n      this._bufferSize = this._buffer.length;\n      this._tryBuffer();\n    }\n  }\n  close(options) {\n    if (options?.flush) {\n      this.send({\n        __peerData: {\n          type: \"close\"\n        }\n      });\n      return;\n    }\n    this._buffer = [];\n    this._bufferSize = 0;\n    super.close();\n  }\n  constructor(...args) {\n    super(...args);\n    this._buffer = [];\n    this._bufferSize = 0;\n    this._buffering = false;\n  }\n}\nclass $9fcfddb3ae148f88$export$f0a5a64d5bb37108 extends (0, $a229bedbcaa6ca23$export$ff7c9d4c11d94e8b) {\n  close(options) {\n    super.close(options);\n    this._chunkedData = {};\n  }\n  constructor(peerId, provider, options) {\n    super(peerId, provider, options);\n    this.chunker = new (0, $fcbcc7538a6776d5$export$f1c5f4c9cb95390b)();\n    this.serialization = (0, $78455e22dea96b8c$export$89f507cf986a947).Binary;\n    this._chunkedData = {};\n  }\n  // Handles a DataChannel message.\n  _handleDataMessage({\n    data: data\n  }) {\n    const deserializedData = (0, $gCcbY$unpack)(data);\n    // PeerJS specific message\n    const peerData = deserializedData[\"__peerData\"];\n    if (peerData) {\n      if (peerData.type === \"close\") {\n        this.close();\n        return;\n      }\n      // Chunked data -- piece things back together.\n      // @ts-ignore\n      this._handleChunk(deserializedData);\n      return;\n    }\n    this.emit(\"data\", deserializedData);\n  }\n  _handleChunk(data) {\n    const id = data.__peerData;\n    const chunkInfo = this._chunkedData[id] || {\n      data: [],\n      count: 0,\n      total: data.total\n    };\n    chunkInfo.data[data.n] = new Uint8Array(data.data);\n    chunkInfo.count++;\n    this._chunkedData[id] = chunkInfo;\n    if (chunkInfo.total === chunkInfo.count) {\n      // Clean up before making the recursive call to `_handleDataMessage`.\n      delete this._chunkedData[id];\n      // We've received all the chunks--time to construct the complete data.\n      // const data = new Blob(chunkInfo.data);\n      const data = (0, $fcbcc7538a6776d5$export$52c89ebcdc4f53f2)(chunkInfo.data);\n      this._handleDataMessage({\n        data: data\n      });\n    }\n  }\n  _send(data, chunked) {\n    if (data instanceof Blob) return data.arrayBuffer().then(buffer => {\n      this._send(buffer, chunked);\n    });\n    const blob = (0, $gCcbY$pack)(data);\n    if (!chunked && blob.byteLength > this.chunker.chunkedMTU) {\n      this._sendChunks(blob);\n      return;\n    }\n    this._bufferedSend(blob);\n  }\n  _sendChunks(blob) {\n    const blobs = this.chunker.chunk(blob);\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`DC#${this.connectionId} Try to send ${blobs.length} chunks...`);\n    for (const blob of blobs) this.send(blob, true);\n  }\n}\nclass $bbaee3f15f714663$export$6f88fe47d32c9c94 extends (0, $a229bedbcaa6ca23$export$ff7c9d4c11d94e8b) {\n  _handleDataMessage({\n    data: data\n  }) {\n    super.emit(\"data\", data);\n  }\n  _send(data, _chunked) {\n    this._bufferedSend(data);\n  }\n  constructor(...args) {\n    super(...args);\n    this.serialization = (0, $78455e22dea96b8c$export$89f507cf986a947).None;\n  }\n}\nclass $817f931e3f9096cf$export$48880ac635f47186 extends (0, $a229bedbcaa6ca23$export$ff7c9d4c11d94e8b) {\n  // Handles a DataChannel message.\n  _handleDataMessage({\n    data: data\n  }) {\n    const deserializedData = this.parse(this.decoder.decode(data));\n    // PeerJS specific message\n    const peerData = deserializedData[\"__peerData\"];\n    if (peerData && peerData.type === \"close\") {\n      this.close();\n      return;\n    }\n    this.emit(\"data\", deserializedData);\n  }\n  _send(data, _chunked) {\n    const encodedData = this.encoder.encode(this.stringify(data));\n    if (encodedData.byteLength >= (0, $4f4134156c446392$export$7debb50ef11d5e0b).chunkedMTU) {\n      this.emitError((0, $78455e22dea96b8c$export$49ae800c114df41d).MessageToBig, \"Message too big for JSON channel\");\n      return;\n    }\n    this._bufferedSend(encodedData);\n  }\n  constructor(...args) {\n    super(...args);\n    this.serialization = (0, $78455e22dea96b8c$export$89f507cf986a947).JSON;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n    this.stringify = JSON.stringify;\n    this.parse = JSON.parse;\n  }\n}\nclass $416260bce337df90$var$PeerOptions {}\nclass $416260bce337df90$export$ecd1fc136c422448 extends (0, $23779d1881157a18$export$6a678e589c8a4542) {\n  static #_ = (() => {\n    this.DEFAULT_KEY = \"peerjs\";\n  })();\n  /**\n  * The brokering ID of this peer\n  *\n  * If no ID was specified in {@apilink Peer | the constructor},\n  * this will be `undefined` until the {@apilink PeerEvents | `open`} event is emitted.\n  */\n  get id() {\n    return this._id;\n  }\n  get options() {\n    return this._options;\n  }\n  get open() {\n    return this._open;\n  }\n  /**\n  * @internal\n  */\n  get socket() {\n    return this._socket;\n  }\n  /**\n  * A hash of all connections associated with this peer, keyed by the remote peer's ID.\n  * @deprecated\n  * Return type will change from Object to Map<string,[]>\n  */\n  get connections() {\n    const plainConnections = Object.create(null);\n    for (const [k, v] of this._connections) plainConnections[k] = v;\n    return plainConnections;\n  }\n  /**\n  * true if this peer and all of its connections can no longer be used.\n  */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /**\n  * false if there is an active connection to the PeerServer.\n  */\n  get disconnected() {\n    return this._disconnected;\n  }\n  constructor(id, options) {\n    super();\n    this._serializers = {\n      raw: (0, $bbaee3f15f714663$export$6f88fe47d32c9c94),\n      json: (0, $817f931e3f9096cf$export$48880ac635f47186),\n      binary: (0, $9fcfddb3ae148f88$export$f0a5a64d5bb37108),\n      \"binary-utf8\": (0, $9fcfddb3ae148f88$export$f0a5a64d5bb37108),\n      default: (0, $9fcfddb3ae148f88$export$f0a5a64d5bb37108)\n    };\n    this._id = null;\n    this._lastServerId = null;\n    // States.\n    this._destroyed = false // Connections have been killed\n    ;\n\n    this._disconnected = false // Connection to PeerServer killed but P2P connections still active\n    ;\n\n    this._open = false // Sockets and such are not yet open.\n    ;\n\n    this._connections = new Map() // All connections for this peer.\n    ;\n\n    this._lostMessages = new Map() // src => [list of messages]\n    ;\n\n    let userId;\n    // Deal with overloading\n    if (id && id.constructor == Object) options = id;else if (id) userId = id.toString();\n    // Configurize options\n    options = {\n      debug: 0,\n      host: (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_HOST,\n      port: (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_PORT,\n      path: \"/\",\n      key: $416260bce337df90$export$ecd1fc136c422448.DEFAULT_KEY,\n      token: (0, $4f4134156c446392$export$7debb50ef11d5e0b).randomToken(),\n      config: (0, $4f4134156c446392$export$7debb50ef11d5e0b).defaultConfig,\n      referrerPolicy: \"strict-origin-when-cross-origin\",\n      serializers: {},\n      ...options\n    };\n    this._options = options;\n    this._serializers = {\n      ...this._serializers,\n      ...this.options.serializers\n    };\n    // Detect relative URL host.\n    if (this._options.host === \"/\") this._options.host = window.location.hostname;\n    // Set path correctly.\n    if (this._options.path) {\n      if (this._options.path[0] !== \"/\") this._options.path = \"/\" + this._options.path;\n      if (this._options.path[this._options.path.length - 1] !== \"/\") this._options.path += \"/\";\n    }\n    // Set whether we use SSL to same as current host\n    if (this._options.secure === undefined && this._options.host !== (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_HOST) this._options.secure = (0, $4f4134156c446392$export$7debb50ef11d5e0b).isSecure();else if (this._options.host == (0, $4f4134156c446392$export$7debb50ef11d5e0b).CLOUD_HOST) this._options.secure = true;\n    // Set a custom log function if present\n    if (this._options.logFunction) (0, $257947e92926277a$export$2e2bcd8739ae039).setLogFunction(this._options.logFunction);\n    (0, $257947e92926277a$export$2e2bcd8739ae039).logLevel = this._options.debug || 0;\n    this._api = new (0, $abf266641927cd89$export$2c4e825dc9120f87)(options);\n    this._socket = this._createServerConnection();\n    // Sanity checks\n    // Ensure WebRTC supported\n    if (!(0, $4f4134156c446392$export$7debb50ef11d5e0b).supports.audioVideo && !(0, $4f4134156c446392$export$7debb50ef11d5e0b).supports.data) {\n      this._delayedAbort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).BrowserIncompatible, \"The current browser does not support WebRTC\");\n      return;\n    }\n    // Ensure alphanumeric id\n    if (!!userId && !(0, $4f4134156c446392$export$7debb50ef11d5e0b).validateId(userId)) {\n      this._delayedAbort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).InvalidID, `ID \"${userId}\" is invalid`);\n      return;\n    }\n    if (userId) this._initialize(userId);else this._api.retrieveId().then(id => this._initialize(id)).catch(error => this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).ServerError, error));\n  }\n  _createServerConnection() {\n    const socket = new (0, $8f5bfa60836d261d$export$4798917dbf149b79)(this._options.secure, this._options.host, this._options.port, this._options.path, this._options.key, this._options.pingInterval);\n    socket.on((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Message, data => {\n      this._handleMessage(data);\n    });\n    socket.on((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Error, error => {\n      this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).SocketError, error);\n    });\n    socket.on((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Disconnected, () => {\n      if (this.disconnected) return;\n      this.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).Network, \"Lost connection to server.\");\n      this.disconnect();\n    });\n    socket.on((0, $78455e22dea96b8c$export$3b5c4a4b6354f023).Close, () => {\n      if (this.disconnected) return;\n      this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).SocketClosed, \"Underlying socket is already closed.\");\n    });\n    return socket;\n  }\n  /** Initialize a connection with the server. */\n  _initialize(id) {\n    this._id = id;\n    this.socket.start(id, this._options.token);\n  }\n  /** Handles messages from the server. */\n  _handleMessage(message) {\n    const type = message.type;\n    const payload = message.payload;\n    const peerId = message.src;\n    switch (type) {\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Open:\n        this._lastServerId = this.id;\n        this._open = true;\n        this.emit(\"open\", this.id);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Error:\n        this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).ServerError, payload.msg);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).IdTaken:\n        this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).UnavailableID, `ID \"${this.id}\" is taken`);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).InvalidKey:\n        this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).InvalidKey, `API KEY \"${this._options.key}\" is invalid`);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Leave:\n        (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Received leave message from ${peerId}`);\n        this._cleanupPeer(peerId);\n        this._connections.delete(peerId);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Expire:\n        this.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).PeerUnavailable, `Could not connect to peer ${peerId}`);\n        break;\n      case (0, $78455e22dea96b8c$export$adb4a1754da6f10d).Offer:\n        {\n          // we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n          const connectionId = payload.connectionId;\n          let connection = this.getConnection(peerId, connectionId);\n          if (connection) {\n            connection.close();\n            (0, $257947e92926277a$export$2e2bcd8739ae039).warn(`Offer received for existing Connection ID:${connectionId}`);\n          }\n          // Create a new connection.\n          if (payload.type === (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Media) {\n            const mediaConnection = new (0, $5c1d08c7c57da9a3$export$4a84e95a2324ac29)(peerId, this, {\n              connectionId: connectionId,\n              _payload: payload,\n              metadata: payload.metadata\n            });\n            connection = mediaConnection;\n            this._addConnection(peerId, connection);\n            this.emit(\"call\", mediaConnection);\n          } else if (payload.type === (0, $78455e22dea96b8c$export$3157d57b4135e3bc).Data) {\n            const dataConnection = new this._serializers[payload.serialization](peerId, this, {\n              connectionId: connectionId,\n              _payload: payload,\n              metadata: payload.metadata,\n              label: payload.label,\n              serialization: payload.serialization,\n              reliable: payload.reliable\n            });\n            connection = dataConnection;\n            this._addConnection(peerId, connection);\n            this.emit(\"connection\", dataConnection);\n          } else {\n            (0, $257947e92926277a$export$2e2bcd8739ae039).warn(`Received malformed connection type:${payload.type}`);\n            return;\n          }\n          // Find messages.\n          const messages = this._getMessages(connectionId);\n          for (const message of messages) connection.handleMessage(message);\n          break;\n        }\n      default:\n        {\n          if (!payload) {\n            (0, $257947e92926277a$export$2e2bcd8739ae039).warn(`You received a malformed message from ${peerId} of type ${type}`);\n            return;\n          }\n          const connectionId = payload.connectionId;\n          const connection = this.getConnection(peerId, connectionId);\n          if (connection && connection.peerConnection)\n            // Pass it on.\n            connection.handleMessage(message);else if (connectionId)\n            // Store for possible later use\n            this._storeMessage(connectionId, message);else (0, $257947e92926277a$export$2e2bcd8739ae039).warn(\"You received an unrecognized message:\", message);\n          break;\n        }\n    }\n  }\n  /** Stores messages without a set up connection, to be claimed later. */\n  _storeMessage(connectionId, message) {\n    if (!this._lostMessages.has(connectionId)) this._lostMessages.set(connectionId, []);\n    this._lostMessages.get(connectionId).push(message);\n  }\n  /**\n  * Retrieve messages from lost message store\n  * @internal\n  */ //TODO Change it to private\n  _getMessages(connectionId) {\n    const messages = this._lostMessages.get(connectionId);\n    if (messages) {\n      this._lostMessages.delete(connectionId);\n      return messages;\n    }\n    return [];\n  }\n  /**\n  * Connects to the remote peer specified by id and returns a data connection.\n  * @param peer The brokering ID of the remote peer (their {@apilink Peer.id}).\n  * @param options for specifying details about Peer Connection\n  */\n  connect(peer, options = {}) {\n    options = {\n      serialization: \"default\",\n      ...options\n    };\n    if (this.disconnected) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).warn(\"You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available.\");\n      this.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).Disconnected, \"Cannot connect to new Peer after disconnecting from server.\");\n      return;\n    }\n    const dataConnection = new this._serializers[options.serialization](peer, this, options);\n    this._addConnection(peer, dataConnection);\n    return dataConnection;\n  }\n  /**\n  * Calls the remote peer specified by id and returns a media connection.\n  * @param peer The brokering ID of the remote peer (their peer.id).\n  * @param stream The caller's media stream\n  * @param options Metadata associated with the connection, passed in by whoever initiated the connection.\n  */\n  call(peer, stream, options = {}) {\n    if (this.disconnected) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).warn(\"You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect.\");\n      this.emitError((0, $78455e22dea96b8c$export$9547aaa2e39030ff).Disconnected, \"Cannot connect to new Peer after disconnecting from server.\");\n      return;\n    }\n    if (!stream) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"To call a peer, you must provide a stream from your browser's `getUserMedia`.\");\n      return;\n    }\n    const mediaConnection = new (0, $5c1d08c7c57da9a3$export$4a84e95a2324ac29)(peer, this, {\n      ...options,\n      _stream: stream\n    });\n    this._addConnection(peer, mediaConnection);\n    return mediaConnection;\n  }\n  /** Add a data/media connection to this peer. */\n  _addConnection(peerId, connection) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`add connection ${connection.type}:${connection.connectionId} to peerId:${peerId}`);\n    if (!this._connections.has(peerId)) this._connections.set(peerId, []);\n    this._connections.get(peerId).push(connection);\n  }\n  //TODO should be private\n  _removeConnection(connection) {\n    const connections = this._connections.get(connection.peer);\n    if (connections) {\n      const index = connections.indexOf(connection);\n      if (index !== -1) connections.splice(index, 1);\n    }\n    //remove from lost messages\n    this._lostMessages.delete(connection.connectionId);\n  }\n  /** Retrieve a data/media connection for this peer. */\n  getConnection(peerId, connectionId) {\n    const connections = this._connections.get(peerId);\n    if (!connections) return null;\n    for (const connection of connections) {\n      if (connection.connectionId === connectionId) return connection;\n    }\n    return null;\n  }\n  _delayedAbort(type, message) {\n    setTimeout(() => {\n      this._abort(type, message);\n    }, 0);\n  }\n  /**\n  * Emits an error message and destroys the Peer.\n  * The Peer is not destroyed if it's in a disconnected state, in which case\n  * it retains its disconnected state and its existing connections.\n  */\n  _abort(type, message) {\n    (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"Aborting!\");\n    this.emitError(type, message);\n    if (!this._lastServerId) this.destroy();else this.disconnect();\n  }\n  /**\n  * Destroys the Peer: closes all active connections as well as the connection\n  * to the server.\n  *\n  * :::caution\n  * This cannot be undone; the respective peer object will no longer be able\n  * to create or receive any connections, its ID will be forfeited on the server,\n  * and all of its data and media connections will be closed.\n  * :::\n  */\n  destroy() {\n    if (this.destroyed) return;\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Destroy peer with ID:${this.id}`);\n    this.disconnect();\n    this._cleanup();\n    this._destroyed = true;\n    this.emit(\"close\");\n  }\n  /** Disconnects every connection on this peer. */\n  _cleanup() {\n    for (const peerId of this._connections.keys()) {\n      this._cleanupPeer(peerId);\n      this._connections.delete(peerId);\n    }\n    this.socket.removeAllListeners();\n  }\n  /** Closes all connections to this peer. */\n  _cleanupPeer(peerId) {\n    const connections = this._connections.get(peerId);\n    if (!connections) return;\n    for (const connection of connections) connection.close();\n  }\n  /**\n  * Disconnects the Peer's connection to the PeerServer. Does not close any\n  *  active connections.\n  * Warning: The peer can no longer create or accept connections after being\n  *  disconnected. It also cannot reconnect to the server.\n  */\n  disconnect() {\n    if (this.disconnected) return;\n    const currentId = this.id;\n    (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Disconnect peer with ID:${currentId}`);\n    this._disconnected = true;\n    this._open = false;\n    this.socket.close();\n    this._lastServerId = currentId;\n    this._id = null;\n    this.emit(\"disconnected\", currentId);\n  }\n  /** Attempts to reconnect with the same ID.\n  *\n  * Only {@apilink Peer.disconnect | disconnected peers} can be reconnected.\n  * Destroyed peers cannot be reconnected.\n  * If the connection fails (as an example, if the peer's old ID is now taken),\n  * the peer's existing connections will not close, but any associated errors events will fire.\n  */\n  reconnect() {\n    if (this.disconnected && !this.destroyed) {\n      (0, $257947e92926277a$export$2e2bcd8739ae039).log(`Attempting reconnection to server with ID ${this._lastServerId}`);\n      this._disconnected = false;\n      this._initialize(this._lastServerId);\n    } else if (this.destroyed) throw new Error(\"This peer cannot reconnect to the server. It has already been destroyed.\");else if (!this.disconnected && !this.open)\n      // Do nothing. We're still connecting the first time.\n      (0, $257947e92926277a$export$2e2bcd8739ae039).error(\"In a hurry? We're still trying to make the initial connection!\");else throw new Error(`Peer ${this.id} cannot reconnect because it is not disconnected from the server!`);\n  }\n  /**\n  * Get a list of available peer IDs. If you're running your own server, you'll\n  * want to set allow_discovery: true in the PeerServer options. If you're using\n  * the cloud server, email team@peerjs.com to get the functionality enabled for\n  * your key.\n  */\n  listAllPeers(cb = _ => {}) {\n    this._api.listAllPeers().then(peers => cb(peers)).catch(error => this._abort((0, $78455e22dea96b8c$export$9547aaa2e39030ff).ServerError, error));\n  }\n}\nclass $20dbe68149d7aad9$export$72aa44612e2200cd extends (0, $6366c4ca161bc297$export$d365f7ad9d7df9c9) {\n  constructor(peerId, provider, options) {\n    super(peerId, provider, {\n      ...options,\n      reliable: true\n    });\n    this._CHUNK_SIZE = 32768;\n    this._splitStream = new TransformStream({\n      transform: (chunk, controller) => {\n        for (let split = 0; split < chunk.length; split += this._CHUNK_SIZE) controller.enqueue(chunk.subarray(split, split + this._CHUNK_SIZE));\n      }\n    });\n    this._rawSendStream = new WritableStream({\n      write: async (chunk, controller) => {\n        const openEvent = new Promise(resolve => this.dataChannel.addEventListener(\"bufferedamountlow\", resolve, {\n          once: true\n        }));\n        // if we can send the chunk now, send it\n        // if not, we wait until at least half of the sending buffer is free again\n        await (this.dataChannel.bufferedAmount <= (0, $6366c4ca161bc297$export$d365f7ad9d7df9c9).MAX_BUFFERED_AMOUNT - chunk.byteLength || openEvent);\n        // TODO: what can go wrong here?\n        try {\n          this.dataChannel.send(chunk);\n        } catch (e) {\n          (0, $257947e92926277a$export$2e2bcd8739ae039).error(`DC#:${this.connectionId} Error when sending:`, e);\n          controller.error(e);\n          this.close();\n        }\n      }\n    });\n    this.writer = this._splitStream.writable.getWriter();\n    this._rawReadStream = new ReadableStream({\n      start: controller => {\n        this.once(\"open\", () => {\n          this.dataChannel.addEventListener(\"message\", e => {\n            controller.enqueue(e.data);\n          });\n        });\n      }\n    });\n    this._splitStream.readable.pipeTo(this._rawSendStream);\n  }\n  _initializeDataChannel(dc) {\n    super._initializeDataChannel(dc);\n    this.dataChannel.binaryType = \"arraybuffer\";\n    this.dataChannel.bufferedAmountLowThreshold = (0, $6366c4ca161bc297$export$d365f7ad9d7df9c9).MAX_BUFFERED_AMOUNT / 2;\n  }\n}\nconst $dcf98445f54823f4$var$NullValue = Symbol.for(null);\nfunction $dcf98445f54823f4$var$concatUint8Array(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(buffer1, 0);\n  tmp.set(buffer2, buffer1.byteLength);\n  return new Uint8Array(tmp.buffer);\n}\nconst $dcf98445f54823f4$var$iterateOver = async function* (stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const {\n        done: done,\n        value: value\n      } = await reader.read();\n      if (done) return;\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n};\nclass $dcf98445f54823f4$export$7e9583c3c8a0a2cc extends (0, $20dbe68149d7aad9$export$72aa44612e2200cd) {\n  constructor(peerId, provider, options) {\n    super(peerId, provider, {\n      ...options,\n      reliable: true\n    });\n    this.serialization = \"Cbor\";\n    this._encoder = new (0, $gCcbY$Encoder)();\n    this._decoder = new (0, $gCcbY$Decoder)();\n    this._decoderStream = new TransformStream({\n      transform: (abchunk, controller) => {\n        let chunk = new Uint8Array(abchunk);\n        if (this._inc) {\n          chunk = $dcf98445f54823f4$var$concatUint8Array(this._inc, chunk);\n          this._inc = null;\n        }\n        let values;\n        try {\n          values = this._decoder.decodeMultiple(chunk);\n        } catch (error) {\n          if (error.incomplete) {\n            this._inc = chunk.subarray(error.lastPosition);\n            values = error.values;\n          } else throw error;\n        } finally {\n          for (let value of values || []) {\n            if (value === null) value = $dcf98445f54823f4$var$NullValue;\n            controller.enqueue(value);\n          }\n        }\n      }\n    });\n    this._rawReadStream.pipeTo(this._decoderStream.writable);\n    (async () => {\n      for await (const msg of $dcf98445f54823f4$var$iterateOver(this._decoderStream.readable)) {\n        if (msg.__peerData?.type === \"close\") {\n          this.close();\n          return;\n        }\n        this.emit(\"data\", msg);\n      }\n    })();\n  }\n  _send(data) {\n    return this.writer.write(this._encoder.encode(data));\n  }\n}\nclass $3849fc09dd8f140b$export$f6a74c7ffa2903e6 extends (0, $416260bce337df90$export$ecd1fc136c422448) {\n  constructor(...args) {\n    super(...args);\n    this._serializers = {\n      Cbor: $dcf98445f54823f4$export$7e9583c3c8a0a2cc,\n      default: (0, $dcf98445f54823f4$export$7e9583c3c8a0a2cc)\n    };\n  }\n}\nclass $6e39230ab36396ad$export$80f5de1a66c4d624 extends (0, $20dbe68149d7aad9$export$72aa44612e2200cd) {\n  constructor(peerId, provider, options) {\n    super(peerId, provider, options);\n    this.serialization = \"MsgPack\";\n    this._encoder = new (0, $gCcbY$Encoder1)();\n    (async () => {\n      for await (const msg of (0, $gCcbY$decodeMultiStream)(this._rawReadStream)) {\n        // @ts-ignore\n        if (msg.__peerData?.type === \"close\") {\n          this.close();\n          return;\n        }\n        this.emit(\"data\", msg);\n      }\n    })();\n  }\n  _send(data) {\n    return this.writer.write(this._encoder.encode(data));\n  }\n}\nclass $1e0aff16be2c328e$export$d72c7bf8eef50853 extends (0, $416260bce337df90$export$ecd1fc136c422448) {\n  constructor(...args) {\n    super(...args);\n    this._serializers = {\n      MsgPack: $6e39230ab36396ad$export$80f5de1a66c4d624,\n      default: (0, $6e39230ab36396ad$export$80f5de1a66c4d624)\n    };\n  }\n}\nvar $dd0187d7f28e386f$export$2e2bcd8739ae039 = (0, $416260bce337df90$export$ecd1fc136c422448);\nexport { $dd0187d7f28e386f$export$2e2bcd8739ae039 as default, $4f4134156c446392$export$7debb50ef11d5e0b as util, $a229bedbcaa6ca23$export$ff7c9d4c11d94e8b as BufferedConnection, $20dbe68149d7aad9$export$72aa44612e2200cd as StreamConnection, $dcf98445f54823f4$export$7e9583c3c8a0a2cc as Cbor, $6e39230ab36396ad$export$80f5de1a66c4d624 as MsgPack, $416260bce337df90$export$ecd1fc136c422448 as Peer, $1e0aff16be2c328e$export$d72c7bf8eef50853 as MsgPackPeer, $3849fc09dd8f140b$export$f6a74c7ffa2903e6 as CborPeer, $23779d1881157a18$export$98871882f492de82 as PeerError, $78455e22dea96b8c$export$3157d57b4135e3bc as ConnectionType, $78455e22dea96b8c$export$9547aaa2e39030ff as PeerErrorType, $78455e22dea96b8c$export$7974935686149686 as BaseConnectionErrorType, $78455e22dea96b8c$export$49ae800c114df41d as DataConnectionErrorType, $78455e22dea96b8c$export$89f507cf986a947 as SerializationType, $78455e22dea96b8c$export$3b5c4a4b6354f023 as SocketEventType, $78455e22dea96b8c$export$adb4a1754da6f10d as ServerMessageType };","map":{"version":3,"names":["$fcbcc7538a6776d5$export$f1c5f4c9cb95390b","chunkedMTU","_dataCount","chunk","blob","chunks","size","byteLength","total","Math","ceil","index","start","end","min","b","slice","__peerData","n","data","push","$fcbcc7538a6776d5$export$52c89ebcdc4f53f2","bufs","buf","result","Uint8Array","offset","set","$fb63e766cfafaab9$var$webRTCAdapter","$gCcbY$webrtcadapter","default","$fb63e766cfafaab9$export$25be9502477c137d","isWebRTCSupported","RTCPeerConnection","isBrowserSupported","browser","getBrowser","version","getVersion","validBrowser","supportedBrowsers","includes","minChromeVersion","minFirefoxVersion","isIOS","minSafariVersion","browserDetails","isUnifiedPlanSupported","window","RTCRtpTransceiver","prototype","tempPc","supported","addTransceiver","e","close","toString","navigator","platform","$9a84a32bf0bf36bb$export$f35f128fd59ea256","id","test","$0e5fd1585784c252$export$4e61f672936bec77","random","$4f4134156c446392$var$DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","$4f4134156c446392$export$f8f26dd395d7e1bd","noop","blobToArrayBuffer","cb","fr","FileReader","onload","evt","target","readAsArrayBuffer","binaryStringToArrayBuffer","binary","byteArray","length","i","charCodeAt","buffer","isSecure","location","protocol","CLOUD_HOST","CLOUD_PORT","chunkedBrowsers","Chrome","chrome","defaultConfig","browserVersion","pack","$gCcbY$pack","unpack","$gCcbY$unpack","supports","webRTC","audioVideo","binaryBlob","reliable","pc","dc","createDataChannel","ordered","binaryType","validateId","randomToken","$4f4134156c446392$export$7debb50ef11d5e0b","$257947e92926277a$var$LOG_PREFIX","$257947e92926277a$export$243e62d78d3b544d","LogLevel","$257947e92926277a$var$Logger","logLevel","_logLevel","log","args","All","_print","warn","Warnings","error","Errors","setLogFunction","fn","rest","copy","Error","name","message","console","Disabled","$257947e92926277a$export$2e2bcd8739ae039","$c4dcfd1d1ea86647$var$has","Object","hasOwnProperty","$c4dcfd1d1ea86647$var$prefix","$c4dcfd1d1ea86647$var$Events","create","__proto__","$c4dcfd1d1ea86647$var$EE","context","once","$c4dcfd1d1ea86647$var$addListener","emitter","event","TypeError","listener","_events","_eventsCount","$c4dcfd1d1ea86647$var$clearEvent","$c4dcfd1d1ea86647$var$EventEmitter","eventNames","names","events","call","getOwnPropertySymbols","concat","listeners","handlers","l","ee","Array","listenerCount","emit","a1","a2","a3","a4","a5","len","arguments","removeListener","undefined","apply","j","on","removeAllListeners","off","addListener","prefixed","EventEmitter","$c4dcfd1d1ea86647$exports","$78455e22dea96b8c$export$3157d57b4135e3bc","ConnectionType","$78455e22dea96b8c$export$9547aaa2e39030ff","PeerErrorType","$78455e22dea96b8c$export$7974935686149686","BaseConnectionErrorType","$78455e22dea96b8c$export$49ae800c114df41d","DataConnectionErrorType","$78455e22dea96b8c$export$89f507cf986a947","SerializationType","$78455e22dea96b8c$export$3b5c4a4b6354f023","SocketEventType","$78455e22dea96b8c$export$adb4a1754da6f10d","ServerMessageType","$f5f881ec4575f1fc$exports","JSON","parse","$8f5bfa60836d261d$export$4798917dbf149b79","constructor","secure","host","port","path","key","pingInterval","_disconnected","_messagesQueue","wsProtocol","_baseUrl","token","_id","wsUrl","_socket","WebSocket","onmessage","Message","onclose","_cleanup","Disconnected","onopen","_sendQueuedMessages","_scheduleHeartbeat","_wsPingTimer","setTimeout","_sendHeartbeat","_wsOpen","stringify","type","Heartbeat","send","readyState","copiedQueue","clearTimeout","$b82fb8fc0514bfc1$export$89e6bb5ad64bf4a","connection","startConnection","options","peerConnection","_startPeerConnection","Media","_stream","_addTracksToConnection","originator","dataConnection","config","dataChannel","label","_initializeDataChannel","_makeOffer","handleSDP","sdp","provider","_setupListeners","peerId","peer","connectionId","connectionType","onicecandidate","candidate","socket","Candidate","payload","dst","oniceconnectionstatechange","iceConnectionState","emitError","NegotiationFailed","ConnectionClosed","ondatachannel","channel","getConnection","ontrack","stream","streams","mediaConnection","_addStreamToMediaConnection","cleanup","peerConnectionNotClosed","signalingState","dataChannelNotClosed","offer","createOffer","constraints","sdpTransform","setLocalDescription","metadata","Data","serialization","Offer","err","WebRTC","err_1","_makeAnswer","answer","createAnswer","Answer","RTCSessionDescription","self","setRemoteDescription","handleCandidate","ice","addIceCandidate","addTrack","getTracks","forEach","track","addStream","$23779d1881157a18$export$6a678e589c8a4542","$23779d1881157a18$export$98871882f492de82","assign","$5045192fc6d387ba$export$23a2a68283c24d80","open","_open","$5c1d08c7c57da9a3$export$4a84e95a2324ac29","ID_PREFIX","localStream","_localStream","remoteStream","_remoteStream","_negotiator","handleMessage","_payload","messages","_getMessages","_removeConnection","$abf266641927cd89$export$2c4e825dc9120f87","_options","_buildRequest","method","url","URL","searchParams","Date","now","fetch","href","referrerPolicy","retrieveId","response","status","text","pathError","listAllPeers","helpfulError","json","$6366c4ca161bc297$export$d365f7ad9d7df9c9","MAX_BUFFERED_AMOUNT","flush","chunked","NotOpenYet","_send","$a229bedbcaa6ca23$export$ff7c9d4c11d94e8b","bufferSize","_bufferSize","addEventListener","_handleDataMessage","_bufferedSend","msg","_buffering","_trySend","_buffer","bufferedAmount","_tryBuffer","shift","$9fcfddb3ae148f88$export$f0a5a64d5bb37108","_chunkedData","chunker","Binary","deserializedData","peerData","_handleChunk","chunkInfo","count","Blob","arrayBuffer","then","_sendChunks","blobs","$bbaee3f15f714663$export$6f88fe47d32c9c94","_chunked","None","$817f931e3f9096cf$export$48880ac635f47186","decoder","decode","encodedData","encoder","encode","MessageToBig","TextEncoder","TextDecoder","$416260bce337df90$var$PeerOptions","$416260bce337df90$export$ecd1fc136c422448","DEFAULT_KEY","connections","plainConnections","k","v","_connections","destroyed","_destroyed","disconnected","_serializers","raw","_lastServerId","Map","_lostMessages","userId","debug","serializers","hostname","logFunction","_api","_createServerConnection","_delayedAbort","BrowserIncompatible","InvalidID","_initialize","catch","_abort","ServerError","_handleMessage","SocketError","Network","disconnect","Close","SocketClosed","src","Open","IdTaken","UnavailableID","InvalidKey","Leave","_cleanupPeer","delete","Expire","PeerUnavailable","_addConnection","_storeMessage","has","get","connect","indexOf","splice","destroy","keys","currentId","reconnect","_","peers","$20dbe68149d7aad9$export$72aa44612e2200cd","_CHUNK_SIZE","_splitStream","TransformStream","transform","controller","split","enqueue","subarray","_rawSendStream","WritableStream","write","openEvent","Promise","resolve","writer","writable","getWriter","_rawReadStream","ReadableStream","readable","pipeTo","bufferedAmountLowThreshold","$dcf98445f54823f4$var$NullValue","Symbol","for","$dcf98445f54823f4$var$concatUint8Array","buffer1","buffer2","tmp","$dcf98445f54823f4$var$iterateOver","reader","getReader","done","value","read","releaseLock","$dcf98445f54823f4$export$7e9583c3c8a0a2cc","_encoder","$gCcbY$Encoder","_decoder","$gCcbY$Decoder","_decoderStream","abchunk","_inc","values","decodeMultiple","incomplete","lastPosition","$3849fc09dd8f140b$export$f6a74c7ffa2903e6","$6e39230ab36396ad$export$80f5de1a66c4d624","$gCcbY$Encoder1","$gCcbY$decodeMultiStream","$1e0aff16be2c328e$export$d72c7bf8eef50853","$dd0187d7f28e386f$export$2e2bcd8739ae039"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\exports.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\util.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\BufferedConnection\\binaryPackChunker.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\supports.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\utils\\validateId.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\utils\\randomToken.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\peer.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\logger.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\socket.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\node_modules\\eventemitter3\\index.js","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\enums.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\package.json","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\mediaconnection.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\negotiator.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\baseconnection.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\peerError.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\api.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\BufferedConnection\\BinaryPack.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\BufferedConnection\\BufferedConnection.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\DataConnection.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\BufferedConnection\\Raw.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\BufferedConnection\\Json.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\cborPeer.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\StreamConnection\\Cbor.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\StreamConnection\\StreamConnection.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\msgPackPeer.ts","C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\peerjs\\dist\\lib\\dataconnection\\StreamConnection\\MsgPack.ts"],"sourcesContent":["export { util, type Util } from \"./util\";\nimport { Peer } from \"./peer\";\nimport { CborPeer } from \"./cborPeer\";\nimport { MsgPackPeer } from \"./msgPackPeer\";\n\nexport type { PeerEvents, PeerOptions } from \"./peer\";\n\nexport type {\n\tPeerJSOption,\n\tPeerConnectOption,\n\tAnswerOption,\n\tCallOption,\n} from \"./optionInterfaces\";\nexport type { UtilSupportsObj } from \"./util\";\nexport type { DataConnection } from \"./dataconnection/DataConnection\";\nexport type { MediaConnection } from \"./mediaconnection\";\nexport type { LogLevel } from \"./logger\";\nexport * from \"./enums\";\n\nexport { BufferedConnection } from \"./dataconnection/BufferedConnection/BufferedConnection\";\nexport { StreamConnection } from \"./dataconnection/StreamConnection/StreamConnection\";\nexport { Cbor } from \"./dataconnection/StreamConnection/Cbor\";\nexport { MsgPack } from \"./dataconnection/StreamConnection/MsgPack\";\nexport type { SerializerMapping } from \"./peer\";\n\nexport { Peer, MsgPackPeer, CborPeer };\n\nexport { PeerError } from \"./peerError\";\nexport default Peer;\n","import { BinaryPackChunker } from \"./dataconnection/BufferedConnection/binaryPackChunker\";\nimport * as BinaryPack from \"peerjs-js-binarypack\";\nimport { Supports } from \"./supports\";\nimport { validateId } from \"./utils/validateId\";\nimport { randomToken } from \"./utils/randomToken\";\n\nexport interface UtilSupportsObj {\n\t/**\n\t * The current browser.\n\t * This property can be useful in determining whether two peers can connect.\n\t *\n\t * ```ts\n\t * if (util.browser === 'firefox') {\n\t *  // OK to peer with Firefox peers.\n\t * }\n\t * ```\n\t *\n\t * `util.browser` can currently have the values\n\t * `'firefox', 'chrome', 'safari', 'edge', 'Not a supported browser.', 'Not a browser.' (unknown WebRTC-compatible agent).\n\t */\n\tbrowser: boolean;\n\twebRTC: boolean;\n\t/**\n\t * True if the current browser supports media streams and PeerConnection.\n\t */\n\taudioVideo: boolean;\n\t/**\n\t * True if the current browser supports DataChannel and PeerConnection.\n\t */\n\tdata: boolean;\n\tbinaryBlob: boolean;\n\t/**\n\t * True if the current browser supports reliable DataChannels.\n\t */\n\treliable: boolean;\n}\n\nconst DEFAULT_CONFIG = {\n\ticeServers: [\n\t\t{ urls: \"stun:stun.l.google.com:19302\" },\n\t\t{\n\t\t\turls: [\n\t\t\t\t\"turn:eu-0.turn.peerjs.com:3478\",\n\t\t\t\t\"turn:us-0.turn.peerjs.com:3478\",\n\t\t\t],\n\t\t\tusername: \"peerjs\",\n\t\t\tcredential: \"peerjsp\",\n\t\t},\n\t],\n\tsdpSemantics: \"unified-plan\",\n};\n\nexport class Util extends BinaryPackChunker {\n\tnoop(): void {}\n\n\treadonly CLOUD_HOST = \"0.peerjs.com\";\n\treadonly CLOUD_PORT = 443;\n\n\t// Browsers that need chunking:\n\treadonly chunkedBrowsers = { Chrome: 1, chrome: 1 };\n\n\t// Returns browser-agnostic default config\n\treadonly defaultConfig = DEFAULT_CONFIG;\n\n\treadonly browser = Supports.getBrowser();\n\treadonly browserVersion = Supports.getVersion();\n\n\tpack = BinaryPack.pack;\n\tunpack = BinaryPack.unpack;\n\n\t/**\n\t * A hash of WebRTC features mapped to booleans that correspond to whether the feature is supported by the current browser.\n\t *\n\t * :::caution\n\t * Only the properties documented here are guaranteed to be present on `util.supports`\n\t * :::\n\t */\n\treadonly supports = (function () {\n\t\tconst supported: UtilSupportsObj = {\n\t\t\tbrowser: Supports.isBrowserSupported(),\n\t\t\twebRTC: Supports.isWebRTCSupported(),\n\t\t\taudioVideo: false,\n\t\t\tdata: false,\n\t\t\tbinaryBlob: false,\n\t\t\treliable: false,\n\t\t};\n\n\t\tif (!supported.webRTC) return supported;\n\n\t\tlet pc: RTCPeerConnection;\n\n\t\ttry {\n\t\t\tpc = new RTCPeerConnection(DEFAULT_CONFIG);\n\n\t\t\tsupported.audioVideo = true;\n\n\t\t\tlet dc: RTCDataChannel;\n\n\t\t\ttry {\n\t\t\t\tdc = pc.createDataChannel(\"_PEERJSTEST\", { ordered: true });\n\t\t\t\tsupported.data = true;\n\t\t\t\tsupported.reliable = !!dc.ordered;\n\n\t\t\t\t// Binary test\n\t\t\t\ttry {\n\t\t\t\t\tdc.binaryType = \"blob\";\n\t\t\t\t\tsupported.binaryBlob = !Supports.isIOS;\n\t\t\t\t} catch (e) {}\n\t\t\t} catch (e) {\n\t\t\t} finally {\n\t\t\t\tif (dc) {\n\t\t\t\t\tdc.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t} finally {\n\t\t\tif (pc) {\n\t\t\t\tpc.close();\n\t\t\t}\n\t\t}\n\n\t\treturn supported;\n\t})();\n\n\t// Ensure alphanumeric ids\n\tvalidateId = validateId;\n\trandomToken = randomToken;\n\n\tblobToArrayBuffer(\n\t\tblob: Blob,\n\t\tcb: (arg: ArrayBuffer | null) => void,\n\t): FileReader {\n\t\tconst fr = new FileReader();\n\n\t\tfr.onload = function (evt) {\n\t\t\tif (evt.target) {\n\t\t\t\tcb(evt.target.result as ArrayBuffer);\n\t\t\t}\n\t\t};\n\n\t\tfr.readAsArrayBuffer(blob);\n\n\t\treturn fr;\n\t}\n\n\tbinaryStringToArrayBuffer(binary: string): ArrayBuffer | SharedArrayBuffer {\n\t\tconst byteArray = new Uint8Array(binary.length);\n\n\t\tfor (let i = 0; i < binary.length; i++) {\n\t\t\tbyteArray[i] = binary.charCodeAt(i) & 0xff;\n\t\t}\n\n\t\treturn byteArray.buffer;\n\t}\n\tisSecure(): boolean {\n\t\treturn location.protocol === \"https:\";\n\t}\n}\n\n/**\n * Provides a variety of helpful utilities.\n *\n * :::caution\n * Only the utilities documented here are guaranteed to be present on `util`.\n * Undocumented utilities can be removed without warning.\n * We don't consider these to be breaking changes.\n * :::\n */\nexport const util = new Util();\n","export class BinaryPackChunker {\n\treadonly chunkedMTU = 16300; // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n\n\t// Binary stuff\n\n\tprivate _dataCount: number = 1;\n\n\tchunk = (\n\t\tblob: ArrayBuffer,\n\t): { __peerData: number; n: number; total: number; data: Uint8Array }[] => {\n\t\tconst chunks = [];\n\t\tconst size = blob.byteLength;\n\t\tconst total = Math.ceil(size / this.chunkedMTU);\n\n\t\tlet index = 0;\n\t\tlet start = 0;\n\n\t\twhile (start < size) {\n\t\t\tconst end = Math.min(size, start + this.chunkedMTU);\n\t\t\tconst b = blob.slice(start, end);\n\n\t\t\tconst chunk = {\n\t\t\t\t__peerData: this._dataCount,\n\t\t\t\tn: index,\n\t\t\t\tdata: b,\n\t\t\t\ttotal,\n\t\t\t};\n\n\t\t\tchunks.push(chunk);\n\n\t\t\tstart = end;\n\t\t\tindex++;\n\t\t}\n\n\t\tthis._dataCount++;\n\n\t\treturn chunks;\n\t};\n}\n\nexport function concatArrayBuffers(bufs: Uint8Array[]) {\n\tlet size = 0;\n\tfor (const buf of bufs) {\n\t\tsize += buf.byteLength;\n\t}\n\tconst result = new Uint8Array(size);\n\tlet offset = 0;\n\tfor (const buf of bufs) {\n\t\tresult.set(buf, offset);\n\t\toffset += buf.byteLength;\n\t}\n\treturn result;\n}\n","import webRTCAdapter_import from \"webrtc-adapter\";\n\nconst webRTCAdapter: typeof webRTCAdapter_import =\n\t//@ts-ignore\n\twebRTCAdapter_import.default || webRTCAdapter_import;\n\nexport const Supports = new (class {\n\treadonly isIOS = [\"iPad\", \"iPhone\", \"iPod\"].includes(navigator.platform);\n\treadonly supportedBrowsers = [\"firefox\", \"chrome\", \"safari\"];\n\n\treadonly minFirefoxVersion = 59;\n\treadonly minChromeVersion = 72;\n\treadonly minSafariVersion = 605;\n\n\tisWebRTCSupported(): boolean {\n\t\treturn typeof RTCPeerConnection !== \"undefined\";\n\t}\n\n\tisBrowserSupported(): boolean {\n\t\tconst browser = this.getBrowser();\n\t\tconst version = this.getVersion();\n\n\t\tconst validBrowser = this.supportedBrowsers.includes(browser);\n\n\t\tif (!validBrowser) return false;\n\n\t\tif (browser === \"chrome\") return version >= this.minChromeVersion;\n\t\tif (browser === \"firefox\") return version >= this.minFirefoxVersion;\n\t\tif (browser === \"safari\")\n\t\t\treturn !this.isIOS && version >= this.minSafariVersion;\n\n\t\treturn false;\n\t}\n\n\tgetBrowser(): string {\n\t\treturn webRTCAdapter.browserDetails.browser;\n\t}\n\n\tgetVersion(): number {\n\t\treturn webRTCAdapter.browserDetails.version || 0;\n\t}\n\n\tisUnifiedPlanSupported(): boolean {\n\t\tconst browser = this.getBrowser();\n\t\tconst version = webRTCAdapter.browserDetails.version || 0;\n\n\t\tif (browser === \"chrome\" && version < this.minChromeVersion) return false;\n\t\tif (browser === \"firefox\" && version >= this.minFirefoxVersion) return true;\n\t\tif (\n\t\t\t!window.RTCRtpTransceiver ||\n\t\t\t!(\"currentDirection\" in RTCRtpTransceiver.prototype)\n\t\t)\n\t\t\treturn false;\n\n\t\tlet tempPc: RTCPeerConnection;\n\t\tlet supported = false;\n\n\t\ttry {\n\t\t\ttempPc = new RTCPeerConnection();\n\t\t\ttempPc.addTransceiver(\"audio\");\n\t\t\tsupported = true;\n\t\t} catch (e) {\n\t\t} finally {\n\t\t\tif (tempPc) {\n\t\t\t\ttempPc.close();\n\t\t\t}\n\t\t}\n\n\t\treturn supported;\n\t}\n\n\ttoString(): string {\n\t\treturn `Supports:\n    browser:${this.getBrowser()}\n    version:${this.getVersion()}\n    isIOS:${this.isIOS}\n    isWebRTCSupported:${this.isWebRTCSupported()}\n    isBrowserSupported:${this.isBrowserSupported()}\n    isUnifiedPlanSupported:${this.isUnifiedPlanSupported()}`;\n\t}\n})();\n","export const validateId = (id: string): boolean => {\n\t// Allow empty ids\n\treturn !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);\n};\n","export const randomToken = () => Math.random().toString(36).slice(2);\n","import { util } from \"./util\";\nimport logger, { LogLevel } from \"./logger\";\nimport { Socket } from \"./socket\";\nimport { MediaConnection } from \"./mediaconnection\";\nimport type { DataConnection } from \"./dataconnection/DataConnection\";\nimport {\n\tConnectionType,\n\tPeerErrorType,\n\tServerMessageType,\n\tSocketEventType,\n} from \"./enums\";\nimport type { ServerMessage } from \"./servermessage\";\nimport { API } from \"./api\";\nimport type {\n\tCallOption,\n\tPeerConnectOption,\n\tPeerJSOption,\n} from \"./optionInterfaces\";\nimport { BinaryPack } from \"./dataconnection/BufferedConnection/BinaryPack\";\nimport { Raw } from \"./dataconnection/BufferedConnection/Raw\";\nimport { Json } from \"./dataconnection/BufferedConnection/Json\";\n\nimport { EventEmitterWithError, PeerError } from \"./peerError\";\n\nclass PeerOptions implements PeerJSOption {\n\t/**\n\t * Prints log messages depending on the debug level passed in.\n\t */\n\tdebug?: LogLevel;\n\t/**\n\t * Server host. Defaults to `0.peerjs.com`.\n\t * Also accepts `'/'` to signify relative hostname.\n\t */\n\thost?: string;\n\t/**\n\t * Server port. Defaults to `443`.\n\t */\n\tport?: number;\n\t/**\n\t * The path where your self-hosted PeerServer is running. Defaults to `'/'`\n\t */\n\tpath?: string;\n\t/**\n\t * API key for the PeerServer.\n\t * This is not used anymore.\n\t * @deprecated\n\t */\n\tkey?: string;\n\ttoken?: string;\n\t/**\n\t * Configuration hash passed to RTCPeerConnection.\n\t * This hash contains any custom ICE/TURN server configuration.\n\t *\n\t * Defaults to {@apilink util.defaultConfig}\n\t */\n\tconfig?: any;\n\t/**\n\t * Set to true `true` if you're using TLS.\n\t * :::danger\n\t * If possible *always use TLS*\n\t * :::\n\t */\n\tsecure?: boolean;\n\tpingInterval?: number;\n\treferrerPolicy?: ReferrerPolicy;\n\tlogFunction?: (logLevel: LogLevel, ...rest: any[]) => void;\n\tserializers?: SerializerMapping;\n}\n\nexport { type PeerOptions };\n\nexport interface SerializerMapping {\n\t[key: string]: new (\n\t\tpeerId: string,\n\t\tprovider: Peer,\n\t\toptions: any,\n\t) => DataConnection;\n}\n\nexport interface PeerEvents {\n\t/**\n\t * Emitted when a connection to the PeerServer is established.\n\t *\n\t * You may use the peer before this is emitted, but messages to the server will be queued. <code>id</code> is the brokering ID of the peer (which was either provided in the constructor or assigned by the server).<span class='tip'>You should not wait for this event before connecting to other peers if connection speed is important.</span>\n\t */\n\topen: (id: string) => void;\n\t/**\n\t * Emitted when a new data connection is established from a remote peer.\n\t */\n\tconnection: (dataConnection: DataConnection) => void;\n\t/**\n\t * Emitted when a remote peer attempts to call you.\n\t */\n\tcall: (mediaConnection: MediaConnection) => void;\n\t/**\n\t * Emitted when the peer is destroyed and can no longer accept or create any new connections.\n\t */\n\tclose: () => void;\n\t/**\n\t * Emitted when the peer is disconnected from the signalling server\n\t */\n\tdisconnected: (currentId: string) => void;\n\t/**\n\t * Errors on the peer are almost always fatal and will destroy the peer.\n\t *\n\t * Errors from the underlying socket and PeerConnections are forwarded here.\n\t */\n\terror: (error: PeerError<`${PeerErrorType}`>) => void;\n}\n/**\n * A peer who can initiate connections with other peers.\n */\nexport class Peer extends EventEmitterWithError<PeerErrorType, PeerEvents> {\n\tprivate static readonly DEFAULT_KEY = \"peerjs\";\n\n\tprotected readonly _serializers: SerializerMapping = {\n\t\traw: Raw,\n\t\tjson: Json,\n\t\tbinary: BinaryPack,\n\t\t\"binary-utf8\": BinaryPack,\n\n\t\tdefault: BinaryPack,\n\t};\n\tprivate readonly _options: PeerOptions;\n\tprivate readonly _api: API;\n\tprivate readonly _socket: Socket;\n\n\tprivate _id: string | null = null;\n\tprivate _lastServerId: string | null = null;\n\n\t// States.\n\tprivate _destroyed = false; // Connections have been killed\n\tprivate _disconnected = false; // Connection to PeerServer killed but P2P connections still active\n\tprivate _open = false; // Sockets and such are not yet open.\n\tprivate readonly _connections: Map<\n\t\tstring,\n\t\t(DataConnection | MediaConnection)[]\n\t> = new Map(); // All connections for this peer.\n\tprivate readonly _lostMessages: Map<string, ServerMessage[]> = new Map(); // src => [list of messages]\n\t/**\n\t * The brokering ID of this peer\n\t *\n\t * If no ID was specified in {@apilink Peer | the constructor},\n\t * this will be `undefined` until the {@apilink PeerEvents | `open`} event is emitted.\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget options() {\n\t\treturn this._options;\n\t}\n\n\tget open() {\n\t\treturn this._open;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tget socket() {\n\t\treturn this._socket;\n\t}\n\n\t/**\n\t * A hash of all connections associated with this peer, keyed by the remote peer's ID.\n\t * @deprecated\n\t * Return type will change from Object to Map<string,[]>\n\t */\n\tget connections(): Object {\n\t\tconst plainConnections = Object.create(null);\n\n\t\tfor (const [k, v] of this._connections) {\n\t\t\tplainConnections[k] = v;\n\t\t}\n\n\t\treturn plainConnections;\n\t}\n\n\t/**\n\t * true if this peer and all of its connections can no longer be used.\n\t */\n\tget destroyed() {\n\t\treturn this._destroyed;\n\t}\n\t/**\n\t * false if there is an active connection to the PeerServer.\n\t */\n\tget disconnected() {\n\t\treturn this._disconnected;\n\t}\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t */\n\tconstructor();\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t * @param options for specifying details about PeerServer\n\t */\n\tconstructor(options: PeerOptions);\n\n\t/**\n\t * A peer can connect to other peers and listen for connections.\n\t * @param id Other peers can connect to this peer using the provided ID.\n\t *     If no ID is given, one will be generated by the brokering server.\n\t * The ID must start and end with an alphanumeric character (lower or upper case character or a digit). In the middle of the ID spaces, dashes (-) and underscores (_) are allowed. Use {@apilink PeerOptions.metadata } to send identifying information.\n\t * @param options for specifying details about PeerServer\n\t */\n\tconstructor(id: string, options?: PeerOptions);\n\n\tconstructor(id?: string | PeerOptions, options?: PeerOptions) {\n\t\tsuper();\n\n\t\tlet userId: string | undefined;\n\n\t\t// Deal with overloading\n\t\tif (id && id.constructor == Object) {\n\t\t\toptions = id as PeerOptions;\n\t\t} else if (id) {\n\t\t\tuserId = id.toString();\n\t\t}\n\n\t\t// Configurize options\n\t\toptions = {\n\t\t\tdebug: 0, // 1: Errors, 2: Warnings, 3: All logs\n\t\t\thost: util.CLOUD_HOST,\n\t\t\tport: util.CLOUD_PORT,\n\t\t\tpath: \"/\",\n\t\t\tkey: Peer.DEFAULT_KEY,\n\t\t\ttoken: util.randomToken(),\n\t\t\tconfig: util.defaultConfig,\n\t\t\treferrerPolicy: \"strict-origin-when-cross-origin\",\n\t\t\tserializers: {},\n\t\t\t...options,\n\t\t};\n\t\tthis._options = options;\n\t\tthis._serializers = { ...this._serializers, ...this.options.serializers };\n\n\t\t// Detect relative URL host.\n\t\tif (this._options.host === \"/\") {\n\t\t\tthis._options.host = window.location.hostname;\n\t\t}\n\n\t\t// Set path correctly.\n\t\tif (this._options.path) {\n\t\t\tif (this._options.path[0] !== \"/\") {\n\t\t\t\tthis._options.path = \"/\" + this._options.path;\n\t\t\t}\n\t\t\tif (this._options.path[this._options.path.length - 1] !== \"/\") {\n\t\t\t\tthis._options.path += \"/\";\n\t\t\t}\n\t\t}\n\n\t\t// Set whether we use SSL to same as current host\n\t\tif (\n\t\t\tthis._options.secure === undefined &&\n\t\t\tthis._options.host !== util.CLOUD_HOST\n\t\t) {\n\t\t\tthis._options.secure = util.isSecure();\n\t\t} else if (this._options.host == util.CLOUD_HOST) {\n\t\t\tthis._options.secure = true;\n\t\t}\n\t\t// Set a custom log function if present\n\t\tif (this._options.logFunction) {\n\t\t\tlogger.setLogFunction(this._options.logFunction);\n\t\t}\n\n\t\tlogger.logLevel = this._options.debug || 0;\n\n\t\tthis._api = new API(options);\n\t\tthis._socket = this._createServerConnection();\n\n\t\t// Sanity checks\n\t\t// Ensure WebRTC supported\n\t\tif (!util.supports.audioVideo && !util.supports.data) {\n\t\t\tthis._delayedAbort(\n\t\t\t\tPeerErrorType.BrowserIncompatible,\n\t\t\t\t\"The current browser does not support WebRTC\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure alphanumeric id\n\t\tif (!!userId && !util.validateId(userId)) {\n\t\t\tthis._delayedAbort(PeerErrorType.InvalidID, `ID \"${userId}\" is invalid`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (userId) {\n\t\t\tthis._initialize(userId);\n\t\t} else {\n\t\t\tthis._api\n\t\t\t\t.retrieveId()\n\t\t\t\t.then((id) => this._initialize(id))\n\t\t\t\t.catch((error) => this._abort(PeerErrorType.ServerError, error));\n\t\t}\n\t}\n\n\tprivate _createServerConnection(): Socket {\n\t\tconst socket = new Socket(\n\t\t\tthis._options.secure,\n\t\t\tthis._options.host!,\n\t\t\tthis._options.port!,\n\t\t\tthis._options.path!,\n\t\t\tthis._options.key!,\n\t\t\tthis._options.pingInterval,\n\t\t);\n\n\t\tsocket.on(SocketEventType.Message, (data: ServerMessage) => {\n\t\t\tthis._handleMessage(data);\n\t\t});\n\n\t\tsocket.on(SocketEventType.Error, (error: string) => {\n\t\t\tthis._abort(PeerErrorType.SocketError, error);\n\t\t});\n\n\t\tsocket.on(SocketEventType.Disconnected, () => {\n\t\t\tif (this.disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.emitError(PeerErrorType.Network, \"Lost connection to server.\");\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tsocket.on(SocketEventType.Close, () => {\n\t\t\tif (this.disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._abort(\n\t\t\t\tPeerErrorType.SocketClosed,\n\t\t\t\t\"Underlying socket is already closed.\",\n\t\t\t);\n\t\t});\n\n\t\treturn socket;\n\t}\n\n\t/** Initialize a connection with the server. */\n\tprivate _initialize(id: string): void {\n\t\tthis._id = id;\n\t\tthis.socket.start(id, this._options.token!);\n\t}\n\n\t/** Handles messages from the server. */\n\tprivate _handleMessage(message: ServerMessage): void {\n\t\tconst type = message.type;\n\t\tconst payload = message.payload;\n\t\tconst peerId = message.src;\n\n\t\tswitch (type) {\n\t\t\tcase ServerMessageType.Open: // The connection to the server is open.\n\t\t\t\tthis._lastServerId = this.id;\n\t\t\t\tthis._open = true;\n\t\t\t\tthis.emit(\"open\", this.id);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Error: // Server error.\n\t\t\t\tthis._abort(PeerErrorType.ServerError, payload.msg);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.IdTaken: // The selected ID is taken.\n\t\t\t\tthis._abort(PeerErrorType.UnavailableID, `ID \"${this.id}\" is taken`);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.InvalidKey: // The given API key cannot be found.\n\t\t\t\tthis._abort(\n\t\t\t\t\tPeerErrorType.InvalidKey,\n\t\t\t\t\t`API KEY \"${this._options.key}\" is invalid`,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Leave: // Another peer has closed its connection to this peer.\n\t\t\t\tlogger.log(`Received leave message from ${peerId}`);\n\t\t\t\tthis._cleanupPeer(peerId);\n\t\t\t\tthis._connections.delete(peerId);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Expire: // The offer sent to a peer has expired without response.\n\t\t\t\tthis.emitError(\n\t\t\t\t\tPeerErrorType.PeerUnavailable,\n\t\t\t\t\t`Could not connect to peer ${peerId}`,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Offer: {\n\t\t\t\t// we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n\t\t\t\tconst connectionId = payload.connectionId;\n\t\t\t\tlet connection = this.getConnection(peerId, connectionId);\n\n\t\t\t\tif (connection) {\n\t\t\t\t\tconnection.close();\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`Offer received for existing Connection ID:${connectionId}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Create a new connection.\n\t\t\t\tif (payload.type === ConnectionType.Media) {\n\t\t\t\t\tconst mediaConnection = new MediaConnection(peerId, this, {\n\t\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t\t\t_payload: payload,\n\t\t\t\t\t\tmetadata: payload.metadata,\n\t\t\t\t\t});\n\t\t\t\t\tconnection = mediaConnection;\n\t\t\t\t\tthis._addConnection(peerId, connection);\n\t\t\t\t\tthis.emit(\"call\", mediaConnection);\n\t\t\t\t} else if (payload.type === ConnectionType.Data) {\n\t\t\t\t\tconst dataConnection = new this._serializers[payload.serialization](\n\t\t\t\t\t\tpeerId,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t\t\t\t_payload: payload,\n\t\t\t\t\t\t\tmetadata: payload.metadata,\n\t\t\t\t\t\t\tlabel: payload.label,\n\t\t\t\t\t\t\tserialization: payload.serialization,\n\t\t\t\t\t\t\treliable: payload.reliable,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tconnection = dataConnection;\n\n\t\t\t\t\tthis._addConnection(peerId, connection);\n\t\t\t\t\tthis.emit(\"connection\", dataConnection);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(`Received malformed connection type:${payload.type}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Find messages.\n\t\t\t\tconst messages = this._getMessages(connectionId);\n\t\t\t\tfor (const message of messages) {\n\t\t\t\t\tconnection.handleMessage(message);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tif (!payload) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`You received a malformed message from ${peerId} of type ${type}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst connectionId = payload.connectionId;\n\t\t\t\tconst connection = this.getConnection(peerId, connectionId);\n\n\t\t\t\tif (connection && connection.peerConnection) {\n\t\t\t\t\t// Pass it on.\n\t\t\t\t\tconnection.handleMessage(message);\n\t\t\t\t} else if (connectionId) {\n\t\t\t\t\t// Store for possible later use\n\t\t\t\t\tthis._storeMessage(connectionId, message);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"You received an unrecognized message:\", message);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Stores messages without a set up connection, to be claimed later. */\n\tprivate _storeMessage(connectionId: string, message: ServerMessage): void {\n\t\tif (!this._lostMessages.has(connectionId)) {\n\t\t\tthis._lostMessages.set(connectionId, []);\n\t\t}\n\n\t\tthis._lostMessages.get(connectionId).push(message);\n\t}\n\n\t/**\n\t * Retrieve messages from lost message store\n\t * @internal\n\t */\n\t//TODO Change it to private\n\tpublic _getMessages(connectionId: string): ServerMessage[] {\n\t\tconst messages = this._lostMessages.get(connectionId);\n\n\t\tif (messages) {\n\t\t\tthis._lostMessages.delete(connectionId);\n\t\t\treturn messages;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Connects to the remote peer specified by id and returns a data connection.\n\t * @param peer The brokering ID of the remote peer (their {@apilink Peer.id}).\n\t * @param options for specifying details about Peer Connection\n\t */\n\tconnect(peer: string, options: PeerConnectOption = {}): DataConnection {\n\t\toptions = {\n\t\t\tserialization: \"default\",\n\t\t\t...options,\n\t\t};\n\t\tif (this.disconnected) {\n\t\t\tlogger.warn(\n\t\t\t\t\"You cannot connect to a new Peer because you called \" +\n\t\t\t\t\t\".disconnect() on this Peer and ended your connection with the \" +\n\t\t\t\t\t\"server. You can create a new Peer to reconnect, or call reconnect \" +\n\t\t\t\t\t\"on this peer if you believe its ID to still be available.\",\n\t\t\t);\n\t\t\tthis.emitError(\n\t\t\t\tPeerErrorType.Disconnected,\n\t\t\t\t\"Cannot connect to new Peer after disconnecting from server.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataConnection = new this._serializers[options.serialization](\n\t\t\tpeer,\n\t\t\tthis,\n\t\t\toptions,\n\t\t);\n\t\tthis._addConnection(peer, dataConnection);\n\t\treturn dataConnection;\n\t}\n\n\t/**\n\t * Calls the remote peer specified by id and returns a media connection.\n\t * @param peer The brokering ID of the remote peer (their peer.id).\n\t * @param stream The caller's media stream\n\t * @param options Metadata associated with the connection, passed in by whoever initiated the connection.\n\t */\n\tcall(\n\t\tpeer: string,\n\t\tstream: MediaStream,\n\t\toptions: CallOption = {},\n\t): MediaConnection {\n\t\tif (this.disconnected) {\n\t\t\tlogger.warn(\n\t\t\t\t\"You cannot connect to a new Peer because you called \" +\n\t\t\t\t\t\".disconnect() on this Peer and ended your connection with the \" +\n\t\t\t\t\t\"server. You can create a new Peer to reconnect.\",\n\t\t\t);\n\t\t\tthis.emitError(\n\t\t\t\tPeerErrorType.Disconnected,\n\t\t\t\t\"Cannot connect to new Peer after disconnecting from server.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!stream) {\n\t\t\tlogger.error(\n\t\t\t\t\"To call a peer, you must provide a stream from your browser's `getUserMedia`.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaConnection = new MediaConnection(peer, this, {\n\t\t\t...options,\n\t\t\t_stream: stream,\n\t\t});\n\t\tthis._addConnection(peer, mediaConnection);\n\t\treturn mediaConnection;\n\t}\n\n\t/** Add a data/media connection to this peer. */\n\tprivate _addConnection(\n\t\tpeerId: string,\n\t\tconnection: MediaConnection | DataConnection,\n\t): void {\n\t\tlogger.log(\n\t\t\t`add connection ${connection.type}:${connection.connectionId} to peerId:${peerId}`,\n\t\t);\n\n\t\tif (!this._connections.has(peerId)) {\n\t\t\tthis._connections.set(peerId, []);\n\t\t}\n\t\tthis._connections.get(peerId).push(connection);\n\t}\n\n\t//TODO should be private\n\t_removeConnection(connection: DataConnection | MediaConnection): void {\n\t\tconst connections = this._connections.get(connection.peer);\n\n\t\tif (connections) {\n\t\t\tconst index = connections.indexOf(connection);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tconnections.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\t//remove from lost messages\n\t\tthis._lostMessages.delete(connection.connectionId);\n\t}\n\n\t/** Retrieve a data/media connection for this peer. */\n\tgetConnection(\n\t\tpeerId: string,\n\t\tconnectionId: string,\n\t): null | DataConnection | MediaConnection {\n\t\tconst connections = this._connections.get(peerId);\n\t\tif (!connections) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (const connection of connections) {\n\t\t\tif (connection.connectionId === connectionId) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _delayedAbort(type: PeerErrorType, message: string | Error): void {\n\t\tsetTimeout(() => {\n\t\t\tthis._abort(type, message);\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Emits an error message and destroys the Peer.\n\t * The Peer is not destroyed if it's in a disconnected state, in which case\n\t * it retains its disconnected state and its existing connections.\n\t */\n\tprivate _abort(type: PeerErrorType, message: string | Error): void {\n\t\tlogger.error(\"Aborting!\");\n\n\t\tthis.emitError(type, message);\n\n\t\tif (!this._lastServerId) {\n\t\t\tthis.destroy();\n\t\t} else {\n\t\t\tthis.disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the Peer: closes all active connections as well as the connection\n\t * to the server.\n\t *\n\t * :::caution\n\t * This cannot be undone; the respective peer object will no longer be able\n\t * to create or receive any connections, its ID will be forfeited on the server,\n\t * and all of its data and media connections will be closed.\n\t * :::\n\t */\n\tdestroy(): void {\n\t\tif (this.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.log(`Destroy peer with ID:${this.id}`);\n\n\t\tthis.disconnect();\n\t\tthis._cleanup();\n\n\t\tthis._destroyed = true;\n\n\t\tthis.emit(\"close\");\n\t}\n\n\t/** Disconnects every connection on this peer. */\n\tprivate _cleanup(): void {\n\t\tfor (const peerId of this._connections.keys()) {\n\t\t\tthis._cleanupPeer(peerId);\n\t\t\tthis._connections.delete(peerId);\n\t\t}\n\n\t\tthis.socket.removeAllListeners();\n\t}\n\n\t/** Closes all connections to this peer. */\n\tprivate _cleanupPeer(peerId: string): void {\n\t\tconst connections = this._connections.get(peerId);\n\n\t\tif (!connections) return;\n\n\t\tfor (const connection of connections) {\n\t\t\tconnection.close();\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects the Peer's connection to the PeerServer. Does not close any\n\t *  active connections.\n\t * Warning: The peer can no longer create or accept connections after being\n\t *  disconnected. It also cannot reconnect to the server.\n\t */\n\tdisconnect(): void {\n\t\tif (this.disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentId = this.id;\n\n\t\tlogger.log(`Disconnect peer with ID:${currentId}`);\n\n\t\tthis._disconnected = true;\n\t\tthis._open = false;\n\n\t\tthis.socket.close();\n\n\t\tthis._lastServerId = currentId;\n\t\tthis._id = null;\n\n\t\tthis.emit(\"disconnected\", currentId);\n\t}\n\n\t/** Attempts to reconnect with the same ID.\n\t *\n\t * Only {@apilink Peer.disconnect | disconnected peers} can be reconnected.\n\t * Destroyed peers cannot be reconnected.\n\t * If the connection fails (as an example, if the peer's old ID is now taken),\n\t * the peer's existing connections will not close, but any associated errors events will fire.\n\t */\n\treconnect(): void {\n\t\tif (this.disconnected && !this.destroyed) {\n\t\t\tlogger.log(\n\t\t\t\t`Attempting reconnection to server with ID ${this._lastServerId}`,\n\t\t\t);\n\t\t\tthis._disconnected = false;\n\t\t\tthis._initialize(this._lastServerId!);\n\t\t} else if (this.destroyed) {\n\t\t\tthrow new Error(\n\t\t\t\t\"This peer cannot reconnect to the server. It has already been destroyed.\",\n\t\t\t);\n\t\t} else if (!this.disconnected && !this.open) {\n\t\t\t// Do nothing. We're still connecting the first time.\n\t\t\tlogger.error(\n\t\t\t\t\"In a hurry? We're still trying to make the initial connection!\",\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`Peer ${this.id} cannot reconnect because it is not disconnected from the server!`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of available peer IDs. If you're running your own server, you'll\n\t * want to set allow_discovery: true in the PeerServer options. If you're using\n\t * the cloud server, email team@peerjs.com to get the functionality enabled for\n\t * your key.\n\t */\n\tlistAllPeers(cb = (_: any[]) => {}): void {\n\t\tthis._api\n\t\t\t.listAllPeers()\n\t\t\t.then((peers) => cb(peers))\n\t\t\t.catch((error) => this._abort(PeerErrorType.ServerError, error));\n\t}\n}\n","const LOG_PREFIX = \"PeerJS: \";\n\n/*\nPrints log messages depending on the debug level passed in. Defaults to 0.\n0  Prints no logs.\n1  Prints only errors.\n2  Prints errors and warnings.\n3  Prints all logs.\n*/\nexport enum LogLevel {\n\t/**\n\t * Prints no logs.\n\t */\n\tDisabled,\n\t/**\n\t * Prints only errors.\n\t */\n\tErrors,\n\t/**\n\t * Prints errors and warnings.\n\t */\n\tWarnings,\n\t/**\n\t * Prints all logs.\n\t */\n\tAll,\n}\n\nclass Logger {\n\tprivate _logLevel = LogLevel.Disabled;\n\n\tget logLevel(): LogLevel {\n\t\treturn this._logLevel;\n\t}\n\n\tset logLevel(logLevel: LogLevel) {\n\t\tthis._logLevel = logLevel;\n\t}\n\n\tlog(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.All) {\n\t\t\tthis._print(LogLevel.All, ...args);\n\t\t}\n\t}\n\n\twarn(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.Warnings) {\n\t\t\tthis._print(LogLevel.Warnings, ...args);\n\t\t}\n\t}\n\n\terror(...args: any[]) {\n\t\tif (this._logLevel >= LogLevel.Errors) {\n\t\t\tthis._print(LogLevel.Errors, ...args);\n\t\t}\n\t}\n\n\tsetLogFunction(fn: (logLevel: LogLevel, ..._: any[]) => void): void {\n\t\tthis._print = fn;\n\t}\n\n\tprivate _print(logLevel: LogLevel, ...rest: any[]): void {\n\t\tconst copy = [LOG_PREFIX, ...rest];\n\n\t\tfor (const i in copy) {\n\t\t\tif (copy[i] instanceof Error) {\n\t\t\t\tcopy[i] = \"(\" + copy[i].name + \") \" + copy[i].message;\n\t\t\t}\n\t\t}\n\n\t\tif (logLevel >= LogLevel.All) {\n\t\t\tconsole.log(...copy);\n\t\t} else if (logLevel >= LogLevel.Warnings) {\n\t\t\tconsole.warn(\"WARNING\", ...copy);\n\t\t} else if (logLevel >= LogLevel.Errors) {\n\t\t\tconsole.error(\"ERROR\", ...copy);\n\t\t}\n\t}\n}\n\nexport default new Logger();\n","import { EventEmitter } from \"eventemitter3\";\nimport logger from \"./logger\";\nimport { ServerMessageType, SocketEventType } from \"./enums\";\nimport { version } from \"../package.json\";\n\n/**\n * An abstraction on top of WebSockets to provide fastest\n * possible connection for peers.\n */\nexport class Socket extends EventEmitter {\n\tprivate _disconnected: boolean = true;\n\tprivate _id?: string;\n\tprivate _messagesQueue: Array<object> = [];\n\tprivate _socket?: WebSocket;\n\tprivate _wsPingTimer?: any;\n\tprivate readonly _baseUrl: string;\n\n\tconstructor(\n\t\tsecure: any,\n\t\thost: string,\n\t\tport: number,\n\t\tpath: string,\n\t\tkey: string,\n\t\tprivate readonly pingInterval: number = 5000,\n\t) {\n\t\tsuper();\n\n\t\tconst wsProtocol = secure ? \"wss://\" : \"ws://\";\n\n\t\tthis._baseUrl = wsProtocol + host + \":\" + port + path + \"peerjs?key=\" + key;\n\t}\n\n\tstart(id: string, token: string): void {\n\t\tthis._id = id;\n\n\t\tconst wsUrl = `${this._baseUrl}&id=${id}&token=${token}`;\n\n\t\tif (!!this._socket || !this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._socket = new WebSocket(wsUrl + \"&version=\" + version);\n\t\tthis._disconnected = false;\n\n\t\tthis._socket.onmessage = (event) => {\n\t\t\tlet data;\n\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(event.data);\n\t\t\t\tlogger.log(\"Server message received:\", data);\n\t\t\t} catch (e) {\n\t\t\t\tlogger.log(\"Invalid server message\", event.data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.emit(SocketEventType.Message, data);\n\t\t};\n\n\t\tthis._socket.onclose = (event) => {\n\t\t\tif (this._disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.log(\"Socket closed.\", event);\n\n\t\t\tthis._cleanup();\n\t\t\tthis._disconnected = true;\n\n\t\t\tthis.emit(SocketEventType.Disconnected);\n\t\t};\n\n\t\t// Take care of the queue of connections if necessary and make sure Peer knows\n\t\t// socket is open.\n\t\tthis._socket.onopen = () => {\n\t\t\tif (this._disconnected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._sendQueuedMessages();\n\n\t\t\tlogger.log(\"Socket open\");\n\n\t\t\tthis._scheduleHeartbeat();\n\t\t};\n\t}\n\n\tprivate _scheduleHeartbeat(): void {\n\t\tthis._wsPingTimer = setTimeout(() => {\n\t\t\tthis._sendHeartbeat();\n\t\t}, this.pingInterval);\n\t}\n\n\tprivate _sendHeartbeat(): void {\n\t\tif (!this._wsOpen()) {\n\t\t\tlogger.log(`Cannot send heartbeat, because socket closed`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = JSON.stringify({ type: ServerMessageType.Heartbeat });\n\n\t\tthis._socket!.send(message);\n\n\t\tthis._scheduleHeartbeat();\n\t}\n\n\t/** Is the websocket currently open? */\n\tprivate _wsOpen(): boolean {\n\t\treturn !!this._socket && this._socket.readyState === 1;\n\t}\n\n\t/** Send queued messages. */\n\tprivate _sendQueuedMessages(): void {\n\t\t//Create copy of queue and clear it,\n\t\t//because send method push the message back to queue if smth will go wrong\n\t\tconst copiedQueue = [...this._messagesQueue];\n\t\tthis._messagesQueue = [];\n\n\t\tfor (const message of copiedQueue) {\n\t\t\tthis.send(message);\n\t\t}\n\t}\n\n\t/** Exposed send for DC & Peer. */\n\tsend(data: any): void {\n\t\tif (this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we didn't get an ID yet, we can't yet send anything so we should queue\n\t\t// up these messages.\n\t\tif (!this._id) {\n\t\t\tthis._messagesQueue.push(data);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.type) {\n\t\t\tthis.emit(SocketEventType.Error, \"Invalid message\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._wsOpen()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = JSON.stringify(data);\n\n\t\tthis._socket!.send(message);\n\t}\n\n\tclose(): void {\n\t\tif (this._disconnected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._cleanup();\n\n\t\tthis._disconnected = true;\n\t}\n\n\tprivate _cleanup(): void {\n\t\tif (this._socket) {\n\t\t\tthis._socket.onopen =\n\t\t\t\tthis._socket.onmessage =\n\t\t\t\tthis._socket.onclose =\n\t\t\t\t\tnull;\n\t\t\tthis._socket.close();\n\t\t\tthis._socket = undefined;\n\t\t}\n\n\t\tclearTimeout(this._wsPingTimer!);\n\t}\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","export enum ConnectionType {\n\tData = \"data\",\n\tMedia = \"media\",\n}\n\nexport enum PeerErrorType {\n\t/**\n\t * The client's browser does not support some or all WebRTC features that you are trying to use.\n\t */\n\tBrowserIncompatible = \"browser-incompatible\",\n\t/**\n\t * You've already disconnected this peer from the server and can no longer make any new connections on it.\n\t */\n\tDisconnected = \"disconnected\",\n\t/**\n\t * The ID passed into the Peer constructor contains illegal characters.\n\t */\n\tInvalidID = \"invalid-id\",\n\t/**\n\t * The API key passed into the Peer constructor contains illegal characters or is not in the system (cloud server only).\n\t */\n\tInvalidKey = \"invalid-key\",\n\t/**\n\t * Lost or cannot establish a connection to the signalling server.\n\t */\n\tNetwork = \"network\",\n\t/**\n\t * The peer you're trying to connect to does not exist.\n\t */\n\tPeerUnavailable = \"peer-unavailable\",\n\t/**\n\t * PeerJS is being used securely, but the cloud server does not support SSL. Use a custom PeerServer.\n\t */\n\tSslUnavailable = \"ssl-unavailable\",\n\t/**\n\t * Unable to reach the server.\n\t */\n\tServerError = \"server-error\",\n\t/**\n\t * An error from the underlying socket.\n\t */\n\tSocketError = \"socket-error\",\n\t/**\n\t * The underlying socket closed unexpectedly.\n\t */\n\tSocketClosed = \"socket-closed\",\n\t/**\n\t * The ID passed into the Peer constructor is already taken.\n\t *\n\t * :::caution\n\t * This error is not fatal if your peer has open peer-to-peer connections.\n\t * This can happen if you attempt to {@apilink Peer.reconnect} a peer that has been disconnected from the server,\n\t * but its old ID has now been taken.\n\t * :::\n\t */\n\tUnavailableID = \"unavailable-id\",\n\t/**\n\t * Native WebRTC errors.\n\t */\n\tWebRTC = \"webrtc\",\n}\n\nexport enum BaseConnectionErrorType {\n\tNegotiationFailed = \"negotiation-failed\",\n\tConnectionClosed = \"connection-closed\",\n}\n\nexport enum DataConnectionErrorType {\n\tNotOpenYet = \"not-open-yet\",\n\tMessageToBig = \"message-too-big\",\n}\n\nexport enum SerializationType {\n\tBinary = \"binary\",\n\tBinaryUTF8 = \"binary-utf8\",\n\tJSON = \"json\",\n\tNone = \"raw\",\n}\n\nexport enum SocketEventType {\n\tMessage = \"message\",\n\tDisconnected = \"disconnected\",\n\tError = \"error\",\n\tClose = \"close\",\n}\n\nexport enum ServerMessageType {\n\tHeartbeat = \"HEARTBEAT\",\n\tCandidate = \"CANDIDATE\",\n\tOffer = \"OFFER\",\n\tAnswer = \"ANSWER\",\n\tOpen = \"OPEN\", // The connection to the server is open.\n\tError = \"ERROR\", // Server error.\n\tIdTaken = \"ID-TAKEN\", // The selected ID is taken.\n\tInvalidKey = \"INVALID-KEY\", // The given API key cannot be found.\n\tLeave = \"LEAVE\", // Another peer has closed its connection to this peer.\n\tExpire = \"EXPIRE\", // The offer sent to a peer has expired without response.\n}\n","{\n\t\"name\": \"peerjs\",\n\t\"version\": \"1.5.1\",\n\t\"keywords\": [\n\t\t\"peerjs\",\n\t\t\"webrtc\",\n\t\t\"p2p\",\n\t\t\"rtc\"\n\t],\n\t\"description\": \"PeerJS client\",\n\t\"homepage\": \"https://peerjs.com\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/peers/peerjs/issues\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/peers/peerjs\"\n\t},\n\t\"license\": \"MIT\",\n\t\"contributors\": [\n\t\t\"Michelle Bu <michelle@michellebu.com>\",\n\t\t\"afrokick <devbyru@gmail.com>\",\n\t\t\"ericz <really.ez@gmail.com>\",\n\t\t\"Jairo <kidandcat@gmail.com>\",\n\t\t\"Jonas Gloning <34194370+jonasgloning@users.noreply.github.com>\",\n\t\t\"Jairo Caro-Accino Viciana <jairo@galax.be>\",\n\t\t\"Carlos Caballero <carlos.caballero.gonzalez@gmail.com>\",\n\t\t\"hc <hheennrryy@gmail.com>\",\n\t\t\"Muhammad Asif <capripio@gmail.com>\",\n\t\t\"PrashoonB <prashoonbhattacharjee@gmail.com>\",\n\t\t\"Harsh Bardhan Mishra <47351025+HarshCasper@users.noreply.github.com>\",\n\t\t\"akotynski <aleksanderkotbury@gmail.com>\",\n\t\t\"lmb <i@lmb.io>\",\n\t\t\"Jairooo <jairocaro@msn.com>\",\n\t\t\"Moritz Stückler <moritz.stueckler@gmail.com>\",\n\t\t\"Simon <crydotsnakegithub@gmail.com>\",\n\t\t\"Denis Lukov <denismassters@gmail.com>\",\n\t\t\"Philipp Hancke <fippo@andyet.net>\",\n\t\t\"Hans Oksendahl <hansoksendahl@gmail.com>\",\n\t\t\"Jess <jessachandler@gmail.com>\",\n\t\t\"khankuan <khankuan@gmail.com>\",\n\t\t\"DUODVK <kurmanov.work@gmail.com>\",\n\t\t\"XiZhao <kwang1imsa@gmail.com>\",\n\t\t\"Matthias Lohr <matthias@lohr.me>\",\n\t\t\"=frank tree <=frnktrb@googlemail.com>\",\n\t\t\"Andre Eckardt <aeckardt@outlook.com>\",\n\t\t\"Chris Cowan <agentme49@gmail.com>\",\n\t\t\"Alex Chuev <alex@chuev.com>\",\n\t\t\"alxnull <alxnull@e.mail.de>\",\n\t\t\"Yemel Jardi <angel.jardi@gmail.com>\",\n\t\t\"Ben Parnell <benjaminparnell.94@gmail.com>\",\n\t\t\"Benny Lichtner <bennlich@gmail.com>\",\n\t\t\"fresheneesz <bitetrudpublic@gmail.com>\",\n\t\t\"bob.barstead@exaptive.com <bob.barstead@exaptive.com>\",\n\t\t\"chandika <chandika@gmail.com>\",\n\t\t\"emersion <contact@emersion.fr>\",\n\t\t\"Christopher Van <cvan@users.noreply.github.com>\",\n\t\t\"eddieherm <edhermoso@gmail.com>\",\n\t\t\"Eduardo Pinho <enet4mikeenet@gmail.com>\",\n\t\t\"Evandro Zanatta <ezanatta@tray.net.br>\",\n\t\t\"Gardner Bickford <gardner@users.noreply.github.com>\",\n\t\t\"Gian Luca <gianluca.cecchi@cynny.com>\",\n\t\t\"PatrickJS <github@gdi2290.com>\",\n\t\t\"jonnyf <github@jonathanfoss.co.uk>\",\n\t\t\"Hizkia Felix <hizkifw@gmail.com>\",\n\t\t\"Hristo Oskov <hristo.oskov@gmail.com>\",\n\t\t\"Isaac Madwed <i.madwed@gmail.com>\",\n\t\t\"Ilya Konanykhin <ilya.konanykhin@gmail.com>\",\n\t\t\"jasonbarry <jasbarry@me.com>\",\n\t\t\"Jonathan Burke <jonathan.burke.1311@googlemail.com>\",\n\t\t\"Josh Hamit <josh.hamit@gmail.com>\",\n\t\t\"Jordan Austin <jrax86@gmail.com>\",\n\t\t\"Joel Wetzell <jwetzell@yahoo.com>\",\n\t\t\"xizhao <kevin.wang@cloudera.com>\",\n\t\t\"Alberto Torres <kungfoobar@gmail.com>\",\n\t\t\"Jonathan Mayol <mayoljonathan@gmail.com>\",\n\t\t\"Jefferson Felix <me@jsfelix.dev>\",\n\t\t\"Rolf Erik Lekang <me@rolflekang.com>\",\n\t\t\"Kevin Mai-Husan Chia <mhchia@users.noreply.github.com>\",\n\t\t\"Pepijn de Vos <pepijndevos@gmail.com>\",\n\t\t\"JooYoung <qkdlql@naver.com>\",\n\t\t\"Tobias Speicher <rootcommander@gmail.com>\",\n\t\t\"Steve Blaurock <sblaurock@gmail.com>\",\n\t\t\"Kyrylo Shegeda <shegeda@ualberta.ca>\",\n\t\t\"Diwank Singh Tomer <singh@diwank.name>\",\n\t\t\"Sören Balko <Soeren.Balko@gmail.com>\",\n\t\t\"Arpit Solanki <solankiarpit1997@gmail.com>\",\n\t\t\"Yuki Ito <yuki@gnnk.net>\",\n\t\t\"Artur Zayats <zag2art@gmail.com>\"\n\t],\n\t\"funding\": {\n\t\t\"type\": \"opencollective\",\n\t\t\"url\": \"https://opencollective.com/peer\"\n\t},\n\t\"collective\": {\n\t\t\"type\": \"opencollective\",\n\t\t\"url\": \"https://opencollective.com/peer\"\n\t},\n\t\"files\": [\n\t\t\"dist/*\"\n\t],\n\t\"sideEffects\": [\n\t\t\"lib/global.ts\",\n\t\t\"lib/supports.ts\"\n\t],\n\t\"main\": \"dist/bundler.cjs\",\n\t\"module\": \"dist/bundler.mjs\",\n\t\"browser-minified\": \"dist/peerjs.min.js\",\n\t\"browser-unminified\": \"dist/peerjs.js\",\n\t\"browser-minified-cbor\": \"dist/serializer.cbor.mjs\",\n\t\"browser-minified-msgpack\": \"dist/serializer.msgpack.mjs\",\n\t\"types\": \"dist/types.d.ts\",\n\t\"engines\": {\n\t\t\"node\": \">= 14\"\n\t},\n\t\"targets\": {\n\t\t\"types\": {\n\t\t\t\"source\": \"lib/exports.ts\"\n\t\t},\n\t\t\"main\": {\n\t\t\t\"source\": \"lib/exports.ts\",\n\t\t\t\"sourceMap\": {\n\t\t\t\t\"inlineSources\": true\n\t\t\t}\n\t\t},\n\t\t\"module\": {\n\t\t\t\"source\": \"lib/exports.ts\",\n\t\t\t\"includeNodeModules\": [\n\t\t\t\t\"eventemitter3\"\n\t\t\t],\n\t\t\t\"sourceMap\": {\n\t\t\t\t\"inlineSources\": true\n\t\t\t}\n\t\t},\n\t\t\"browser-minified\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"global\",\n\t\t\t\"optimize\": true,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15\"\n\t\t\t},\n\t\t\t\"source\": \"lib/global.ts\"\n\t\t},\n\t\t\"browser-unminified\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"global\",\n\t\t\t\"optimize\": false,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"chrome >= 83, edge >= 83, firefox >= 80, safari >= 15\"\n\t\t\t},\n\t\t\t\"source\": \"lib/global.ts\"\n\t\t},\n\t\t\"browser-minified-cbor\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"esmodule\",\n\t\t\t\"isLibrary\": true,\n\t\t\t\"optimize\": true,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"chrome >= 83, edge >= 83, firefox >= 102, safari >= 15\"\n\t\t\t},\n\t\t\t\"source\": \"lib/dataconnection/StreamConnection/Cbor.ts\"\n\t\t},\n\t\t\"browser-minified-msgpack\": {\n\t\t\t\"context\": \"browser\",\n\t\t\t\"outputFormat\": \"esmodule\",\n\t\t\t\"isLibrary\": true,\n\t\t\t\"optimize\": true,\n\t\t\t\"engines\": {\n\t\t\t\t\"browsers\": \"chrome >= 83, edge >= 83, firefox >= 102, safari >= 15\"\n\t\t\t},\n\t\t\t\"source\": \"lib/dataconnection/StreamConnection/MsgPack.ts\"\n\t\t}\n\t},\n\t\"scripts\": {\n\t\t\"contributors\": \"git-authors-cli --print=false && prettier --write package.json && git add package.json package-lock.json && git commit -m \\\"chore(contributors): update and sort contributors list\\\"\",\n\t\t\"check\": \"tsc --noEmit && tsc -p e2e/tsconfig.json --noEmit\",\n\t\t\"watch\": \"parcel watch\",\n\t\t\"build\": \"rm -rf dist && parcel build\",\n\t\t\"prepublishOnly\": \"npm run build\",\n\t\t\"test\": \"jest\",\n\t\t\"test:watch\": \"jest --watch\",\n\t\t\"coverage\": \"jest --coverage --collectCoverageFrom=\\\"./lib/**\\\"\",\n\t\t\"format\": \"prettier --write .\",\n\t\t\"format:check\": \"prettier --check .\",\n\t\t\"semantic-release\": \"semantic-release\",\n\t\t\"e2e\": \"wdio run e2e/wdio.local.conf.ts\",\n\t\t\"e2e:bstack\": \"wdio run e2e/wdio.bstack.conf.ts\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@parcel/config-default\": \"^2.9.3\",\n\t\t\"@parcel/packager-ts\": \"^2.9.3\",\n\t\t\"@parcel/transformer-typescript-tsc\": \"^2.9.3\",\n\t\t\"@parcel/transformer-typescript-types\": \"^2.9.3\",\n\t\t\"@semantic-release/changelog\": \"^6.0.1\",\n\t\t\"@semantic-release/git\": \"^10.0.1\",\n\t\t\"@swc/core\": \"^1.3.27\",\n\t\t\"@swc/jest\": \"^0.2.24\",\n\t\t\"@types/jasmine\": \"^4.3.4\",\n\t\t\"@wdio/browserstack-service\": \"^8.11.2\",\n\t\t\"@wdio/cli\": \"^8.11.2\",\n\t\t\"@wdio/globals\": \"^8.11.2\",\n\t\t\"@wdio/jasmine-framework\": \"^8.11.2\",\n\t\t\"@wdio/local-runner\": \"^8.11.2\",\n\t\t\"@wdio/spec-reporter\": \"^8.11.2\",\n\t\t\"@wdio/types\": \"^8.10.4\",\n\t\t\"http-server\": \"^14.1.1\",\n\t\t\"jest\": \"^29.3.1\",\n\t\t\"jest-environment-jsdom\": \"^29.3.1\",\n\t\t\"mock-socket\": \"^9.0.0\",\n\t\t\"parcel\": \"^2.9.3\",\n\t\t\"prettier\": \"^3.0.0\",\n\t\t\"semantic-release\": \"^21.0.0\",\n\t\t\"ts-node\": \"^10.9.1\",\n\t\t\"typescript\": \"^5.0.0\",\n\t\t\"wdio-geckodriver-service\": \"^5.0.1\"\n\t},\n\t\"dependencies\": {\n\t\t\"@msgpack/msgpack\": \"^2.8.0\",\n\t\t\"cbor-x\": \"^1.5.3\",\n\t\t\"eventemitter3\": \"^4.0.7\",\n\t\t\"peerjs-js-binarypack\": \"^2.0.0\",\n\t\t\"webrtc-adapter\": \"^8.0.0\"\n\t},\n\t\"alias\": {\n\t\t\"process\": false,\n\t\t\"buffer\": false\n\t}\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport { Negotiator } from \"./negotiator\";\nimport { ConnectionType, ServerMessageType } from \"./enums\";\nimport type { Peer } from \"./peer\";\nimport { BaseConnection, type BaseConnectionEvents } from \"./baseconnection\";\nimport type { ServerMessage } from \"./servermessage\";\nimport type { AnswerOption } from \"./optionInterfaces\";\n\nexport interface MediaConnectionEvents extends BaseConnectionEvents<never> {\n\t/**\n\t * Emitted when a connection to the PeerServer is established.\n\t *\n\t * ```ts\n\t * mediaConnection.on('stream', (stream) => { ... });\n\t * ```\n\t */\n\tstream: (stream: MediaStream) => void;\n\t/**\n\t * Emitted when the auxiliary data channel is established.\n\t * After this event, hanging up will close the connection cleanly on the remote peer.\n\t * @beta\n\t */\n\twillCloseOnRemote: () => void;\n}\n\n/**\n * Wraps WebRTC's media streams.\n * To get one, use {@apilink Peer.call} or listen for the {@apilink PeerEvents | `call`} event.\n */\nexport class MediaConnection extends BaseConnection<MediaConnectionEvents> {\n\tprivate static readonly ID_PREFIX = \"mc_\";\n\treadonly label: string;\n\n\tprivate _negotiator: Negotiator<MediaConnectionEvents, this>;\n\tprivate _localStream: MediaStream;\n\tprivate _remoteStream: MediaStream;\n\n\t/**\n\t * For media connections, this is always 'media'.\n\t */\n\tget type() {\n\t\treturn ConnectionType.Media;\n\t}\n\n\tget localStream(): MediaStream {\n\t\treturn this._localStream;\n\t}\n\n\tget remoteStream(): MediaStream {\n\t\treturn this._remoteStream;\n\t}\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\n\t\tthis._localStream = this.options._stream;\n\t\tthis.connectionId =\n\t\t\tthis.options.connectionId ||\n\t\t\tMediaConnection.ID_PREFIX + util.randomToken();\n\n\t\tthis._negotiator = new Negotiator(this);\n\n\t\tif (this._localStream) {\n\t\t\tthis._negotiator.startConnection({\n\t\t\t\t_stream: this._localStream,\n\t\t\t\toriginator: true,\n\t\t\t});\n\t\t}\n\t}\n\n\t/** Called by the Negotiator when the DataChannel is ready. */\n\toverride _initializeDataChannel(dc: RTCDataChannel): void {\n\t\tthis.dataChannel = dc;\n\n\t\tthis.dataChannel.onopen = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc connection success`);\n\t\t\tthis.emit(\"willCloseOnRemote\");\n\t\t};\n\n\t\tthis.dataChannel.onclose = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc closed for:`, this.peer);\n\t\t\tthis.close();\n\t\t};\n\t}\n\taddStream(remoteStream) {\n\t\tlogger.log(\"Receiving stream\", remoteStream);\n\n\t\tthis._remoteStream = remoteStream;\n\t\tsuper.emit(\"stream\", remoteStream); // Should we call this `open`?\n\t}\n\n\t/**\n\t * @internal\n\t */\n\thandleMessage(message: ServerMessage): void {\n\t\tconst type = message.type;\n\t\tconst payload = message.payload;\n\n\t\tswitch (message.type) {\n\t\t\tcase ServerMessageType.Answer:\n\t\t\t\t// Forward to negotiator\n\t\t\t\tvoid this._negotiator.handleSDP(type, payload.sdp);\n\t\t\t\tthis._open = true;\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Candidate:\n\t\t\t\tvoid this._negotiator.handleCandidate(payload.candidate);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.warn(`Unrecognized message type:${type} from peer:${this.peer}`);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n     * When receiving a {@apilink PeerEvents | `call`} event on a peer, you can call\n     * `answer` on the media connection provided by the callback to accept the call\n     * and optionally send your own media stream.\n\n     *\n     * @param stream A WebRTC media stream.\n     * @param options\n     * @returns\n     */\n\tanswer(stream?: MediaStream, options: AnswerOption = {}): void {\n\t\tif (this._localStream) {\n\t\t\tlogger.warn(\n\t\t\t\t\"Local stream already exists on this MediaConnection. Are you answering a call twice?\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._localStream = stream;\n\n\t\tif (options && options.sdpTransform) {\n\t\t\tthis.options.sdpTransform = options.sdpTransform;\n\t\t}\n\n\t\tthis._negotiator.startConnection({\n\t\t\t...this.options._payload,\n\t\t\t_stream: stream,\n\t\t});\n\t\t// Retrieve lost messages stored because PeerConnection not set up.\n\t\tconst messages = this.provider._getMessages(this.connectionId);\n\n\t\tfor (const message of messages) {\n\t\t\tthis.handleMessage(message);\n\t\t}\n\n\t\tthis._open = true;\n\t}\n\n\t/**\n\t * Exposed functionality for users.\n\t */\n\n\t/**\n\t * Closes the media connection.\n\t */\n\tclose(): void {\n\t\tif (this._negotiator) {\n\t\t\tthis._negotiator.cleanup();\n\t\t\tthis._negotiator = null;\n\t\t}\n\n\t\tthis._localStream = null;\n\t\tthis._remoteStream = null;\n\n\t\tif (this.provider) {\n\t\t\tthis.provider._removeConnection(this);\n\n\t\t\tthis.provider = null;\n\t\t}\n\n\t\tif (this.options && this.options._stream) {\n\t\t\tthis.options._stream = null;\n\t\t}\n\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._open = false;\n\n\t\tsuper.emit(\"close\");\n\t}\n}\n","import logger from \"./logger\";\nimport type { MediaConnection } from \"./mediaconnection\";\nimport type { DataConnection } from \"./dataconnection/DataConnection\";\nimport {\n\tBaseConnectionErrorType,\n\tConnectionType,\n\tPeerErrorType,\n\tServerMessageType,\n} from \"./enums\";\nimport type { BaseConnection, BaseConnectionEvents } from \"./baseconnection\";\nimport type { ValidEventTypes } from \"eventemitter3\";\n\n/**\n * Manages all negotiations between Peers.\n */\nexport class Negotiator<\n\tEvents extends ValidEventTypes,\n\tConnectionType extends BaseConnection<Events | BaseConnectionEvents>,\n> {\n\tconstructor(readonly connection: ConnectionType) {}\n\n\t/** Returns a PeerConnection object set up correctly (for data, media). */\n\tstartConnection(options: any) {\n\t\tconst peerConnection = this._startPeerConnection();\n\n\t\t// Set the connection's PC.\n\t\tthis.connection.peerConnection = peerConnection;\n\n\t\tif (this.connection.type === ConnectionType.Media && options._stream) {\n\t\t\tthis._addTracksToConnection(options._stream, peerConnection);\n\t\t}\n\n\t\t// What do we need to do now?\n\t\tif (options.originator) {\n\t\t\tconst dataConnection = this.connection;\n\n\t\t\tconst config: RTCDataChannelInit = { ordered: !!options.reliable };\n\n\t\t\tconst dataChannel = peerConnection.createDataChannel(\n\t\t\t\tdataConnection.label,\n\t\t\t\tconfig,\n\t\t\t);\n\t\t\tdataConnection._initializeDataChannel(dataChannel);\n\n\t\t\tvoid this._makeOffer();\n\t\t} else {\n\t\t\tvoid this.handleSDP(\"OFFER\", options.sdp);\n\t\t}\n\t}\n\n\t/** Start a PC. */\n\tprivate _startPeerConnection(): RTCPeerConnection {\n\t\tlogger.log(\"Creating RTCPeerConnection.\");\n\n\t\tconst peerConnection = new RTCPeerConnection(\n\t\t\tthis.connection.provider.options.config,\n\t\t);\n\n\t\tthis._setupListeners(peerConnection);\n\n\t\treturn peerConnection;\n\t}\n\n\t/** Set up various WebRTC listeners. */\n\tprivate _setupListeners(peerConnection: RTCPeerConnection) {\n\t\tconst peerId = this.connection.peer;\n\t\tconst connectionId = this.connection.connectionId;\n\t\tconst connectionType = this.connection.type;\n\t\tconst provider = this.connection.provider;\n\n\t\t// ICE CANDIDATES.\n\t\tlogger.log(\"Listening for ICE candidates.\");\n\n\t\tpeerConnection.onicecandidate = (evt) => {\n\t\t\tif (!evt.candidate || !evt.candidate.candidate) return;\n\n\t\t\tlogger.log(`Received ICE candidates for ${peerId}:`, evt.candidate);\n\n\t\t\tprovider.socket.send({\n\t\t\t\ttype: ServerMessageType.Candidate,\n\t\t\t\tpayload: {\n\t\t\t\t\tcandidate: evt.candidate,\n\t\t\t\t\ttype: connectionType,\n\t\t\t\t\tconnectionId: connectionId,\n\t\t\t\t},\n\t\t\t\tdst: peerId,\n\t\t\t});\n\t\t};\n\n\t\tpeerConnection.oniceconnectionstatechange = () => {\n\t\t\tswitch (peerConnection.iceConnectionState) {\n\t\t\t\tcase \"failed\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState is failed, closing connections to \" + peerId,\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.emitError(\n\t\t\t\t\t\tBaseConnectionErrorType.NegotiationFailed,\n\t\t\t\t\t\t\"Negotiation of connection to \" + peerId + \" failed.\",\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"closed\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState is closed, closing connections to \" + peerId,\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.emitError(\n\t\t\t\t\t\tBaseConnectionErrorType.ConnectionClosed,\n\t\t\t\t\t\t\"Connection to \" + peerId + \" closed.\",\n\t\t\t\t\t);\n\t\t\t\t\tthis.connection.close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"disconnected\":\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\"iceConnectionState changed to disconnected on the connection with \" +\n\t\t\t\t\t\t\tpeerId,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"completed\":\n\t\t\t\t\tpeerConnection.onicecandidate = () => {};\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.connection.emit(\n\t\t\t\t\"iceStateChanged\",\n\t\t\t\tpeerConnection.iceConnectionState,\n\t\t\t);\n\t\t};\n\n\t\t// DATACONNECTION.\n\t\tlogger.log(\"Listening for data channel\");\n\t\t// Fired between offer and answer, so options should already be saved\n\t\t// in the options hash.\n\t\tpeerConnection.ondatachannel = (evt) => {\n\t\t\tlogger.log(\"Received data channel\");\n\n\t\t\tconst dataChannel = evt.channel;\n\t\t\tconst connection = <DataConnection>(\n\t\t\t\tprovider.getConnection(peerId, connectionId)\n\t\t\t);\n\n\t\t\tconnection._initializeDataChannel(dataChannel);\n\t\t};\n\n\t\t// MEDIACONNECTION.\n\t\tlogger.log(\"Listening for remote stream\");\n\n\t\tpeerConnection.ontrack = (evt) => {\n\t\t\tlogger.log(\"Received remote stream\");\n\n\t\t\tconst stream = evt.streams[0];\n\t\t\tconst connection = provider.getConnection(peerId, connectionId);\n\n\t\t\tif (connection.type === ConnectionType.Media) {\n\t\t\t\tconst mediaConnection = <MediaConnection>connection;\n\n\t\t\t\tthis._addStreamToMediaConnection(stream, mediaConnection);\n\t\t\t}\n\t\t};\n\t}\n\n\tcleanup(): void {\n\t\tlogger.log(\"Cleaning up PeerConnection to \" + this.connection.peer);\n\n\t\tconst peerConnection = this.connection.peerConnection;\n\n\t\tif (!peerConnection) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connection.peerConnection = null;\n\n\t\t//unsubscribe from all PeerConnection's events\n\t\tpeerConnection.onicecandidate =\n\t\t\tpeerConnection.oniceconnectionstatechange =\n\t\t\tpeerConnection.ondatachannel =\n\t\t\tpeerConnection.ontrack =\n\t\t\t\t() => {};\n\n\t\tconst peerConnectionNotClosed = peerConnection.signalingState !== \"closed\";\n\t\tlet dataChannelNotClosed = false;\n\n\t\tconst dataChannel = this.connection.dataChannel;\n\n\t\tif (dataChannel) {\n\t\t\tdataChannelNotClosed =\n\t\t\t\t!!dataChannel.readyState && dataChannel.readyState !== \"closed\";\n\t\t}\n\n\t\tif (peerConnectionNotClosed || dataChannelNotClosed) {\n\t\t\tpeerConnection.close();\n\t\t}\n\t}\n\n\tprivate async _makeOffer(): Promise<void> {\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\ttry {\n\t\t\tconst offer = await peerConnection.createOffer(\n\t\t\t\tthis.connection.options.constraints,\n\t\t\t);\n\n\t\t\tlogger.log(\"Created offer.\");\n\n\t\t\tif (\n\t\t\t\tthis.connection.options.sdpTransform &&\n\t\t\t\ttypeof this.connection.options.sdpTransform === \"function\"\n\t\t\t) {\n\t\t\t\toffer.sdp =\n\t\t\t\t\tthis.connection.options.sdpTransform(offer.sdp) || offer.sdp;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait peerConnection.setLocalDescription(offer);\n\n\t\t\t\tlogger.log(\n\t\t\t\t\t\"Set localDescription:\",\n\t\t\t\t\toffer,\n\t\t\t\t\t`for:${this.connection.peer}`,\n\t\t\t\t);\n\n\t\t\t\tlet payload: any = {\n\t\t\t\t\tsdp: offer,\n\t\t\t\t\ttype: this.connection.type,\n\t\t\t\t\tconnectionId: this.connection.connectionId,\n\t\t\t\t\tmetadata: this.connection.metadata,\n\t\t\t\t};\n\n\t\t\t\tif (this.connection.type === ConnectionType.Data) {\n\t\t\t\t\tconst dataConnection = <DataConnection>(<unknown>this.connection);\n\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\t...payload,\n\t\t\t\t\t\tlabel: dataConnection.label,\n\t\t\t\t\t\treliable: dataConnection.reliable,\n\t\t\t\t\t\tserialization: dataConnection.serialization,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tprovider.socket.send({\n\t\t\t\t\ttype: ServerMessageType.Offer,\n\t\t\t\t\tpayload,\n\t\t\t\t\tdst: this.connection.peer,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// TODO: investigate why _makeOffer is being called from the answer\n\t\t\t\tif (\n\t\t\t\t\terr !=\n\t\t\t\t\t\"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer\"\n\t\t\t\t) {\n\t\t\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\t\t\tlogger.log(\"Failed to setLocalDescription, \", err);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err_1) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err_1);\n\t\t\tlogger.log(\"Failed to createOffer, \", err_1);\n\t\t}\n\t}\n\n\tprivate async _makeAnswer(): Promise<void> {\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\ttry {\n\t\t\tconst answer = await peerConnection.createAnswer();\n\t\t\tlogger.log(\"Created answer.\");\n\n\t\t\tif (\n\t\t\t\tthis.connection.options.sdpTransform &&\n\t\t\t\ttypeof this.connection.options.sdpTransform === \"function\"\n\t\t\t) {\n\t\t\t\tanswer.sdp =\n\t\t\t\t\tthis.connection.options.sdpTransform(answer.sdp) || answer.sdp;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait peerConnection.setLocalDescription(answer);\n\n\t\t\t\tlogger.log(\n\t\t\t\t\t`Set localDescription:`,\n\t\t\t\t\tanswer,\n\t\t\t\t\t`for:${this.connection.peer}`,\n\t\t\t\t);\n\n\t\t\t\tprovider.socket.send({\n\t\t\t\t\ttype: ServerMessageType.Answer,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tsdp: answer,\n\t\t\t\t\t\ttype: this.connection.type,\n\t\t\t\t\t\tconnectionId: this.connection.connectionId,\n\t\t\t\t\t},\n\t\t\t\t\tdst: this.connection.peer,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\t\tlogger.log(\"Failed to setLocalDescription, \", err);\n\t\t\t}\n\t\t} catch (err_1) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err_1);\n\t\t\tlogger.log(\"Failed to create answer, \", err_1);\n\t\t}\n\t}\n\n\t/** Handle an SDP. */\n\tasync handleSDP(type: string, sdp: any): Promise<void> {\n\t\tsdp = new RTCSessionDescription(sdp);\n\t\tconst peerConnection = this.connection.peerConnection;\n\t\tconst provider = this.connection.provider;\n\n\t\tlogger.log(\"Setting remote description\", sdp);\n\n\t\tconst self = this;\n\n\t\ttry {\n\t\t\tawait peerConnection.setRemoteDescription(sdp);\n\t\t\tlogger.log(`Set remoteDescription:${type} for:${this.connection.peer}`);\n\t\t\tif (type === \"OFFER\") {\n\t\t\t\tawait self._makeAnswer();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tprovider.emitError(PeerErrorType.WebRTC, err);\n\t\t\tlogger.log(\"Failed to setRemoteDescription, \", err);\n\t\t}\n\t}\n\n\t/** Handle a candidate. */\n\tasync handleCandidate(ice: RTCIceCandidate) {\n\t\tlogger.log(`handleCandidate:`, ice);\n\n\t\ttry {\n\t\t\tawait this.connection.peerConnection.addIceCandidate(ice);\n\t\t\tlogger.log(`Added ICE candidate for:${this.connection.peer}`);\n\t\t} catch (err) {\n\t\t\tthis.connection.provider.emitError(PeerErrorType.WebRTC, err);\n\t\t\tlogger.log(\"Failed to handleCandidate, \", err);\n\t\t}\n\t}\n\n\tprivate _addTracksToConnection(\n\t\tstream: MediaStream,\n\t\tpeerConnection: RTCPeerConnection,\n\t): void {\n\t\tlogger.log(`add tracks from stream ${stream.id} to peer connection`);\n\n\t\tif (!peerConnection.addTrack) {\n\t\t\treturn logger.error(\n\t\t\t\t`Your browser does't support RTCPeerConnection#addTrack. Ignored.`,\n\t\t\t);\n\t\t}\n\n\t\tstream.getTracks().forEach((track) => {\n\t\t\tpeerConnection.addTrack(track, stream);\n\t\t});\n\t}\n\n\tprivate _addStreamToMediaConnection(\n\t\tstream: MediaStream,\n\t\tmediaConnection: MediaConnection,\n\t): void {\n\t\tlogger.log(\n\t\t\t`add stream ${stream.id} to media connection ${mediaConnection.connectionId}`,\n\t\t);\n\n\t\tmediaConnection.addStream(stream);\n\t}\n}\n","import type { Peer } from \"./peer\";\nimport type { ServerMessage } from \"./servermessage\";\nimport type { ConnectionType } from \"./enums\";\nimport { BaseConnectionErrorType } from \"./enums\";\nimport {\n\tEventEmitterWithError,\n\ttype EventsWithError,\n\tPeerError,\n} from \"./peerError\";\nimport type { ValidEventTypes } from \"eventemitter3\";\n\nexport interface BaseConnectionEvents<\n\tErrorType extends string = BaseConnectionErrorType,\n> extends EventsWithError<ErrorType> {\n\t/**\n\t * Emitted when either you or the remote peer closes the connection.\n\t *\n\t * ```ts\n\t * connection.on('close', () => { ... });\n\t * ```\n\t */\n\tclose: () => void;\n\t/**\n\t * ```ts\n\t * connection.on('error', (error) => { ... });\n\t * ```\n\t */\n\terror: (error: PeerError<`${ErrorType}`>) => void;\n\ticeStateChanged: (state: RTCIceConnectionState) => void;\n}\n\nexport abstract class BaseConnection<\n\tSubClassEvents extends ValidEventTypes,\n\tErrorType extends string = never,\n> extends EventEmitterWithError<\n\tErrorType | BaseConnectionErrorType,\n\tSubClassEvents & BaseConnectionEvents<BaseConnectionErrorType | ErrorType>\n> {\n\tprotected _open = false;\n\n\t/**\n\t * Any type of metadata associated with the connection,\n\t * passed in by whoever initiated the connection.\n\t */\n\treadonly metadata: any;\n\tconnectionId: string;\n\n\tpeerConnection: RTCPeerConnection;\n\tdataChannel: RTCDataChannel;\n\n\tabstract get type(): ConnectionType;\n\n\t/**\n\t * The optional label passed in or assigned by PeerJS when the connection was initiated.\n\t */\n\tlabel: string;\n\n\t/**\n\t * Whether the media connection is active (e.g. your call has been answered).\n\t * You can check this if you want to set a maximum wait time for a one-sided call.\n\t */\n\tget open() {\n\t\treturn this._open;\n\t}\n\n\tprotected constructor(\n\t\t/**\n\t\t * The ID of the peer on the other end of this connection.\n\t\t */\n\t\treadonly peer: string,\n\t\tpublic provider: Peer,\n\t\treadonly options: any,\n\t) {\n\t\tsuper();\n\n\t\tthis.metadata = options.metadata;\n\t}\n\n\tabstract close(): void;\n\n\t/**\n\t * @internal\n\t */\n\tabstract handleMessage(message: ServerMessage): void;\n\n\t/**\n\t * Called by the Negotiator when the DataChannel is ready.\n\t * @internal\n\t * */\n\tabstract _initializeDataChannel(dc: RTCDataChannel): void;\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport logger from \"./logger\";\n\nexport interface EventsWithError<ErrorType extends string> {\n\terror: (error: PeerError<`${ErrorType}`>) => void;\n}\n\nexport class EventEmitterWithError<\n\tErrorType extends string,\n\tEvents extends EventsWithError<ErrorType>,\n> extends EventEmitter<Events, never> {\n\t/**\n\t * Emits a typed error message.\n\t *\n\t * @internal\n\t */\n\temitError(type: ErrorType, err: string | Error): void {\n\t\tlogger.error(\"Error:\", err);\n\n\t\t// @ts-ignore\n\t\tthis.emit(\"error\", new PeerError<`${ErrorType}`>(`${type}`, err));\n\t}\n}\n/**\n * A PeerError is emitted whenever an error occurs.\n * It always has a `.type`, which can be used to identify the error.\n */\nexport class PeerError<T extends string> extends Error {\n\t/**\n\t * @internal\n\t */\n\tconstructor(type: T, err: Error | string) {\n\t\tif (typeof err === \"string\") {\n\t\t\tsuper(err);\n\t\t} else {\n\t\t\tsuper();\n\t\t\tObject.assign(this, err);\n\t\t}\n\n\t\tthis.type = type;\n\t}\n\n\tpublic type: T;\n}\n","import { util } from \"./util\";\nimport logger from \"./logger\";\nimport type { PeerJSOption } from \"./optionInterfaces\";\nimport { version } from \"../package.json\";\n\nexport class API {\n\tconstructor(private readonly _options: PeerJSOption) {}\n\n\tprivate _buildRequest(method: string): Promise<Response> {\n\t\tconst protocol = this._options.secure ? \"https\" : \"http\";\n\t\tconst { host, port, path, key } = this._options;\n\t\tconst url = new URL(`${protocol}://${host}:${port}${path}${key}/${method}`);\n\t\t// TODO: Why timestamp, why random?\n\t\turl.searchParams.set(\"ts\", `${Date.now()}${Math.random()}`);\n\t\turl.searchParams.set(\"version\", version);\n\t\treturn fetch(url.href, {\n\t\t\treferrerPolicy: this._options.referrerPolicy,\n\t\t});\n\t}\n\n\t/** Get a unique ID from the server via XHR and initialize with it. */\n\tasync retrieveId(): Promise<string> {\n\t\ttry {\n\t\t\tconst response = await this._buildRequest(\"id\");\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tthrow new Error(`Error. Status:${response.status}`);\n\t\t\t}\n\n\t\t\treturn response.text();\n\t\t} catch (error) {\n\t\t\tlogger.error(\"Error retrieving ID\", error);\n\n\t\t\tlet pathError = \"\";\n\n\t\t\tif (\n\t\t\t\tthis._options.path === \"/\" &&\n\t\t\t\tthis._options.host !== util.CLOUD_HOST\n\t\t\t) {\n\t\t\t\tpathError =\n\t\t\t\t\t\" If you passed in a `path` to your self-hosted PeerServer, \" +\n\t\t\t\t\t\"you'll also need to pass in that same path when creating a new \" +\n\t\t\t\t\t\"Peer.\";\n\t\t\t}\n\n\t\t\tthrow new Error(\"Could not get an ID from the server.\" + pathError);\n\t\t}\n\t}\n\n\t/** @deprecated */\n\tasync listAllPeers(): Promise<any[]> {\n\t\ttry {\n\t\t\tconst response = await this._buildRequest(\"peers\");\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tlet helpfulError = \"\";\n\n\t\t\t\t\tif (this._options.host === util.CLOUD_HOST) {\n\t\t\t\t\t\thelpfulError =\n\t\t\t\t\t\t\t\"It looks like you're using the cloud server. You can email \" +\n\t\t\t\t\t\t\t\"team@peerjs.com to enable peer listing for your API key.\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\thelpfulError =\n\t\t\t\t\t\t\t\"You need to enable `allow_discovery` on your self-hosted \" +\n\t\t\t\t\t\t\t\"PeerServer to use this feature.\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"It doesn't look like you have permission to list peers IDs. \" +\n\t\t\t\t\t\t\thelpfulError,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(`Error. Status:${response.status}`);\n\t\t\t}\n\n\t\t\treturn response.json();\n\t\t} catch (error) {\n\t\t\tlogger.error(\"Error retrieving list peers\", error);\n\n\t\t\tthrow new Error(\"Could not get list peers from the server.\" + error);\n\t\t}\n\t}\n}\n","import { BinaryPackChunker, concatArrayBuffers } from \"./binaryPackChunker\";\nimport logger from \"../../logger\";\nimport type { Peer } from \"../../peer\";\nimport { BufferedConnection } from \"./BufferedConnection\";\nimport { SerializationType } from \"../../enums\";\nimport { pack, type Packable, unpack } from \"peerjs-js-binarypack\";\n\nexport class BinaryPack extends BufferedConnection {\n\tprivate readonly chunker = new BinaryPackChunker();\n\treadonly serialization = SerializationType.Binary;\n\n\tprivate _chunkedData: {\n\t\t[id: number]: {\n\t\t\tdata: Uint8Array[];\n\t\t\tcount: number;\n\t\t\ttotal: number;\n\t\t};\n\t} = {};\n\n\tpublic override close(options?: { flush?: boolean }) {\n\t\tsuper.close(options);\n\t\tthis._chunkedData = {};\n\t}\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\t}\n\n\t// Handles a DataChannel message.\n\tprotected override _handleDataMessage({ data }: { data: Uint8Array }): void {\n\t\tconst deserializedData = unpack(data);\n\n\t\t// PeerJS specific message\n\t\tconst peerData = deserializedData[\"__peerData\"];\n\t\tif (peerData) {\n\t\t\tif (peerData.type === \"close\") {\n\t\t\t\tthis.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Chunked data -- piece things back together.\n\t\t\t// @ts-ignore\n\t\t\tthis._handleChunk(deserializedData);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.emit(\"data\", deserializedData);\n\t}\n\n\tprivate _handleChunk(data: {\n\t\t__peerData: number;\n\t\tn: number;\n\t\ttotal: number;\n\t\tdata: ArrayBuffer;\n\t}): void {\n\t\tconst id = data.__peerData;\n\t\tconst chunkInfo = this._chunkedData[id] || {\n\t\t\tdata: [],\n\t\t\tcount: 0,\n\t\t\ttotal: data.total,\n\t\t};\n\n\t\tchunkInfo.data[data.n] = new Uint8Array(data.data);\n\t\tchunkInfo.count++;\n\t\tthis._chunkedData[id] = chunkInfo;\n\n\t\tif (chunkInfo.total === chunkInfo.count) {\n\t\t\t// Clean up before making the recursive call to `_handleDataMessage`.\n\t\t\tdelete this._chunkedData[id];\n\n\t\t\t// We've received all the chunks--time to construct the complete data.\n\t\t\t// const data = new Blob(chunkInfo.data);\n\t\t\tconst data = concatArrayBuffers(chunkInfo.data);\n\t\t\tthis._handleDataMessage({ data });\n\t\t}\n\t}\n\n\tprotected override _send(\n\t\tdata: Packable,\n\t\tchunked: boolean,\n\t): void | Promise<void> {\n\t\tif (data instanceof Blob) {\n\t\t\treturn data.arrayBuffer().then((buffer) => {\n\t\t\t\tthis._send(buffer, chunked);\n\t\t\t});\n\t\t}\n\t\tconst blob = pack(data);\n\n\t\tif (!chunked && blob.byteLength > this.chunker.chunkedMTU) {\n\t\t\tthis._sendChunks(blob);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._bufferedSend(blob);\n\t}\n\n\tprivate _sendChunks(blob: ArrayBuffer) {\n\t\tconst blobs = this.chunker.chunk(blob);\n\t\tlogger.log(`DC#${this.connectionId} Try to send ${blobs.length} chunks...`);\n\n\t\tfor (const blob of blobs) {\n\t\t\tthis.send(blob, true);\n\t\t}\n\t}\n}\n","import logger from \"../../logger\";\nimport { DataConnection } from \"../DataConnection\";\n\nexport abstract class BufferedConnection extends DataConnection {\n\tprivate _buffer: any[] = [];\n\tprivate _bufferSize = 0;\n\tprivate _buffering = false;\n\n\tpublic get bufferSize(): number {\n\t\treturn this._bufferSize;\n\t}\n\n\tpublic override _initializeDataChannel(dc: RTCDataChannel) {\n\t\tsuper._initializeDataChannel(dc);\n\t\tthis.dataChannel.binaryType = \"arraybuffer\";\n\t\tthis.dataChannel.addEventListener(\"message\", (e) =>\n\t\t\tthis._handleDataMessage(e),\n\t\t);\n\t}\n\n\tprotected abstract _handleDataMessage(e: MessageEvent): void;\n\n\tprotected _bufferedSend(msg: ArrayBuffer): void {\n\t\tif (this._buffering || !this._trySend(msg)) {\n\t\t\tthis._buffer.push(msg);\n\t\t\tthis._bufferSize = this._buffer.length;\n\t\t}\n\t}\n\n\t// Returns true if the send succeeds.\n\tprivate _trySend(msg: ArrayBuffer): boolean {\n\t\tif (!this.open) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.dataChannel.bufferedAmount > DataConnection.MAX_BUFFERED_AMOUNT) {\n\t\t\tthis._buffering = true;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._buffering = false;\n\t\t\t\tthis._tryBuffer();\n\t\t\t}, 50);\n\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataChannel.send(msg);\n\t\t} catch (e) {\n\t\t\tlogger.error(`DC#:${this.connectionId} Error when sending:`, e);\n\t\t\tthis._buffering = true;\n\n\t\t\tthis.close();\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Try to send the first message in the buffer.\n\tprivate _tryBuffer(): void {\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._buffer.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst msg = this._buffer[0];\n\n\t\tif (this._trySend(msg)) {\n\t\t\tthis._buffer.shift();\n\t\t\tthis._bufferSize = this._buffer.length;\n\t\t\tthis._tryBuffer();\n\t\t}\n\t}\n\n\tpublic override close(options?: { flush?: boolean }) {\n\t\tif (options?.flush) {\n\t\t\tthis.send({\n\t\t\t\t__peerData: {\n\t\t\t\t\ttype: \"close\",\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis._buffer = [];\n\t\tthis._bufferSize = 0;\n\t\tsuper.close();\n\t}\n}\n","import logger from \"../logger\";\nimport { Negotiator } from \"../negotiator\";\nimport {\n\tBaseConnectionErrorType,\n\tConnectionType,\n\tDataConnectionErrorType,\n\tServerMessageType,\n} from \"../enums\";\nimport type { Peer } from \"../peer\";\nimport { BaseConnection, type BaseConnectionEvents } from \"../baseconnection\";\nimport type { ServerMessage } from \"../servermessage\";\nimport type { EventsWithError } from \"../peerError\";\nimport { randomToken } from \"../utils/randomToken\";\n\nexport interface DataConnectionEvents\n\textends EventsWithError<DataConnectionErrorType | BaseConnectionErrorType>,\n\t\tBaseConnectionEvents<DataConnectionErrorType | BaseConnectionErrorType> {\n\t/**\n\t * Emitted when data is received from the remote peer.\n\t */\n\tdata: (data: unknown) => void;\n\t/**\n\t * Emitted when the connection is established and ready-to-use.\n\t */\n\topen: () => void;\n}\n\n/**\n * Wraps a DataChannel between two Peers.\n */\nexport abstract class DataConnection extends BaseConnection<\n\tDataConnectionEvents,\n\tDataConnectionErrorType\n> {\n\tprotected static readonly ID_PREFIX = \"dc_\";\n\tprotected static readonly MAX_BUFFERED_AMOUNT = 8 * 1024 * 1024;\n\n\tprivate _negotiator: Negotiator<DataConnectionEvents, this>;\n\tabstract readonly serialization: string;\n\treadonly reliable: boolean;\n\n\tpublic get type() {\n\t\treturn ConnectionType.Data;\n\t}\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\n\t\tthis.connectionId =\n\t\t\tthis.options.connectionId || DataConnection.ID_PREFIX + randomToken();\n\n\t\tthis.label = this.options.label || this.connectionId;\n\t\tthis.reliable = !!this.options.reliable;\n\n\t\tthis._negotiator = new Negotiator(this);\n\n\t\tthis._negotiator.startConnection(\n\t\t\tthis.options._payload || {\n\t\t\t\toriginator: true,\n\t\t\t\treliable: this.reliable,\n\t\t\t},\n\t\t);\n\t}\n\n\t/** Called by the Negotiator when the DataChannel is ready. */\n\toverride _initializeDataChannel(dc: RTCDataChannel): void {\n\t\tthis.dataChannel = dc;\n\n\t\tthis.dataChannel.onopen = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc connection success`);\n\t\t\tthis._open = true;\n\t\t\tthis.emit(\"open\");\n\t\t};\n\n\t\tthis.dataChannel.onmessage = (e) => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc onmessage:`, e.data);\n\t\t\t// this._handleDataMessage(e);\n\t\t};\n\n\t\tthis.dataChannel.onclose = () => {\n\t\t\tlogger.log(`DC#${this.connectionId} dc closed for:`, this.peer);\n\t\t\tthis.close();\n\t\t};\n\t}\n\n\t/**\n\t * Exposed functionality for users.\n\t */\n\n\t/** Allows user to close connection. */\n\tclose(options?: { flush?: boolean }): void {\n\t\tif (options?.flush) {\n\t\t\tthis.send({\n\t\t\t\t__peerData: {\n\t\t\t\t\ttype: \"close\",\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this._negotiator) {\n\t\t\tthis._negotiator.cleanup();\n\t\t\tthis._negotiator = null;\n\t\t}\n\n\t\tif (this.provider) {\n\t\t\tthis.provider._removeConnection(this);\n\n\t\t\tthis.provider = null;\n\t\t}\n\n\t\tif (this.dataChannel) {\n\t\t\tthis.dataChannel.onopen = null;\n\t\t\tthis.dataChannel.onmessage = null;\n\t\t\tthis.dataChannel.onclose = null;\n\t\t\tthis.dataChannel = null;\n\t\t}\n\n\t\tif (!this.open) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._open = false;\n\n\t\tsuper.emit(\"close\");\n\t}\n\n\tprotected abstract _send(data: any, chunked: boolean): void | Promise<void>;\n\n\t/** Allows user to send data. */\n\tpublic send(data: any, chunked = false) {\n\t\tif (!this.open) {\n\t\t\tthis.emitError(\n\t\t\t\tDataConnectionErrorType.NotOpenYet,\n\t\t\t\t\"Connection is not open. You should listen for the `open` event before sending messages.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\treturn this._send(data, chunked);\n\t}\n\n\tasync handleMessage(message: ServerMessage) {\n\t\tconst payload = message.payload;\n\n\t\tswitch (message.type) {\n\t\t\tcase ServerMessageType.Answer:\n\t\t\t\tawait this._negotiator.handleSDP(message.type, payload.sdp);\n\t\t\t\tbreak;\n\t\t\tcase ServerMessageType.Candidate:\n\t\t\t\tawait this._negotiator.handleCandidate(payload.candidate);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.warn(\n\t\t\t\t\t\"Unrecognized message type:\",\n\t\t\t\t\tmessage.type,\n\t\t\t\t\t\"from peer:\",\n\t\t\t\t\tthis.peer,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","import { BufferedConnection } from \"./BufferedConnection\";\nimport { SerializationType } from \"../../enums\";\n\nexport class Raw extends BufferedConnection {\n\treadonly serialization = SerializationType.None;\n\n\tprotected _handleDataMessage({ data }) {\n\t\tsuper.emit(\"data\", data);\n\t}\n\n\toverride _send(data, _chunked) {\n\t\tthis._bufferedSend(data);\n\t}\n}\n","import { BufferedConnection } from \"./BufferedConnection\";\nimport { DataConnectionErrorType, SerializationType } from \"../../enums\";\nimport { util } from \"../../util\";\n\nexport class Json extends BufferedConnection {\n\treadonly serialization = SerializationType.JSON;\n\tprivate readonly encoder = new TextEncoder();\n\tprivate readonly decoder = new TextDecoder();\n\n\tstringify: (data: any) => string = JSON.stringify;\n\tparse: (data: string) => any = JSON.parse;\n\n\t// Handles a DataChannel message.\n\tprotected override _handleDataMessage({ data }: { data: Uint8Array }): void {\n\t\tconst deserializedData = this.parse(this.decoder.decode(data));\n\n\t\t// PeerJS specific message\n\t\tconst peerData = deserializedData[\"__peerData\"];\n\t\tif (peerData && peerData.type === \"close\") {\n\t\t\tthis.close();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.emit(\"data\", deserializedData);\n\t}\n\n\toverride _send(data, _chunked) {\n\t\tconst encodedData = this.encoder.encode(this.stringify(data));\n\t\tif (encodedData.byteLength >= util.chunkedMTU) {\n\t\t\tthis.emitError(\n\t\t\t\tDataConnectionErrorType.MessageToBig,\n\t\t\t\t\"Message too big for JSON channel\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tthis._bufferedSend(encodedData);\n\t}\n}\n","import { Peer, type SerializerMapping } from \"./peer\";\nimport { Cbor } from \"./dataconnection/StreamConnection/Cbor\";\n\nexport class CborPeer extends Peer {\n\toverride _serializers: SerializerMapping = {\n\t\tCbor,\n\t\tdefault: Cbor,\n\t};\n}\n","import type { Peer } from \"../../peer.js\";\nimport { Decoder, Encoder } from \"cbor-x\";\nimport { StreamConnection } from \"./StreamConnection.js\";\n\nconst NullValue = Symbol.for(null);\n\nfunction concatUint8Array(buffer1: Uint8Array, buffer2: Uint8Array) {\n\tconst tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\ttmp.set(buffer1, 0);\n\ttmp.set(buffer2, buffer1.byteLength);\n\treturn new Uint8Array(tmp.buffer);\n}\n\nconst iterateOver = async function* (stream: ReadableStream) {\n\tconst reader = stream.getReader();\n\ttry {\n\t\twhile (true) {\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done) return;\n\t\t\tyield value;\n\t\t}\n\t} finally {\n\t\treader.releaseLock();\n\t}\n};\n\nexport class Cbor extends StreamConnection {\n\treadonly serialization = \"Cbor\";\n\tprivate _encoder = new Encoder();\n\tprivate _decoder = new Decoder();\n\tprivate _inc;\n\tprivate _decoderStream = new TransformStream<ArrayBuffer, unknown>({\n\t\ttransform: (abchunk, controller) => {\n\t\t\tlet chunk = new Uint8Array(abchunk);\n\t\t\tif (this._inc) {\n\t\t\t\tchunk = concatUint8Array(this._inc, chunk);\n\t\t\t\tthis._inc = null;\n\t\t\t}\n\t\t\tlet values;\n\t\t\ttry {\n\t\t\t\tvalues = this._decoder.decodeMultiple(chunk);\n\t\t\t} catch (error) {\n\t\t\t\tif (error.incomplete) {\n\t\t\t\t\tthis._inc = chunk.subarray(error.lastPosition);\n\t\t\t\t\tvalues = error.values;\n\t\t\t\t} else throw error;\n\t\t\t} finally {\n\t\t\t\tfor (let value of values || []) {\n\t\t\t\t\tif (value === null) value = NullValue;\n\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, { ...options, reliable: true });\n\n\t\tvoid this._rawReadStream.pipeTo(this._decoderStream.writable);\n\n\t\t(async () => {\n\t\t\tfor await (const msg of iterateOver(this._decoderStream.readable)) {\n\t\t\t\tif (msg.__peerData?.type === \"close\") {\n\t\t\t\t\tthis.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.emit(\"data\", msg);\n\t\t\t}\n\t\t})();\n\t}\n\n\tprotected override _send(data) {\n\t\treturn this.writer.write(this._encoder.encode(data));\n\t}\n}\n","import logger from \"../../logger.js\";\nimport type { Peer } from \"../../peer.js\";\nimport { DataConnection } from \"../DataConnection.js\";\n\nexport abstract class StreamConnection extends DataConnection {\n\tprivate _CHUNK_SIZE = 1024 * 8 * 4;\n\tprivate _splitStream = new TransformStream<Uint8Array>({\n\t\ttransform: (chunk, controller) => {\n\t\t\tfor (let split = 0; split < chunk.length; split += this._CHUNK_SIZE) {\n\t\t\t\tcontroller.enqueue(chunk.subarray(split, split + this._CHUNK_SIZE));\n\t\t\t}\n\t\t},\n\t});\n\tprivate _rawSendStream = new WritableStream<ArrayBuffer>({\n\t\twrite: async (chunk, controller) => {\n\t\t\tconst openEvent = new Promise((resolve) =>\n\t\t\t\tthis.dataChannel.addEventListener(\"bufferedamountlow\", resolve, {\n\t\t\t\t\tonce: true,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// if we can send the chunk now, send it\n\t\t\t// if not, we wait until at least half of the sending buffer is free again\n\t\t\tawait (this.dataChannel.bufferedAmount <=\n\t\t\t\tDataConnection.MAX_BUFFERED_AMOUNT - chunk.byteLength || openEvent);\n\n\t\t\t// TODO: what can go wrong here?\n\t\t\ttry {\n\t\t\t\tthis.dataChannel.send(chunk);\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(`DC#:${this.connectionId} Error when sending:`, e);\n\t\t\t\tcontroller.error(e);\n\t\t\t\tthis.close();\n\t\t\t}\n\t\t},\n\t});\n\tprotected writer = this._splitStream.writable.getWriter();\n\n\tprotected _rawReadStream = new ReadableStream<ArrayBuffer>({\n\t\tstart: (controller) => {\n\t\t\tthis.once(\"open\", () => {\n\t\t\t\tthis.dataChannel.addEventListener(\"message\", (e) => {\n\t\t\t\t\tcontroller.enqueue(e.data);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t});\n\n\tprotected constructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, { ...options, reliable: true });\n\n\t\tvoid this._splitStream.readable.pipeTo(this._rawSendStream);\n\t}\n\n\tpublic override _initializeDataChannel(dc) {\n\t\tsuper._initializeDataChannel(dc);\n\t\tthis.dataChannel.binaryType = \"arraybuffer\";\n\t\tthis.dataChannel.bufferedAmountLowThreshold =\n\t\t\tDataConnection.MAX_BUFFERED_AMOUNT / 2;\n\t}\n}\n","import { Peer, type SerializerMapping } from \"./peer\";\nimport { MsgPack } from \"./exports\";\n\nexport class MsgPackPeer extends Peer {\n\toverride _serializers: SerializerMapping = {\n\t\tMsgPack,\n\t\tdefault: MsgPack,\n\t};\n}\n","import { decodeMultiStream, Encoder } from \"@msgpack/msgpack\";\nimport { StreamConnection } from \"./StreamConnection.js\";\nimport type { Peer } from \"../../peer.js\";\n\nexport class MsgPack extends StreamConnection {\n\treadonly serialization = \"MsgPack\";\n\tprivate _encoder = new Encoder();\n\n\tconstructor(peerId: string, provider: Peer, options: any) {\n\t\tsuper(peerId, provider, options);\n\n\t\t(async () => {\n\t\t\tfor await (const msg of decodeMultiStream(this._rawReadStream)) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (msg.__peerData?.type === \"close\") {\n\t\t\t\t\tthis.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.emit(\"data\", msg);\n\t\t\t}\n\t\t})();\n\t}\n\n\tprotected override _send(data) {\n\t\treturn this.writer.write(this._encoder.encode(data));\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}