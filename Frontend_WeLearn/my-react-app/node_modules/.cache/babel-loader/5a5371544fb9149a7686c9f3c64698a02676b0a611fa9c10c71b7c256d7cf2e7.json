{"ast":null,"code":"import { Decoder } from \"./Decoder.mjs\";\nexport var defaultDecodeOptions = {};\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode(buffer, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decode(buffer);\n}\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti(buffer, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeMulti(buffer);\n}","map":{"version":3,"names":["Decoder","defaultDecodeOptions","decode","buffer","options","decoder","extensionCodec","context","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","decodeMulti"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\decode.ts"],"sourcesContent":["import { Decoder } from \"./Decoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeMulti(buffer);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAY;AA0CpC,OAAO,IAAMC,oBAAoB,GAAkB,EAAE;AAErD;;;;;;;;;AASA,OAAM,SAAUC,MAAMA,CACpBC,MAAwC,EACxCC,OAAiF;EAAjF,IAAAA,OAAA;IAAAA,OAAA,GAAsDH,oBAA2B;EAAA;EAEjF,IAAMI,OAAO,GAAG,IAAIL,OAAO,CACzBI,OAAO,CAACE,cAAc,EACrBF,OAA6C,CAACG,OAAO,EACtDH,OAAO,CAACI,YAAY,EACpBJ,OAAO,CAACK,YAAY,EACpBL,OAAO,CAACM,cAAc,EACtBN,OAAO,CAACO,YAAY,EACpBP,OAAO,CAACQ,YAAY,CACrB;EACD,OAAOP,OAAO,CAACH,MAAM,CAACC,MAAM,CAAC;AAC/B;AAEA;;;;;;;AAOA,OAAM,SAAUU,WAAWA,CACzBV,MAAwC,EACxCC,OAAiF;EAAjF,IAAAA,OAAA;IAAAA,OAAA,GAAsDH,oBAA2B;EAAA;EAEjF,IAAMI,OAAO,GAAG,IAAIL,OAAO,CACzBI,OAAO,CAACE,cAAc,EACrBF,OAA6C,CAACG,OAAO,EACtDH,OAAO,CAACI,YAAY,EACpBJ,OAAO,CAACK,YAAY,EACpBL,OAAO,CAACM,cAAc,EACtBN,OAAO,CAACO,YAAY,EACpBP,OAAO,CAACQ,YAAY,CACrB;EACD,OAAOP,OAAO,CAACQ,WAAW,CAACV,MAAM,CAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}