{"ast":null,"code":"// ExtensionCodec to handle MessagePack extensions\nimport { ExtData } from \"./ExtData.mjs\";\nimport { timestampExtension } from \"./timestamp.mjs\";\nvar ExtensionCodec = /** @class */function () {\n  function ExtensionCodec() {\n    // built-in extensions\n    this.builtInEncoders = [];\n    this.builtInDecoders = [];\n    // custom extensions\n    this.encoders = [];\n    this.decoders = [];\n    this.register(timestampExtension);\n  }\n  ExtensionCodec.prototype.register = function (_a) {\n    var type = _a.type,\n      encode = _a.encode,\n      decode = _a.decode;\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      var index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  };\n  ExtensionCodec.prototype.tryToEncode = function (object, context) {\n    // built-in extensions\n    for (var i = 0; i < this.builtInEncoders.length; i++) {\n      var encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        var data = encodeExt(object, context);\n        if (data != null) {\n          var type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n    // custom extensions\n    for (var i = 0; i < this.encoders.length; i++) {\n      var encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        var data = encodeExt(object, context);\n        if (data != null) {\n          var type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  };\n  ExtensionCodec.prototype.decode = function (data, type, context) {\n    var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  };\n  ExtensionCodec.defaultCodec = new ExtensionCodec();\n  return ExtensionCodec;\n}();\nexport { ExtensionCodec };","map":{"version":3,"names":["ExtData","timestampExtension","ExtensionCodec","builtInEncoders","builtInDecoders","encoders","decoders","register","prototype","_a","type","encode","decode","index","tryToEncode","object","context","i","length","encodeExt","data","decodeExt","defaultCodec"],"sources":["C:\\Users\\Катя\\Desktop\\WeLearn\\Frontend_WeLearn\\node_modules\\@msgpack\\msgpack\\src\\ExtensionCodec.ts"],"sourcesContent":["// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}